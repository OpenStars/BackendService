// Autogenerated by Thrift Compiler (0.13.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package generic

import(
	"bytes"
	"context"
	"reflect"
	"database/sql/driver"
	"errors"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

type TErrorCode int64
const (
  TErrorCode_EGood TErrorCode = 0
  TErrorCode_ENoRootMeta TErrorCode = 1
  TErrorCode_ECouldNotConnectMetadata TErrorCode = 2
  TErrorCode_ECouldNotConnectIDGen TErrorCode = 3
  TErrorCode_ECouldNotConnectSmallSet TErrorCode = 4
  TErrorCode_ECouldNotConnectRootMetaMapping TErrorCode = 5
  TErrorCode_EItemNotExisted TErrorCode = 100
  TErrorCode_EUnknownException TErrorCode = 10
  TErrorCode_EBigSetNotExisted TErrorCode = 101
  TErrorCode_EBigSetCreated TErrorCode = 102
  TErrorCode_EBigSetAlreadyExisted TErrorCode = 103
  TErrorCode_EBigSetAssigned TErrorCode = 104
)

func (p TErrorCode) String() string {
  switch p {
  case TErrorCode_EGood: return "EGood"
  case TErrorCode_ENoRootMeta: return "ENoRootMeta"
  case TErrorCode_ECouldNotConnectMetadata: return "ECouldNotConnectMetadata"
  case TErrorCode_ECouldNotConnectIDGen: return "ECouldNotConnectIDGen"
  case TErrorCode_ECouldNotConnectSmallSet: return "ECouldNotConnectSmallSet"
  case TErrorCode_ECouldNotConnectRootMetaMapping: return "ECouldNotConnectRootMetaMapping"
  case TErrorCode_EItemNotExisted: return "EItemNotExisted"
  case TErrorCode_EUnknownException: return "EUnknownException"
  case TErrorCode_EBigSetNotExisted: return "EBigSetNotExisted"
  case TErrorCode_EBigSetCreated: return "EBigSetCreated"
  case TErrorCode_EBigSetAlreadyExisted: return "EBigSetAlreadyExisted"
  case TErrorCode_EBigSetAssigned: return "EBigSetAssigned"
  }
  return "<UNSET>"
}

func TErrorCodeFromString(s string) (TErrorCode, error) {
  switch s {
  case "EGood": return TErrorCode_EGood, nil 
  case "ENoRootMeta": return TErrorCode_ENoRootMeta, nil 
  case "ECouldNotConnectMetadata": return TErrorCode_ECouldNotConnectMetadata, nil 
  case "ECouldNotConnectIDGen": return TErrorCode_ECouldNotConnectIDGen, nil 
  case "ECouldNotConnectSmallSet": return TErrorCode_ECouldNotConnectSmallSet, nil 
  case "ECouldNotConnectRootMetaMapping": return TErrorCode_ECouldNotConnectRootMetaMapping, nil 
  case "EItemNotExisted": return TErrorCode_EItemNotExisted, nil 
  case "EUnknownException": return TErrorCode_EUnknownException, nil 
  case "EBigSetNotExisted": return TErrorCode_EBigSetNotExisted, nil 
  case "EBigSetCreated": return TErrorCode_EBigSetCreated, nil 
  case "EBigSetAlreadyExisted": return TErrorCode_EBigSetAlreadyExisted, nil 
  case "EBigSetAssigned": return TErrorCode_EBigSetAssigned, nil 
  }
  return TErrorCode(0), fmt.Errorf("not a valid TErrorCode string")
}


func TErrorCodePtr(v TErrorCode) *TErrorCode { return &v }

func (p TErrorCode) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *TErrorCode) UnmarshalText(text []byte) error {
q, err := TErrorCodeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *TErrorCode) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = TErrorCode(v)
return nil
}

func (p * TErrorCode) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type TItemKey []byte

func TItemKeyPtr(v TItemKey) *TItemKey { return &v }

type TItemValue []byte

func TItemValuePtr(v TItemValue) *TItemValue { return &v }

type TItemList []*TItem

func TItemListPtr(v TItemList) *TItemList { return &v }

type TItemKeySet []TItemKey

func TItemKeySetPtr(v TItemKeySet) *TItemKeySet { return &v }

type TKey int64

func TKeyPtr(v TKey) *TKey { return &v }

type TContainerKey int64

func TContainerKeyPtr(v TContainerKey) *TContainerKey { return &v }

type TSmallSetIDKey TContainerKey

func TSmallSetIDKeyPtr(v TSmallSetIDKey) *TSmallSetIDKey { return &v }

type TLevelType int16

func TLevelTypePtr(v TLevelType) *TLevelType { return &v }

type TMetaKey TContainerKey

func TMetaKeyPtr(v TMetaKey) *TMetaKey { return &v }

type TStringKey string

func TStringKeyPtr(v TStringKey) *TStringKey { return &v }

// Attributes:
//  - Key
//  - Value
type TItem struct {
  Key []byte `thrift:"key,1,required" db:"key" json:"key"`
  Value []byte `thrift:"value,2,required" db:"value" json:"value"`
}

func NewTItem() *TItem {
  return &TItem{}
}


func (p *TItem) GetKey() []byte {
  return p.Key
}

func (p *TItem) GetValue() []byte {
  return p.Value
}
func (p *TItem) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetKey bool = false;
  var issetValue bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
        issetKey = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
        issetValue = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetKey{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Key is not set"));
  }
  if !issetValue{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Value is not set"));
  }
  return nil
}

func (p *TItem)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Key = v
}
  return nil
}

func (p *TItem)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Value = v
}
  return nil
}

func (p *TItem) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TItem"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TItem) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("key", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:key: ", p), err) }
  if err := oprot.WriteBinary(p.Key); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.key (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:key: ", p), err) }
  return err
}

func (p *TItem) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("value", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:value: ", p), err) }
  if err := oprot.WriteBinary(p.Value); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.value (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:value: ", p), err) }
  return err
}

func (p *TItem) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TItem(%+v)", *p)
}

// Attributes:
//  - Entries
//  - Prev
//  - Nxt
type TSmallSet struct {
  Entries TItemList `thrift:"entries,1" db:"entries" json:"entries"`
  Prev *TSmallSetIDKey `thrift:"prev,2" db:"prev" json:"prev,omitempty"`
  Nxt *TSmallSetIDKey `thrift:"nxt,3" db:"nxt" json:"nxt,omitempty"`
}

func NewTSmallSet() *TSmallSet {
  return &TSmallSet{}
}


func (p *TSmallSet) GetEntries() TItemList {
  return p.Entries
}
var TSmallSet_Prev_DEFAULT TSmallSetIDKey
func (p *TSmallSet) GetPrev() TSmallSetIDKey {
  if !p.IsSetPrev() {
    return TSmallSet_Prev_DEFAULT
  }
return *p.Prev
}
var TSmallSet_Nxt_DEFAULT TSmallSetIDKey
func (p *TSmallSet) GetNxt() TSmallSetIDKey {
  if !p.IsSetNxt() {
    return TSmallSet_Nxt_DEFAULT
  }
return *p.Nxt
}
func (p *TSmallSet) IsSetPrev() bool {
  return p.Prev != nil
}

func (p *TSmallSet) IsSetNxt() bool {
  return p.Nxt != nil
}

func (p *TSmallSet) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TSmallSet)  ReadField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make(TItemList, 0, size)
  p.Entries =  tSlice
  for i := 0; i < size; i ++ {
    _elem0 := &TItem{}
    if err := _elem0.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem0), err)
    }
    p.Entries = append(p.Entries, _elem0)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TSmallSet)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := TSmallSetIDKey(v)
  p.Prev = &temp
}
  return nil
}

func (p *TSmallSet)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := TSmallSetIDKey(v)
  p.Nxt = &temp
}
  return nil
}

func (p *TSmallSet) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TSmallSet"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TSmallSet) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("entries", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:entries: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Entries)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Entries {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:entries: ", p), err) }
  return err
}

func (p *TSmallSet) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetPrev() {
    if err := oprot.WriteFieldBegin("prev", thrift.I64, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:prev: ", p), err) }
    if err := oprot.WriteI64(int64(*p.Prev)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.prev (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:prev: ", p), err) }
  }
  return err
}

func (p *TSmallSet) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetNxt() {
    if err := oprot.WriteFieldBegin("nxt", thrift.I64, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:nxt: ", p), err) }
    if err := oprot.WriteI64(int64(*p.Nxt)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.nxt (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:nxt: ", p), err) }
  }
  return err
}

func (p *TSmallSet) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TSmallSet(%+v)", *p)
}

// Attributes:
//  - Items
type TItemSet struct {
  Items []*TItem `thrift:"items,1" db:"items" json:"items"`
}

func NewTItemSet() *TItemSet {
  return &TItemSet{}
}


func (p *TItemSet) GetItems() []*TItem {
  return p.Items
}
func (p *TItemSet) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TItemSet)  ReadField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TItem, 0, size)
  p.Items =  tSlice
  for i := 0; i < size; i ++ {
    _elem1 := &TItem{}
    if err := _elem1.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem1), err)
    }
    p.Items = append(p.Items, _elem1)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TItemSet) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TItemSet"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TItemSet) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("items", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:items: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Items)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Items {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:items: ", p), err) }
  return err
}

func (p *TItemSet) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TItemSet(%+v)", *p)
}

// Attributes:
//  - MinItem
//  - MetaID
//  - Count
type TMetaItem struct {
  MinItem TItemKey `thrift:"minItem,1" db:"minItem" json:"minItem"`
  MetaID int64 `thrift:"metaID,2" db:"metaID" json:"metaID"`
  Count int32 `thrift:"count,3" db:"count" json:"count"`
}

func NewTMetaItem() *TMetaItem {
  return &TMetaItem{}
}


func (p *TMetaItem) GetMinItem() TItemKey {
  return p.MinItem
}

func (p *TMetaItem) GetMetaID() int64 {
  return p.MetaID
}

func (p *TMetaItem) GetCount() int32 {
  return p.Count
}
func (p *TMetaItem) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TMetaItem)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TItemKey(v)
  p.MinItem = temp
}
  return nil
}

func (p *TMetaItem)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.MetaID = v
}
  return nil
}

func (p *TMetaItem)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Count = v
}
  return nil
}

func (p *TMetaItem) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TMetaItem"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TMetaItem) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("minItem", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:minItem: ", p), err) }
  if err := oprot.WriteBinary(p.MinItem); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.minItem (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:minItem: ", p), err) }
  return err
}

func (p *TMetaItem) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("metaID", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:metaID: ", p), err) }
  if err := oprot.WriteI64(int64(p.MetaID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.metaID (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:metaID: ", p), err) }
  return err
}

func (p *TMetaItem) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("count", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:count: ", p), err) }
  if err := oprot.WriteI32(int32(p.Count)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.count (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:count: ", p), err) }
  return err
}

func (p *TMetaItem) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TMetaItem(%+v)", *p)
}

// Attributes:
//  - MetaID
//  - ParentID
//  - ChildCount
//  - IsSmallSet
type TNeedSplitInfo struct {
  MetaID TMetaKey `thrift:"metaID,1" db:"metaID" json:"metaID"`
  ParentID TMetaKey `thrift:"parentID,2" db:"parentID" json:"parentID"`
  ChildCount int32 `thrift:"childCount,3" db:"childCount" json:"childCount"`
  IsSmallSet bool `thrift:"isSmallSet,4" db:"isSmallSet" json:"isSmallSet"`
}

func NewTNeedSplitInfo() *TNeedSplitInfo {
  return &TNeedSplitInfo{}
}


func (p *TNeedSplitInfo) GetMetaID() TMetaKey {
  return p.MetaID
}

func (p *TNeedSplitInfo) GetParentID() TMetaKey {
  return p.ParentID
}

func (p *TNeedSplitInfo) GetChildCount() int32 {
  return p.ChildCount
}

func (p *TNeedSplitInfo) GetIsSmallSet() bool {
  return p.IsSmallSet
}
func (p *TNeedSplitInfo) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TNeedSplitInfo)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TMetaKey(v)
  p.MetaID = temp
}
  return nil
}

func (p *TNeedSplitInfo)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := TMetaKey(v)
  p.ParentID = temp
}
  return nil
}

func (p *TNeedSplitInfo)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.ChildCount = v
}
  return nil
}

func (p *TNeedSplitInfo)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.IsSmallSet = v
}
  return nil
}

func (p *TNeedSplitInfo) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TNeedSplitInfo"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TNeedSplitInfo) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("metaID", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:metaID: ", p), err) }
  if err := oprot.WriteI64(int64(p.MetaID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.metaID (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:metaID: ", p), err) }
  return err
}

func (p *TNeedSplitInfo) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("parentID", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:parentID: ", p), err) }
  if err := oprot.WriteI64(int64(p.ParentID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.parentID (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:parentID: ", p), err) }
  return err
}

func (p *TNeedSplitInfo) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("childCount", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:childCount: ", p), err) }
  if err := oprot.WriteI32(int32(p.ChildCount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.childCount (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:childCount: ", p), err) }
  return err
}

func (p *TNeedSplitInfo) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("isSmallSet", thrift.BOOL, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:isSmallSet: ", p), err) }
  if err := oprot.WriteBool(bool(p.IsSmallSet)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.isSmallSet (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:isSmallSet: ", p), err) }
  return err
}

func (p *TNeedSplitInfo) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TNeedSplitInfo(%+v)", *p)
}

// Attributes:
//  - ParentID
//  - Level
//  - Children
//  - Smallset
//  - Splitinfo
type TBigSetGenericData struct {
  ParentID TContainerKey `thrift:"parentID,1" db:"parentID" json:"parentID"`
  Level TLevelType `thrift:"level,2" db:"level" json:"level"`
  Children []*TMetaItem `thrift:"children,3" db:"children" json:"children,omitempty"`
  Smallset *TSmallSet `thrift:"smallset,4" db:"smallset" json:"smallset,omitempty"`
  Splitinfo *TNeedSplitInfo `thrift:"splitinfo,5" db:"splitinfo" json:"splitinfo,omitempty"`
}

func NewTBigSetGenericData() *TBigSetGenericData {
  return &TBigSetGenericData{}
}


func (p *TBigSetGenericData) GetParentID() TContainerKey {
  return p.ParentID
}

func (p *TBigSetGenericData) GetLevel() TLevelType {
  return p.Level
}
var TBigSetGenericData_Children_DEFAULT []*TMetaItem

func (p *TBigSetGenericData) GetChildren() []*TMetaItem {
  return p.Children
}
var TBigSetGenericData_Smallset_DEFAULT *TSmallSet
func (p *TBigSetGenericData) GetSmallset() *TSmallSet {
  if !p.IsSetSmallset() {
    return TBigSetGenericData_Smallset_DEFAULT
  }
return p.Smallset
}
var TBigSetGenericData_Splitinfo_DEFAULT *TNeedSplitInfo
func (p *TBigSetGenericData) GetSplitinfo() *TNeedSplitInfo {
  if !p.IsSetSplitinfo() {
    return TBigSetGenericData_Splitinfo_DEFAULT
  }
return p.Splitinfo
}
func (p *TBigSetGenericData) IsSetChildren() bool {
  return p.Children != nil
}

func (p *TBigSetGenericData) IsSetSmallset() bool {
  return p.Smallset != nil
}

func (p *TBigSetGenericData) IsSetSplitinfo() bool {
  return p.Splitinfo != nil
}

func (p *TBigSetGenericData) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I16 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TBigSetGenericData)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TContainerKey(v)
  p.ParentID = temp
}
  return nil
}

func (p *TBigSetGenericData)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := TLevelType(v)
  p.Level = temp
}
  return nil
}

func (p *TBigSetGenericData)  ReadField3(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TMetaItem, 0, size)
  p.Children =  tSlice
  for i := 0; i < size; i ++ {
    _elem2 := &TMetaItem{}
    if err := _elem2.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem2), err)
    }
    p.Children = append(p.Children, _elem2)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TBigSetGenericData)  ReadField4(iprot thrift.TProtocol) error {
  p.Smallset = &TSmallSet{}
  if err := p.Smallset.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Smallset), err)
  }
  return nil
}

func (p *TBigSetGenericData)  ReadField5(iprot thrift.TProtocol) error {
  p.Splitinfo = &TNeedSplitInfo{}
  if err := p.Splitinfo.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Splitinfo), err)
  }
  return nil
}

func (p *TBigSetGenericData) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TBigSetGenericData"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TBigSetGenericData) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("parentID", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:parentID: ", p), err) }
  if err := oprot.WriteI64(int64(p.ParentID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.parentID (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:parentID: ", p), err) }
  return err
}

func (p *TBigSetGenericData) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("level", thrift.I16, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:level: ", p), err) }
  if err := oprot.WriteI16(int16(p.Level)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.level (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:level: ", p), err) }
  return err
}

func (p *TBigSetGenericData) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetChildren() {
    if err := oprot.WriteFieldBegin("children", thrift.LIST, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:children: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Children)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Children {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:children: ", p), err) }
  }
  return err
}

func (p *TBigSetGenericData) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetSmallset() {
    if err := oprot.WriteFieldBegin("smallset", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:smallset: ", p), err) }
    if err := p.Smallset.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Smallset), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:smallset: ", p), err) }
  }
  return err
}

func (p *TBigSetGenericData) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetSplitinfo() {
    if err := oprot.WriteFieldBegin("splitinfo", thrift.STRUCT, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:splitinfo: ", p), err) }
    if err := p.Splitinfo.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Splitinfo), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:splitinfo: ", p), err) }
  }
  return err
}

func (p *TBigSetGenericData) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TBigSetGenericData(%+v)", *p)
}

// Attributes:
//  - MinItem
//  - MetaID
//  - Level
type TSetMetaPathItem struct {
  MinItem TItemKey `thrift:"minItem,1" db:"minItem" json:"minItem"`
  MetaID int64 `thrift:"metaID,2" db:"metaID" json:"metaID"`
  Level int8 `thrift:"level,3" db:"level" json:"level"`
}

func NewTSetMetaPathItem() *TSetMetaPathItem {
  return &TSetMetaPathItem{}
}


func (p *TSetMetaPathItem) GetMinItem() TItemKey {
  return p.MinItem
}

func (p *TSetMetaPathItem) GetMetaID() int64 {
  return p.MetaID
}

func (p *TSetMetaPathItem) GetLevel() int8 {
  return p.Level
}
func (p *TSetMetaPathItem) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.BYTE {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TSetMetaPathItem)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TItemKey(v)
  p.MinItem = temp
}
  return nil
}

func (p *TSetMetaPathItem)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.MetaID = v
}
  return nil
}

func (p *TSetMetaPathItem)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadByte(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := int8(v)
  p.Level = temp
}
  return nil
}

func (p *TSetMetaPathItem) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TSetMetaPathItem"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TSetMetaPathItem) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("minItem", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:minItem: ", p), err) }
  if err := oprot.WriteBinary(p.MinItem); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.minItem (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:minItem: ", p), err) }
  return err
}

func (p *TSetMetaPathItem) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("metaID", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:metaID: ", p), err) }
  if err := oprot.WriteI64(int64(p.MetaID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.metaID (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:metaID: ", p), err) }
  return err
}

func (p *TSetMetaPathItem) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("level", thrift.BYTE, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:level: ", p), err) }
  if err := oprot.WriteByte(int8(p.Level)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.level (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:level: ", p), err) }
  return err
}

func (p *TSetMetaPathItem) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TSetMetaPathItem(%+v)", *p)
}

// Attributes:
//  - MetaPath
//  - SmallSetInfo
//  - SplitInfo
type TSetMetaPath struct {
  MetaPath []*TSetMetaPathItem `thrift:"metaPath,1" db:"metaPath" json:"metaPath"`
  SmallSetInfo *TSetMetaPathItem `thrift:"smallSetInfo,2" db:"smallSetInfo" json:"smallSetInfo,omitempty"`
  SplitInfo *TNeedSplitInfo `thrift:"splitInfo,3" db:"splitInfo" json:"splitInfo,omitempty"`
}

func NewTSetMetaPath() *TSetMetaPath {
  return &TSetMetaPath{}
}


func (p *TSetMetaPath) GetMetaPath() []*TSetMetaPathItem {
  return p.MetaPath
}
var TSetMetaPath_SmallSetInfo_DEFAULT *TSetMetaPathItem
func (p *TSetMetaPath) GetSmallSetInfo() *TSetMetaPathItem {
  if !p.IsSetSmallSetInfo() {
    return TSetMetaPath_SmallSetInfo_DEFAULT
  }
return p.SmallSetInfo
}
var TSetMetaPath_SplitInfo_DEFAULT *TNeedSplitInfo
func (p *TSetMetaPath) GetSplitInfo() *TNeedSplitInfo {
  if !p.IsSetSplitInfo() {
    return TSetMetaPath_SplitInfo_DEFAULT
  }
return p.SplitInfo
}
func (p *TSetMetaPath) IsSetSmallSetInfo() bool {
  return p.SmallSetInfo != nil
}

func (p *TSetMetaPath) IsSetSplitInfo() bool {
  return p.SplitInfo != nil
}

func (p *TSetMetaPath) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TSetMetaPath)  ReadField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TSetMetaPathItem, 0, size)
  p.MetaPath =  tSlice
  for i := 0; i < size; i ++ {
    _elem3 := &TSetMetaPathItem{}
    if err := _elem3.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem3), err)
    }
    p.MetaPath = append(p.MetaPath, _elem3)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TSetMetaPath)  ReadField2(iprot thrift.TProtocol) error {
  p.SmallSetInfo = &TSetMetaPathItem{}
  if err := p.SmallSetInfo.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SmallSetInfo), err)
  }
  return nil
}

func (p *TSetMetaPath)  ReadField3(iprot thrift.TProtocol) error {
  p.SplitInfo = &TNeedSplitInfo{}
  if err := p.SplitInfo.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SplitInfo), err)
  }
  return nil
}

func (p *TSetMetaPath) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TSetMetaPath"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TSetMetaPath) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("metaPath", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:metaPath: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.MetaPath)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.MetaPath {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:metaPath: ", p), err) }
  return err
}

func (p *TSetMetaPath) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetSmallSetInfo() {
    if err := oprot.WriteFieldBegin("smallSetInfo", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:smallSetInfo: ", p), err) }
    if err := p.SmallSetInfo.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SmallSetInfo), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:smallSetInfo: ", p), err) }
  }
  return err
}

func (p *TSetMetaPath) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetSplitInfo() {
    if err := oprot.WriteFieldBegin("splitInfo", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:splitInfo: ", p), err) }
    if err := p.SplitInfo.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SplitInfo), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:splitInfo: ", p), err) }
  }
  return err
}

func (p *TSetMetaPath) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TSetMetaPath(%+v)", *p)
}

// Attributes:
//  - SmallSetIDs
//  - FirstIdxFrom
type TGetSliceInfo struct {
  SmallSetIDs []TMetaKey `thrift:"smallSetIDs,1" db:"smallSetIDs" json:"smallSetIDs"`
  FirstIdxFrom int32 `thrift:"firstIdxFrom,2" db:"firstIdxFrom" json:"firstIdxFrom"`
}

func NewTGetSliceInfo() *TGetSliceInfo {
  return &TGetSliceInfo{}
}


func (p *TGetSliceInfo) GetSmallSetIDs() []TMetaKey {
  return p.SmallSetIDs
}

func (p *TGetSliceInfo) GetFirstIdxFrom() int32 {
  return p.FirstIdxFrom
}
func (p *TGetSliceInfo) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TGetSliceInfo)  ReadField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]TMetaKey, 0, size)
  p.SmallSetIDs =  tSlice
  for i := 0; i < size; i ++ {
var _elem4 TMetaKey
    if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := TMetaKey(v)
    _elem4 = temp
}
    p.SmallSetIDs = append(p.SmallSetIDs, _elem4)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TGetSliceInfo)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.FirstIdxFrom = v
}
  return nil
}

func (p *TGetSliceInfo) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TGetSliceInfo"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TGetSliceInfo) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("smallSetIDs", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:smallSetIDs: ", p), err) }
  if err := oprot.WriteListBegin(thrift.I64, len(p.SmallSetIDs)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.SmallSetIDs {
    if err := oprot.WriteI64(int64(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:smallSetIDs: ", p), err) }
  return err
}

func (p *TGetSliceInfo) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("firstIdxFrom", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:firstIdxFrom: ", p), err) }
  if err := oprot.WriteI32(int32(p.FirstIdxFrom)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.firstIdxFrom (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:firstIdxFrom: ", p), err) }
  return err
}

func (p *TGetSliceInfo) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TGetSliceInfo(%+v)", *p)
}

// Attributes:
//  - Count
//  - MidItem
//  - CountFromMid
//  - Prev
//  - Nxt
type TSmallSetInfo struct {
  Count int32 `thrift:"count,1" db:"count" json:"count"`
  MidItem TItemKey `thrift:"midItem,2" db:"midItem" json:"midItem"`
  CountFromMid int32 `thrift:"countFromMid,3" db:"countFromMid" json:"countFromMid"`
  Prev TSmallSetIDKey `thrift:"prev,4" db:"prev" json:"prev"`
  Nxt TSmallSetIDKey `thrift:"nxt,5" db:"nxt" json:"nxt"`
}

func NewTSmallSetInfo() *TSmallSetInfo {
  return &TSmallSetInfo{}
}


func (p *TSmallSetInfo) GetCount() int32 {
  return p.Count
}

func (p *TSmallSetInfo) GetMidItem() TItemKey {
  return p.MidItem
}

func (p *TSmallSetInfo) GetCountFromMid() int32 {
  return p.CountFromMid
}
var TSmallSetInfo_Prev_DEFAULT TSmallSetIDKey = 0

func (p *TSmallSetInfo) GetPrev() TSmallSetIDKey {
  return p.Prev
}
var TSmallSetInfo_Nxt_DEFAULT TSmallSetIDKey = 0

func (p *TSmallSetInfo) GetNxt() TSmallSetIDKey {
  return p.Nxt
}
func (p *TSmallSetInfo) IsSetPrev() bool {
  return p.Prev != TSmallSetInfo_Prev_DEFAULT
}

func (p *TSmallSetInfo) IsSetNxt() bool {
  return p.Nxt != TSmallSetInfo_Nxt_DEFAULT
}

func (p *TSmallSetInfo) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TSmallSetInfo)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Count = v
}
  return nil
}

func (p *TSmallSetInfo)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := TItemKey(v)
  p.MidItem = temp
}
  return nil
}

func (p *TSmallSetInfo)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.CountFromMid = v
}
  return nil
}

func (p *TSmallSetInfo)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  temp := TSmallSetIDKey(v)
  p.Prev = temp
}
  return nil
}

func (p *TSmallSetInfo)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  temp := TSmallSetIDKey(v)
  p.Nxt = temp
}
  return nil
}

func (p *TSmallSetInfo) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TSmallSetInfo"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TSmallSetInfo) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("count", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:count: ", p), err) }
  if err := oprot.WriteI32(int32(p.Count)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.count (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:count: ", p), err) }
  return err
}

func (p *TSmallSetInfo) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("midItem", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:midItem: ", p), err) }
  if err := oprot.WriteBinary(p.MidItem); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.midItem (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:midItem: ", p), err) }
  return err
}

func (p *TSmallSetInfo) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("countFromMid", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:countFromMid: ", p), err) }
  if err := oprot.WriteI32(int32(p.CountFromMid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.countFromMid (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:countFromMid: ", p), err) }
  return err
}

func (p *TSmallSetInfo) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetPrev() {
    if err := oprot.WriteFieldBegin("prev", thrift.I64, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:prev: ", p), err) }
    if err := oprot.WriteI64(int64(p.Prev)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.prev (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:prev: ", p), err) }
  }
  return err
}

func (p *TSmallSetInfo) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetNxt() {
    if err := oprot.WriteFieldBegin("nxt", thrift.I64, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:nxt: ", p), err) }
    if err := oprot.WriteI64(int64(p.Nxt)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.nxt (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:nxt: ", p), err) }
  }
  return err
}

func (p *TSmallSetInfo) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TSmallSetInfo(%+v)", *p)
}

// Attributes:
//  - Error
//  - Item
type TItemResult_ struct {
  Error TErrorCode `thrift:"error,1" db:"error" json:"error"`
  Item *TItem `thrift:"item,2" db:"item" json:"item,omitempty"`
}

func NewTItemResult_() *TItemResult_ {
  return &TItemResult_{}
}


func (p *TItemResult_) GetError() TErrorCode {
  return p.Error
}
var TItemResult__Item_DEFAULT *TItem
func (p *TItemResult_) GetItem() *TItem {
  if !p.IsSetItem() {
    return TItemResult__Item_DEFAULT
  }
return p.Item
}
func (p *TItemResult_) IsSetItem() bool {
  return p.Item != nil
}

func (p *TItemResult_) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TItemResult_)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TErrorCode(v)
  p.Error = temp
}
  return nil
}

func (p *TItemResult_)  ReadField2(iprot thrift.TProtocol) error {
  p.Item = &TItem{}
  if err := p.Item.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Item), err)
  }
  return nil
}

func (p *TItemResult_) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TItemResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TItemResult_) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("error", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:error: ", p), err) }
  if err := oprot.WriteI32(int32(p.Error)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.error (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:error: ", p), err) }
  return err
}

func (p *TItemResult_) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetItem() {
    if err := oprot.WriteFieldBegin("item", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:item: ", p), err) }
    if err := p.Item.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Item), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:item: ", p), err) }
  }
  return err
}

func (p *TItemResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TItemResult_(%+v)", *p)
}

// Attributes:
//  - Error
//  - Items
type TItemSetResult_ struct {
  Error TErrorCode `thrift:"error,1" db:"error" json:"error"`
  Items *TItemSet `thrift:"items,2" db:"items" json:"items,omitempty"`
}

func NewTItemSetResult_() *TItemSetResult_ {
  return &TItemSetResult_{}
}


func (p *TItemSetResult_) GetError() TErrorCode {
  return p.Error
}
var TItemSetResult__Items_DEFAULT *TItemSet
func (p *TItemSetResult_) GetItems() *TItemSet {
  if !p.IsSetItems() {
    return TItemSetResult__Items_DEFAULT
  }
return p.Items
}
func (p *TItemSetResult_) IsSetItems() bool {
  return p.Items != nil
}

func (p *TItemSetResult_) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TItemSetResult_)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TErrorCode(v)
  p.Error = temp
}
  return nil
}

func (p *TItemSetResult_)  ReadField2(iprot thrift.TProtocol) error {
  p.Items = &TItemSet{}
  if err := p.Items.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Items), err)
  }
  return nil
}

func (p *TItemSetResult_) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TItemSetResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TItemSetResult_) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("error", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:error: ", p), err) }
  if err := oprot.WriteI32(int32(p.Error)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.error (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:error: ", p), err) }
  return err
}

func (p *TItemSetResult_) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetItems() {
    if err := oprot.WriteFieldBegin("items", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:items: ", p), err) }
    if err := p.Items.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Items), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:items: ", p), err) }
  }
  return err
}

func (p *TItemSetResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TItemSetResult_(%+v)", *p)
}

// Attributes:
//  - Error
//  - Ok
//  - OldItem
type TPutItemResult_ struct {
  Error TErrorCode `thrift:"error,1" db:"error" json:"error"`
  Ok bool `thrift:"ok,2" db:"ok" json:"ok"`
  OldItem *TItem `thrift:"oldItem,3" db:"oldItem" json:"oldItem,omitempty"`
}

func NewTPutItemResult_() *TPutItemResult_ {
  return &TPutItemResult_{}
}


func (p *TPutItemResult_) GetError() TErrorCode {
  return p.Error
}

func (p *TPutItemResult_) GetOk() bool {
  return p.Ok
}
var TPutItemResult__OldItem_DEFAULT *TItem
func (p *TPutItemResult_) GetOldItem() *TItem {
  if !p.IsSetOldItem() {
    return TPutItemResult__OldItem_DEFAULT
  }
return p.OldItem
}
func (p *TPutItemResult_) IsSetOldItem() bool {
  return p.OldItem != nil
}

func (p *TPutItemResult_) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TPutItemResult_)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TErrorCode(v)
  p.Error = temp
}
  return nil
}

func (p *TPutItemResult_)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Ok = v
}
  return nil
}

func (p *TPutItemResult_)  ReadField3(iprot thrift.TProtocol) error {
  p.OldItem = &TItem{}
  if err := p.OldItem.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.OldItem), err)
  }
  return nil
}

func (p *TPutItemResult_) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TPutItemResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TPutItemResult_) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("error", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:error: ", p), err) }
  if err := oprot.WriteI32(int32(p.Error)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.error (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:error: ", p), err) }
  return err
}

func (p *TPutItemResult_) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("ok", thrift.BOOL, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ok: ", p), err) }
  if err := oprot.WriteBool(bool(p.Ok)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ok (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ok: ", p), err) }
  return err
}

func (p *TPutItemResult_) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetOldItem() {
    if err := oprot.WriteFieldBegin("oldItem", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:oldItem: ", p), err) }
    if err := p.OldItem.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.OldItem), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:oldItem: ", p), err) }
  }
  return err
}

func (p *TPutItemResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TPutItemResult_(%+v)", *p)
}

// Attributes:
//  - Error
//  - Existed
type TExistedResult_ struct {
  Error TErrorCode `thrift:"error,1" db:"error" json:"error"`
  Existed bool `thrift:"existed,2" db:"existed" json:"existed"`
}

func NewTExistedResult_() *TExistedResult_ {
  return &TExistedResult_{}
}


func (p *TExistedResult_) GetError() TErrorCode {
  return p.Error
}

func (p *TExistedResult_) GetExisted() bool {
  return p.Existed
}
func (p *TExistedResult_) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TExistedResult_)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TErrorCode(v)
  p.Error = temp
}
  return nil
}

func (p *TExistedResult_)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Existed = v
}
  return nil
}

func (p *TExistedResult_) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TExistedResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TExistedResult_) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("error", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:error: ", p), err) }
  if err := oprot.WriteI32(int32(p.Error)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.error (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:error: ", p), err) }
  return err
}

func (p *TExistedResult_) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("existed", thrift.BOOL, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:existed: ", p), err) }
  if err := oprot.WriteBool(bool(p.Existed)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.existed (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:existed: ", p), err) }
  return err
}

func (p *TExistedResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TExistedResult_(%+v)", *p)
}

// Attributes:
//  - Error
//  - Added
//  - Replaced
type TMultiPutItemResult_ struct {
  Error TErrorCode `thrift:"error,1" db:"error" json:"error"`
  Added []TItemKey `thrift:"added,2" db:"added" json:"added,omitempty"`
  Replaced []*TItem `thrift:"replaced,3" db:"replaced" json:"replaced,omitempty"`
}

func NewTMultiPutItemResult_() *TMultiPutItemResult_ {
  return &TMultiPutItemResult_{}
}


func (p *TMultiPutItemResult_) GetError() TErrorCode {
  return p.Error
}
var TMultiPutItemResult__Added_DEFAULT []TItemKey

func (p *TMultiPutItemResult_) GetAdded() []TItemKey {
  return p.Added
}
var TMultiPutItemResult__Replaced_DEFAULT []*TItem

func (p *TMultiPutItemResult_) GetReplaced() []*TItem {
  return p.Replaced
}
func (p *TMultiPutItemResult_) IsSetAdded() bool {
  return p.Added != nil
}

func (p *TMultiPutItemResult_) IsSetReplaced() bool {
  return p.Replaced != nil
}

func (p *TMultiPutItemResult_) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TMultiPutItemResult_)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TErrorCode(v)
  p.Error = temp
}
  return nil
}

func (p *TMultiPutItemResult_)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]TItemKey, 0, size)
  p.Added =  tSlice
  for i := 0; i < size; i ++ {
var _elem5 TItemKey
    if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := TItemKey(v)
    _elem5 = temp
}
    p.Added = append(p.Added, _elem5)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TMultiPutItemResult_)  ReadField3(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TItem, 0, size)
  p.Replaced =  tSlice
  for i := 0; i < size; i ++ {
    _elem6 := &TItem{}
    if err := _elem6.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem6), err)
    }
    p.Replaced = append(p.Replaced, _elem6)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TMultiPutItemResult_) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TMultiPutItemResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TMultiPutItemResult_) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("error", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:error: ", p), err) }
  if err := oprot.WriteI32(int32(p.Error)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.error (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:error: ", p), err) }
  return err
}

func (p *TMultiPutItemResult_) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetAdded() {
    if err := oprot.WriteFieldBegin("added", thrift.LIST, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:added: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRING, len(p.Added)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Added {
      if err := oprot.WriteBinary(v); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:added: ", p), err) }
  }
  return err
}

func (p *TMultiPutItemResult_) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetReplaced() {
    if err := oprot.WriteFieldBegin("replaced", thrift.LIST, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:replaced: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Replaced)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Replaced {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:replaced: ", p), err) }
  }
  return err
}

func (p *TMultiPutItemResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TMultiPutItemResult_(%+v)", *p)
}

// Attributes:
//  - Error
//  - Splited
//  - NewRootID_
//  - MinItem
//  - Count
type TSplitBigSetResult_ struct {
  Error TErrorCode `thrift:"error,1" db:"error" json:"error"`
  Splited bool `thrift:"splited,2" db:"splited" json:"splited"`
  NewRootID_ TContainerKey `thrift:"newRootID,3" db:"newRootID" json:"newRootID"`
  MinItem TItemKey `thrift:"minItem,4" db:"minItem" json:"minItem"`
  Count int64 `thrift:"count,5" db:"count" json:"count"`
}

func NewTSplitBigSetResult_() *TSplitBigSetResult_ {
  return &TSplitBigSetResult_{}
}


func (p *TSplitBigSetResult_) GetError() TErrorCode {
  return p.Error
}

func (p *TSplitBigSetResult_) GetSplited() bool {
  return p.Splited
}

func (p *TSplitBigSetResult_) GetNewRootID_() TContainerKey {
  return p.NewRootID_
}

func (p *TSplitBigSetResult_) GetMinItem() TItemKey {
  return p.MinItem
}

func (p *TSplitBigSetResult_) GetCount() int64 {
  return p.Count
}
func (p *TSplitBigSetResult_) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TSplitBigSetResult_)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TErrorCode(v)
  p.Error = temp
}
  return nil
}

func (p *TSplitBigSetResult_)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Splited = v
}
  return nil
}

func (p *TSplitBigSetResult_)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := TContainerKey(v)
  p.NewRootID_ = temp
}
  return nil
}

func (p *TSplitBigSetResult_)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  temp := TItemKey(v)
  p.MinItem = temp
}
  return nil
}

func (p *TSplitBigSetResult_)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Count = v
}
  return nil
}

func (p *TSplitBigSetResult_) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TSplitBigSetResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TSplitBigSetResult_) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("error", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:error: ", p), err) }
  if err := oprot.WriteI32(int32(p.Error)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.error (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:error: ", p), err) }
  return err
}

func (p *TSplitBigSetResult_) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("splited", thrift.BOOL, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:splited: ", p), err) }
  if err := oprot.WriteBool(bool(p.Splited)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.splited (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:splited: ", p), err) }
  return err
}

func (p *TSplitBigSetResult_) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("newRootID", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:newRootID: ", p), err) }
  if err := oprot.WriteI64(int64(p.NewRootID_)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.newRootID (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:newRootID: ", p), err) }
  return err
}

func (p *TSplitBigSetResult_) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("minItem", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:minItem: ", p), err) }
  if err := oprot.WriteBinary(p.MinItem); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.minItem (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:minItem: ", p), err) }
  return err
}

func (p *TSplitBigSetResult_) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("count", thrift.I64, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:count: ", p), err) }
  if err := oprot.WriteI64(int64(p.Count)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.count (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:count: ", p), err) }
  return err
}

func (p *TSplitBigSetResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TSplitBigSetResult_(%+v)", *p)
}

// Attributes:
//  - BigsetName
//  - BigsetID
//  - Count
type TStringBigSetInfo struct {
  BigsetName TStringKey `thrift:"bigsetName,1,required" db:"bigsetName" json:"bigsetName"`
  BigsetID TContainerKey `thrift:"bigsetID,2,required" db:"bigsetID" json:"bigsetID"`
  Count *int64 `thrift:"count,3" db:"count" json:"count,omitempty"`
}

func NewTStringBigSetInfo() *TStringBigSetInfo {
  return &TStringBigSetInfo{}
}


func (p *TStringBigSetInfo) GetBigsetName() TStringKey {
  return p.BigsetName
}

func (p *TStringBigSetInfo) GetBigsetID() TContainerKey {
  return p.BigsetID
}
var TStringBigSetInfo_Count_DEFAULT int64
func (p *TStringBigSetInfo) GetCount() int64 {
  if !p.IsSetCount() {
    return TStringBigSetInfo_Count_DEFAULT
  }
return *p.Count
}
func (p *TStringBigSetInfo) IsSetCount() bool {
  return p.Count != nil
}

func (p *TStringBigSetInfo) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetBigsetName bool = false;
  var issetBigsetID bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
        issetBigsetName = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
        issetBigsetID = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetBigsetName{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field BigsetName is not set"));
  }
  if !issetBigsetID{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field BigsetID is not set"));
  }
  return nil
}

func (p *TStringBigSetInfo)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TStringKey(v)
  p.BigsetName = temp
}
  return nil
}

func (p *TStringBigSetInfo)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := TContainerKey(v)
  p.BigsetID = temp
}
  return nil
}

func (p *TStringBigSetInfo)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Count = &v
}
  return nil
}

func (p *TStringBigSetInfo) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TStringBigSetInfo"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TStringBigSetInfo) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("bigsetName", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:bigsetName: ", p), err) }
  if err := oprot.WriteString(string(p.BigsetName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.bigsetName (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:bigsetName: ", p), err) }
  return err
}

func (p *TStringBigSetInfo) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("bigsetID", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:bigsetID: ", p), err) }
  if err := oprot.WriteI64(int64(p.BigsetID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.bigsetID (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:bigsetID: ", p), err) }
  return err
}

func (p *TStringBigSetInfo) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetCount() {
    if err := oprot.WriteFieldBegin("count", thrift.I64, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:count: ", p), err) }
    if err := oprot.WriteI64(int64(*p.Count)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.count (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:count: ", p), err) }
  }
  return err
}

func (p *TStringBigSetInfo) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TStringBigSetInfo(%+v)", *p)
}

// Attributes:
//  - Error
//  - Info
type TBigSetInfoResult_ struct {
  Error TErrorCode `thrift:"error,1,required" db:"error" json:"error"`
  Info *TStringBigSetInfo `thrift:"info,2" db:"info" json:"info,omitempty"`
}

func NewTBigSetInfoResult_() *TBigSetInfoResult_ {
  return &TBigSetInfoResult_{}
}


func (p *TBigSetInfoResult_) GetError() TErrorCode {
  return p.Error
}
var TBigSetInfoResult__Info_DEFAULT *TStringBigSetInfo
func (p *TBigSetInfoResult_) GetInfo() *TStringBigSetInfo {
  if !p.IsSetInfo() {
    return TBigSetInfoResult__Info_DEFAULT
  }
return p.Info
}
func (p *TBigSetInfoResult_) IsSetInfo() bool {
  return p.Info != nil
}

func (p *TBigSetInfoResult_) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetError bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
        issetError = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetError{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Error is not set"));
  }
  return nil
}

func (p *TBigSetInfoResult_)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TErrorCode(v)
  p.Error = temp
}
  return nil
}

func (p *TBigSetInfoResult_)  ReadField2(iprot thrift.TProtocol) error {
  p.Info = &TStringBigSetInfo{}
  if err := p.Info.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Info), err)
  }
  return nil
}

func (p *TBigSetInfoResult_) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TBigSetInfoResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TBigSetInfoResult_) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("error", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:error: ", p), err) }
  if err := oprot.WriteI32(int32(p.Error)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.error (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:error: ", p), err) }
  return err
}

func (p *TBigSetInfoResult_) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetInfo() {
    if err := oprot.WriteFieldBegin("info", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:info: ", p), err) }
    if err := p.Info.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Info), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:info: ", p), err) }
  }
  return err
}

func (p *TBigSetInfoResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TBigSetInfoResult_(%+v)", *p)
}

// Attributes:
//  - ItemKey
//  - OldValue
//  - NewValue_
type TCaSItem struct {
  ItemKey TItemKey `thrift:"itemKey,1" db:"itemKey" json:"itemKey"`
  OldValue TItemValue `thrift:"oldValue,2" db:"oldValue" json:"oldValue"`
  NewValue_ TItemValue `thrift:"newValue,3" db:"newValue" json:"newValue"`
}

func NewTCaSItem() *TCaSItem {
  return &TCaSItem{}
}


func (p *TCaSItem) GetItemKey() TItemKey {
  return p.ItemKey
}

func (p *TCaSItem) GetOldValue() TItemValue {
  return p.OldValue
}

func (p *TCaSItem) GetNewValue_() TItemValue {
  return p.NewValue_
}
func (p *TCaSItem) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TCaSItem)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TItemKey(v)
  p.ItemKey = temp
}
  return nil
}

func (p *TCaSItem)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := TItemValue(v)
  p.OldValue = temp
}
  return nil
}

func (p *TCaSItem)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := TItemValue(v)
  p.NewValue_ = temp
}
  return nil
}

func (p *TCaSItem) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TCaSItem"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TCaSItem) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("itemKey", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:itemKey: ", p), err) }
  if err := oprot.WriteBinary(p.ItemKey); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.itemKey (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:itemKey: ", p), err) }
  return err
}

func (p *TCaSItem) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("oldValue", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:oldValue: ", p), err) }
  if err := oprot.WriteBinary(p.OldValue); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.oldValue (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:oldValue: ", p), err) }
  return err
}

func (p *TCaSItem) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("newValue", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:newValue: ", p), err) }
  if err := oprot.WriteBinary(p.NewValue_); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.newValue (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:newValue: ", p), err) }
  return err
}

func (p *TCaSItem) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TCaSItem(%+v)", *p)
}

// Attributes:
//  - RootID
//  - SplitInfo
type SplitJob struct {
  RootID TContainerKey `thrift:"rootID,1,required" db:"rootID" json:"rootID"`
  SplitInfo *TNeedSplitInfo `thrift:"splitInfo,2" db:"splitInfo" json:"splitInfo,omitempty"`
}

func NewSplitJob() *SplitJob {
  return &SplitJob{}
}


func (p *SplitJob) GetRootID() TContainerKey {
  return p.RootID
}
var SplitJob_SplitInfo_DEFAULT *TNeedSplitInfo
func (p *SplitJob) GetSplitInfo() *TNeedSplitInfo {
  if !p.IsSetSplitInfo() {
    return SplitJob_SplitInfo_DEFAULT
  }
return p.SplitInfo
}
func (p *SplitJob) IsSetSplitInfo() bool {
  return p.SplitInfo != nil
}

func (p *SplitJob) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetRootID bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
        issetRootID = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetRootID{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RootID is not set"));
  }
  return nil
}

func (p *SplitJob)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TContainerKey(v)
  p.RootID = temp
}
  return nil
}

func (p *SplitJob)  ReadField2(iprot thrift.TProtocol) error {
  p.SplitInfo = &TNeedSplitInfo{}
  if err := p.SplitInfo.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SplitInfo), err)
  }
  return nil
}

func (p *SplitJob) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SplitJob"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SplitJob) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("rootID", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rootID: ", p), err) }
  if err := oprot.WriteI64(int64(p.RootID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.rootID (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rootID: ", p), err) }
  return err
}

func (p *SplitJob) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetSplitInfo() {
    if err := oprot.WriteFieldBegin("splitInfo", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:splitInfo: ", p), err) }
    if err := p.SplitInfo.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SplitInfo), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:splitInfo: ", p), err) }
  }
  return err
}

func (p *SplitJob) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SplitJob(%+v)", *p)
}

type MasterMetaService interface {
  // Parameters:
  //  - Key
  GetMetaID(ctx context.Context, key TKey) (r TMetaKey, err error)
  // Parameters:
  //  - Key
  //  - MetaID
  SetMetaID(ctx context.Context, key TKey, metaID TMetaKey) (r bool, err error)
}

type MasterMetaServiceClient struct {
  c thrift.TClient
}

func NewMasterMetaServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *MasterMetaServiceClient {
  return &MasterMetaServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewMasterMetaServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *MasterMetaServiceClient {
  return &MasterMetaServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewMasterMetaServiceClient(c thrift.TClient) *MasterMetaServiceClient {
  return &MasterMetaServiceClient{
    c: c,
  }
}

func (p *MasterMetaServiceClient) Client_() thrift.TClient {
  return p.c
}
// Parameters:
//  - Key
func (p *MasterMetaServiceClient) GetMetaID(ctx context.Context, key TKey) (r TMetaKey, err error) {
  var _args7 MasterMetaServiceGetMetaIDArgs
  _args7.Key = key
  var _result8 MasterMetaServiceGetMetaIDResult
  if err = p.Client_().Call(ctx, "getMetaID", &_args7, &_result8); err != nil {
    return
  }
  return _result8.GetSuccess(), nil
}

// Parameters:
//  - Key
//  - MetaID
func (p *MasterMetaServiceClient) SetMetaID(ctx context.Context, key TKey, metaID TMetaKey) (r bool, err error) {
  var _args9 MasterMetaServiceSetMetaIDArgs
  _args9.Key = key
  _args9.MetaID = metaID
  var _result10 MasterMetaServiceSetMetaIDResult
  if err = p.Client_().Call(ctx, "setMetaID", &_args9, &_result10); err != nil {
    return
  }
  return _result10.GetSuccess(), nil
}

type MasterMetaServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler MasterMetaService
}

func (p *MasterMetaServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *MasterMetaServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *MasterMetaServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewMasterMetaServiceProcessor(handler MasterMetaService) *MasterMetaServiceProcessor {

  self11 := &MasterMetaServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self11.processorMap["getMetaID"] = &masterMetaServiceProcessorGetMetaID{handler:handler}
  self11.processorMap["setMetaID"] = &masterMetaServiceProcessorSetMetaID{handler:handler}
return self11
}

func (p *MasterMetaServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x12 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x12.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush(ctx)
  return false, x12

}

type masterMetaServiceProcessorGetMetaID struct {
  handler MasterMetaService
}

func (p *masterMetaServiceProcessorGetMetaID) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MasterMetaServiceGetMetaIDArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getMetaID", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MasterMetaServiceGetMetaIDResult{}
var retval TMetaKey
  var err2 error
  if retval, err2 = p.handler.GetMetaID(ctx, args.Key); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getMetaID: " + err2.Error())
    oprot.WriteMessageBegin("getMetaID", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("getMetaID", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type masterMetaServiceProcessorSetMetaID struct {
  handler MasterMetaService
}

func (p *masterMetaServiceProcessorSetMetaID) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MasterMetaServiceSetMetaIDArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("setMetaID", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MasterMetaServiceSetMetaIDResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.SetMetaID(ctx, args.Key, args.MetaID); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing setMetaID: " + err2.Error())
    oprot.WriteMessageBegin("setMetaID", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("setMetaID", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Key
type MasterMetaServiceGetMetaIDArgs struct {
  Key TKey `thrift:"key,1" db:"key" json:"key"`
}

func NewMasterMetaServiceGetMetaIDArgs() *MasterMetaServiceGetMetaIDArgs {
  return &MasterMetaServiceGetMetaIDArgs{}
}


func (p *MasterMetaServiceGetMetaIDArgs) GetKey() TKey {
  return p.Key
}
func (p *MasterMetaServiceGetMetaIDArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MasterMetaServiceGetMetaIDArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TKey(v)
  p.Key = temp
}
  return nil
}

func (p *MasterMetaServiceGetMetaIDArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getMetaID_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MasterMetaServiceGetMetaIDArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("key", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:key: ", p), err) }
  if err := oprot.WriteI64(int64(p.Key)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.key (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:key: ", p), err) }
  return err
}

func (p *MasterMetaServiceGetMetaIDArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MasterMetaServiceGetMetaIDArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MasterMetaServiceGetMetaIDResult struct {
  Success *TMetaKey `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMasterMetaServiceGetMetaIDResult() *MasterMetaServiceGetMetaIDResult {
  return &MasterMetaServiceGetMetaIDResult{}
}

var MasterMetaServiceGetMetaIDResult_Success_DEFAULT TMetaKey
func (p *MasterMetaServiceGetMetaIDResult) GetSuccess() TMetaKey {
  if !p.IsSetSuccess() {
    return MasterMetaServiceGetMetaIDResult_Success_DEFAULT
  }
return *p.Success
}
func (p *MasterMetaServiceGetMetaIDResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MasterMetaServiceGetMetaIDResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MasterMetaServiceGetMetaIDResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  temp := TMetaKey(v)
  p.Success = &temp
}
  return nil
}

func (p *MasterMetaServiceGetMetaIDResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getMetaID_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MasterMetaServiceGetMetaIDResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.I64, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI64(int64(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MasterMetaServiceGetMetaIDResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MasterMetaServiceGetMetaIDResult(%+v)", *p)
}

// Attributes:
//  - Key
//  - MetaID
type MasterMetaServiceSetMetaIDArgs struct {
  Key TKey `thrift:"key,1" db:"key" json:"key"`
  MetaID TMetaKey `thrift:"metaID,2" db:"metaID" json:"metaID"`
}

func NewMasterMetaServiceSetMetaIDArgs() *MasterMetaServiceSetMetaIDArgs {
  return &MasterMetaServiceSetMetaIDArgs{}
}


func (p *MasterMetaServiceSetMetaIDArgs) GetKey() TKey {
  return p.Key
}

func (p *MasterMetaServiceSetMetaIDArgs) GetMetaID() TMetaKey {
  return p.MetaID
}
func (p *MasterMetaServiceSetMetaIDArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MasterMetaServiceSetMetaIDArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TKey(v)
  p.Key = temp
}
  return nil
}

func (p *MasterMetaServiceSetMetaIDArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := TMetaKey(v)
  p.MetaID = temp
}
  return nil
}

func (p *MasterMetaServiceSetMetaIDArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("setMetaID_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MasterMetaServiceSetMetaIDArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("key", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:key: ", p), err) }
  if err := oprot.WriteI64(int64(p.Key)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.key (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:key: ", p), err) }
  return err
}

func (p *MasterMetaServiceSetMetaIDArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("metaID", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:metaID: ", p), err) }
  if err := oprot.WriteI64(int64(p.MetaID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.metaID (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:metaID: ", p), err) }
  return err
}

func (p *MasterMetaServiceSetMetaIDArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MasterMetaServiceSetMetaIDArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MasterMetaServiceSetMetaIDResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMasterMetaServiceSetMetaIDResult() *MasterMetaServiceSetMetaIDResult {
  return &MasterMetaServiceSetMetaIDResult{}
}

var MasterMetaServiceSetMetaIDResult_Success_DEFAULT bool
func (p *MasterMetaServiceSetMetaIDResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return MasterMetaServiceSetMetaIDResult_Success_DEFAULT
  }
return *p.Success
}
func (p *MasterMetaServiceSetMetaIDResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MasterMetaServiceSetMetaIDResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MasterMetaServiceSetMetaIDResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *MasterMetaServiceSetMetaIDResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("setMetaID_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MasterMetaServiceSetMetaIDResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MasterMetaServiceSetMetaIDResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MasterMetaServiceSetMetaIDResult(%+v)", *p)
}


type TBSGenericDataService interface {
  // Parameters:
  //  - RootID
  //  - Item
  BsgPutItem(ctx context.Context, rootID TContainerKey, item *TItem) (r *TPutItemResult_, err error)
  // Parameters:
  //  - Key
  //  - ItemKey
  BsgRemoveItem(ctx context.Context, key TMetaKey, itemKey TItemKey) (r bool, err error)
  // Parameters:
  //  - RootID
  //  - ItemKey
  BsgExisted(ctx context.Context, rootID TContainerKey, itemKey TItemKey) (r *TExistedResult_, err error)
  // Parameters:
  //  - RootID
  //  - ItemKey
  BsgGetItem(ctx context.Context, rootID TContainerKey, itemKey TItemKey) (r *TItemResult_, err error)
  // Parameters:
  //  - RootID
  //  - FromIdx
  //  - Count
  BsgGetSlice(ctx context.Context, rootID TContainerKey, fromIdx int32, count int32) (r *TItemSetResult_, err error)
  // Parameters:
  //  - RootID
  //  - FromKey
  //  - Count
  BsgGetSliceFromItem(ctx context.Context, rootID TContainerKey, fromKey TItemKey, count int32) (r *TItemSetResult_, err error)
  // Parameters:
  //  - RootID
  //  - FromIdx
  //  - Count
  BsgGetSliceR(ctx context.Context, rootID TContainerKey, fromIdx int32, count int32) (r *TItemSetResult_, err error)
  // Parameters:
  //  - RootID
  //  - FromKey
  //  - Count
  BsgGetSliceFromItemR(ctx context.Context, rootID TContainerKey, fromKey TItemKey, count int32) (r *TItemSetResult_, err error)
  // Parameters:
  //  - RootID
  //  - BrotherRootID
  //  - CurrentSize
  SplitBigSet(ctx context.Context, rootID TContainerKey, brotherRootID TContainerKey, currentSize int64) (r *TSplitBigSetResult_, err error)
  // Parameters:
  //  - RootID
  //  - StartKey
  //  - EndKey
  BsgRangeQuery(ctx context.Context, rootID TContainerKey, startKey TItemKey, endKey TItemKey) (r *TItemSetResult_, err error)
  // Parameters:
  //  - RootID
  //  - SetData
  BsgBulkLoad(ctx context.Context, rootID TContainerKey, setData *TItemSet) (r bool, err error)
  // Parameters:
  //  - RootID
  //  - SetData
  //  - GetAddedItems
  //  - GetReplacedItems
  BsgMultiPut(ctx context.Context, rootID TContainerKey, setData *TItemSet, getAddedItems bool, getReplacedItems bool) (r *TMultiPutItemResult_, err error)
  // Parameters:
  //  - MetaID
  GetSetGenData(ctx context.Context, metaID TMetaKey) (r *TBigSetGenericData, err error)
  // Parameters:
  //  - MetaID
  //  - Metadata
  PutSetGenData(ctx context.Context, metaID TMetaKey, metadata *TBigSetGenericData) (err error)
  // Parameters:
  //  - RootID
  GetTotalCount(ctx context.Context, rootID TContainerKey) (r int64, err error)
  // Parameters:
  //  - RootID
  RemoveAll(ctx context.Context, rootID TContainerKey) (r int64, err error)
}

type TBSGenericDataServiceClient struct {
  c thrift.TClient
}

func NewTBSGenericDataServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *TBSGenericDataServiceClient {
  return &TBSGenericDataServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewTBSGenericDataServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *TBSGenericDataServiceClient {
  return &TBSGenericDataServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewTBSGenericDataServiceClient(c thrift.TClient) *TBSGenericDataServiceClient {
  return &TBSGenericDataServiceClient{
    c: c,
  }
}

func (p *TBSGenericDataServiceClient) Client_() thrift.TClient {
  return p.c
}
// Parameters:
//  - RootID
//  - Item
func (p *TBSGenericDataServiceClient) BsgPutItem(ctx context.Context, rootID TContainerKey, item *TItem) (r *TPutItemResult_, err error) {
  var _args16 TBSGenericDataServiceBsgPutItemArgs
  _args16.RootID = rootID
  _args16.Item = item
  var _result17 TBSGenericDataServiceBsgPutItemResult
  if err = p.Client_().Call(ctx, "bsgPutItem", &_args16, &_result17); err != nil {
    return
  }
  return _result17.GetSuccess(), nil
}

// Parameters:
//  - Key
//  - ItemKey
func (p *TBSGenericDataServiceClient) BsgRemoveItem(ctx context.Context, key TMetaKey, itemKey TItemKey) (r bool, err error) {
  var _args18 TBSGenericDataServiceBsgRemoveItemArgs
  _args18.Key = key
  _args18.ItemKey = itemKey
  var _result19 TBSGenericDataServiceBsgRemoveItemResult
  if err = p.Client_().Call(ctx, "bsgRemoveItem", &_args18, &_result19); err != nil {
    return
  }
  return _result19.GetSuccess(), nil
}

// Parameters:
//  - RootID
//  - ItemKey
func (p *TBSGenericDataServiceClient) BsgExisted(ctx context.Context, rootID TContainerKey, itemKey TItemKey) (r *TExistedResult_, err error) {
  var _args20 TBSGenericDataServiceBsgExistedArgs
  _args20.RootID = rootID
  _args20.ItemKey = itemKey
  var _result21 TBSGenericDataServiceBsgExistedResult
  if err = p.Client_().Call(ctx, "bsgExisted", &_args20, &_result21); err != nil {
    return
  }
  return _result21.GetSuccess(), nil
}

// Parameters:
//  - RootID
//  - ItemKey
func (p *TBSGenericDataServiceClient) BsgGetItem(ctx context.Context, rootID TContainerKey, itemKey TItemKey) (r *TItemResult_, err error) {
  var _args22 TBSGenericDataServiceBsgGetItemArgs
  _args22.RootID = rootID
  _args22.ItemKey = itemKey
  var _result23 TBSGenericDataServiceBsgGetItemResult
  if err = p.Client_().Call(ctx, "bsgGetItem", &_args22, &_result23); err != nil {
    return
  }
  return _result23.GetSuccess(), nil
}

// Parameters:
//  - RootID
//  - FromIdx
//  - Count
func (p *TBSGenericDataServiceClient) BsgGetSlice(ctx context.Context, rootID TContainerKey, fromIdx int32, count int32) (r *TItemSetResult_, err error) {
  var _args24 TBSGenericDataServiceBsgGetSliceArgs
  _args24.RootID = rootID
  _args24.FromIdx = fromIdx
  _args24.Count = count
  var _result25 TBSGenericDataServiceBsgGetSliceResult
  if err = p.Client_().Call(ctx, "bsgGetSlice", &_args24, &_result25); err != nil {
    return
  }
  return _result25.GetSuccess(), nil
}

// Parameters:
//  - RootID
//  - FromKey
//  - Count
func (p *TBSGenericDataServiceClient) BsgGetSliceFromItem(ctx context.Context, rootID TContainerKey, fromKey TItemKey, count int32) (r *TItemSetResult_, err error) {
  var _args26 TBSGenericDataServiceBsgGetSliceFromItemArgs
  _args26.RootID = rootID
  _args26.FromKey = fromKey
  _args26.Count = count
  var _result27 TBSGenericDataServiceBsgGetSliceFromItemResult
  if err = p.Client_().Call(ctx, "bsgGetSliceFromItem", &_args26, &_result27); err != nil {
    return
  }
  return _result27.GetSuccess(), nil
}

// Parameters:
//  - RootID
//  - FromIdx
//  - Count
func (p *TBSGenericDataServiceClient) BsgGetSliceR(ctx context.Context, rootID TContainerKey, fromIdx int32, count int32) (r *TItemSetResult_, err error) {
  var _args28 TBSGenericDataServiceBsgGetSliceRArgs
  _args28.RootID = rootID
  _args28.FromIdx = fromIdx
  _args28.Count = count
  var _result29 TBSGenericDataServiceBsgGetSliceRResult
  if err = p.Client_().Call(ctx, "bsgGetSliceR", &_args28, &_result29); err != nil {
    return
  }
  return _result29.GetSuccess(), nil
}

// Parameters:
//  - RootID
//  - FromKey
//  - Count
func (p *TBSGenericDataServiceClient) BsgGetSliceFromItemR(ctx context.Context, rootID TContainerKey, fromKey TItemKey, count int32) (r *TItemSetResult_, err error) {
  var _args30 TBSGenericDataServiceBsgGetSliceFromItemRArgs
  _args30.RootID = rootID
  _args30.FromKey = fromKey
  _args30.Count = count
  var _result31 TBSGenericDataServiceBsgGetSliceFromItemRResult
  if err = p.Client_().Call(ctx, "bsgGetSliceFromItemR", &_args30, &_result31); err != nil {
    return
  }
  return _result31.GetSuccess(), nil
}

// Parameters:
//  - RootID
//  - BrotherRootID
//  - CurrentSize
func (p *TBSGenericDataServiceClient) SplitBigSet(ctx context.Context, rootID TContainerKey, brotherRootID TContainerKey, currentSize int64) (r *TSplitBigSetResult_, err error) {
  var _args32 TBSGenericDataServiceSplitBigSetArgs
  _args32.RootID = rootID
  _args32.BrotherRootID = brotherRootID
  _args32.CurrentSize = currentSize
  var _result33 TBSGenericDataServiceSplitBigSetResult
  if err = p.Client_().Call(ctx, "splitBigSet", &_args32, &_result33); err != nil {
    return
  }
  return _result33.GetSuccess(), nil
}

// Parameters:
//  - RootID
//  - StartKey
//  - EndKey
func (p *TBSGenericDataServiceClient) BsgRangeQuery(ctx context.Context, rootID TContainerKey, startKey TItemKey, endKey TItemKey) (r *TItemSetResult_, err error) {
  var _args34 TBSGenericDataServiceBsgRangeQueryArgs
  _args34.RootID = rootID
  _args34.StartKey = startKey
  _args34.EndKey = endKey
  var _result35 TBSGenericDataServiceBsgRangeQueryResult
  if err = p.Client_().Call(ctx, "bsgRangeQuery", &_args34, &_result35); err != nil {
    return
  }
  return _result35.GetSuccess(), nil
}

// Parameters:
//  - RootID
//  - SetData
func (p *TBSGenericDataServiceClient) BsgBulkLoad(ctx context.Context, rootID TContainerKey, setData *TItemSet) (r bool, err error) {
  var _args36 TBSGenericDataServiceBsgBulkLoadArgs
  _args36.RootID = rootID
  _args36.SetData = setData
  var _result37 TBSGenericDataServiceBsgBulkLoadResult
  if err = p.Client_().Call(ctx, "bsgBulkLoad", &_args36, &_result37); err != nil {
    return
  }
  return _result37.GetSuccess(), nil
}

// Parameters:
//  - RootID
//  - SetData
//  - GetAddedItems
//  - GetReplacedItems
func (p *TBSGenericDataServiceClient) BsgMultiPut(ctx context.Context, rootID TContainerKey, setData *TItemSet, getAddedItems bool, getReplacedItems bool) (r *TMultiPutItemResult_, err error) {
  var _args38 TBSGenericDataServiceBsgMultiPutArgs
  _args38.RootID = rootID
  _args38.SetData = setData
  _args38.GetAddedItems = getAddedItems
  _args38.GetReplacedItems = getReplacedItems
  var _result39 TBSGenericDataServiceBsgMultiPutResult
  if err = p.Client_().Call(ctx, "bsgMultiPut", &_args38, &_result39); err != nil {
    return
  }
  return _result39.GetSuccess(), nil
}

// Parameters:
//  - MetaID
func (p *TBSGenericDataServiceClient) GetSetGenData(ctx context.Context, metaID TMetaKey) (r *TBigSetGenericData, err error) {
  var _args40 TBSGenericDataServiceGetSetGenDataArgs
  _args40.MetaID = metaID
  var _result41 TBSGenericDataServiceGetSetGenDataResult
  if err = p.Client_().Call(ctx, "getSetGenData", &_args40, &_result41); err != nil {
    return
  }
  return _result41.GetSuccess(), nil
}

// Parameters:
//  - MetaID
//  - Metadata
func (p *TBSGenericDataServiceClient) PutSetGenData(ctx context.Context, metaID TMetaKey, metadata *TBigSetGenericData) (err error) {
  var _args42 TBSGenericDataServicePutSetGenDataArgs
  _args42.MetaID = metaID
  _args42.Metadata = metadata
  var _result43 TBSGenericDataServicePutSetGenDataResult
  if err = p.Client_().Call(ctx, "putSetGenData", &_args42, &_result43); err != nil {
    return
  }
  return nil
}

// Parameters:
//  - RootID
func (p *TBSGenericDataServiceClient) GetTotalCount(ctx context.Context, rootID TContainerKey) (r int64, err error) {
  var _args44 TBSGenericDataServiceGetTotalCountArgs
  _args44.RootID = rootID
  var _result45 TBSGenericDataServiceGetTotalCountResult
  if err = p.Client_().Call(ctx, "getTotalCount", &_args44, &_result45); err != nil {
    return
  }
  return _result45.GetSuccess(), nil
}

// Parameters:
//  - RootID
func (p *TBSGenericDataServiceClient) RemoveAll(ctx context.Context, rootID TContainerKey) (r int64, err error) {
  var _args46 TBSGenericDataServiceRemoveAllArgs
  _args46.RootID = rootID
  var _result47 TBSGenericDataServiceRemoveAllResult
  if err = p.Client_().Call(ctx, "removeAll", &_args46, &_result47); err != nil {
    return
  }
  return _result47.GetSuccess(), nil
}

type TBSGenericDataServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler TBSGenericDataService
}

func (p *TBSGenericDataServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *TBSGenericDataServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *TBSGenericDataServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewTBSGenericDataServiceProcessor(handler TBSGenericDataService) *TBSGenericDataServiceProcessor {

  self48 := &TBSGenericDataServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self48.processorMap["bsgPutItem"] = &tBSGenericDataServiceProcessorBsgPutItem{handler:handler}
  self48.processorMap["bsgRemoveItem"] = &tBSGenericDataServiceProcessorBsgRemoveItem{handler:handler}
  self48.processorMap["bsgExisted"] = &tBSGenericDataServiceProcessorBsgExisted{handler:handler}
  self48.processorMap["bsgGetItem"] = &tBSGenericDataServiceProcessorBsgGetItem{handler:handler}
  self48.processorMap["bsgGetSlice"] = &tBSGenericDataServiceProcessorBsgGetSlice{handler:handler}
  self48.processorMap["bsgGetSliceFromItem"] = &tBSGenericDataServiceProcessorBsgGetSliceFromItem{handler:handler}
  self48.processorMap["bsgGetSliceR"] = &tBSGenericDataServiceProcessorBsgGetSliceR{handler:handler}
  self48.processorMap["bsgGetSliceFromItemR"] = &tBSGenericDataServiceProcessorBsgGetSliceFromItemR{handler:handler}
  self48.processorMap["splitBigSet"] = &tBSGenericDataServiceProcessorSplitBigSet{handler:handler}
  self48.processorMap["bsgRangeQuery"] = &tBSGenericDataServiceProcessorBsgRangeQuery{handler:handler}
  self48.processorMap["bsgBulkLoad"] = &tBSGenericDataServiceProcessorBsgBulkLoad{handler:handler}
  self48.processorMap["bsgMultiPut"] = &tBSGenericDataServiceProcessorBsgMultiPut{handler:handler}
  self48.processorMap["getSetGenData"] = &tBSGenericDataServiceProcessorGetSetGenData{handler:handler}
  self48.processorMap["putSetGenData"] = &tBSGenericDataServiceProcessorPutSetGenData{handler:handler}
  self48.processorMap["getTotalCount"] = &tBSGenericDataServiceProcessorGetTotalCount{handler:handler}
  self48.processorMap["removeAll"] = &tBSGenericDataServiceProcessorRemoveAll{handler:handler}
return self48
}

func (p *TBSGenericDataServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x49 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x49.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush(ctx)
  return false, x49

}

type tBSGenericDataServiceProcessorBsgPutItem struct {
  handler TBSGenericDataService
}

func (p *tBSGenericDataServiceProcessorBsgPutItem) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TBSGenericDataServiceBsgPutItemArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("bsgPutItem", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TBSGenericDataServiceBsgPutItemResult{}
var retval *TPutItemResult_
  var err2 error
  if retval, err2 = p.handler.BsgPutItem(ctx, args.RootID, args.Item); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing bsgPutItem: " + err2.Error())
    oprot.WriteMessageBegin("bsgPutItem", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("bsgPutItem", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tBSGenericDataServiceProcessorBsgRemoveItem struct {
  handler TBSGenericDataService
}

func (p *tBSGenericDataServiceProcessorBsgRemoveItem) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TBSGenericDataServiceBsgRemoveItemArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("bsgRemoveItem", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TBSGenericDataServiceBsgRemoveItemResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.BsgRemoveItem(ctx, args.Key, args.ItemKey); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing bsgRemoveItem: " + err2.Error())
    oprot.WriteMessageBegin("bsgRemoveItem", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("bsgRemoveItem", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tBSGenericDataServiceProcessorBsgExisted struct {
  handler TBSGenericDataService
}

func (p *tBSGenericDataServiceProcessorBsgExisted) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TBSGenericDataServiceBsgExistedArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("bsgExisted", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TBSGenericDataServiceBsgExistedResult{}
var retval *TExistedResult_
  var err2 error
  if retval, err2 = p.handler.BsgExisted(ctx, args.RootID, args.ItemKey); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing bsgExisted: " + err2.Error())
    oprot.WriteMessageBegin("bsgExisted", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("bsgExisted", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tBSGenericDataServiceProcessorBsgGetItem struct {
  handler TBSGenericDataService
}

func (p *tBSGenericDataServiceProcessorBsgGetItem) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TBSGenericDataServiceBsgGetItemArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("bsgGetItem", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TBSGenericDataServiceBsgGetItemResult{}
var retval *TItemResult_
  var err2 error
  if retval, err2 = p.handler.BsgGetItem(ctx, args.RootID, args.ItemKey); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing bsgGetItem: " + err2.Error())
    oprot.WriteMessageBegin("bsgGetItem", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("bsgGetItem", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tBSGenericDataServiceProcessorBsgGetSlice struct {
  handler TBSGenericDataService
}

func (p *tBSGenericDataServiceProcessorBsgGetSlice) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TBSGenericDataServiceBsgGetSliceArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("bsgGetSlice", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TBSGenericDataServiceBsgGetSliceResult{}
var retval *TItemSetResult_
  var err2 error
  if retval, err2 = p.handler.BsgGetSlice(ctx, args.RootID, args.FromIdx, args.Count); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing bsgGetSlice: " + err2.Error())
    oprot.WriteMessageBegin("bsgGetSlice", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("bsgGetSlice", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tBSGenericDataServiceProcessorBsgGetSliceFromItem struct {
  handler TBSGenericDataService
}

func (p *tBSGenericDataServiceProcessorBsgGetSliceFromItem) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TBSGenericDataServiceBsgGetSliceFromItemArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("bsgGetSliceFromItem", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TBSGenericDataServiceBsgGetSliceFromItemResult{}
var retval *TItemSetResult_
  var err2 error
  if retval, err2 = p.handler.BsgGetSliceFromItem(ctx, args.RootID, args.FromKey, args.Count); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing bsgGetSliceFromItem: " + err2.Error())
    oprot.WriteMessageBegin("bsgGetSliceFromItem", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("bsgGetSliceFromItem", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tBSGenericDataServiceProcessorBsgGetSliceR struct {
  handler TBSGenericDataService
}

func (p *tBSGenericDataServiceProcessorBsgGetSliceR) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TBSGenericDataServiceBsgGetSliceRArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("bsgGetSliceR", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TBSGenericDataServiceBsgGetSliceRResult{}
var retval *TItemSetResult_
  var err2 error
  if retval, err2 = p.handler.BsgGetSliceR(ctx, args.RootID, args.FromIdx, args.Count); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing bsgGetSliceR: " + err2.Error())
    oprot.WriteMessageBegin("bsgGetSliceR", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("bsgGetSliceR", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tBSGenericDataServiceProcessorBsgGetSliceFromItemR struct {
  handler TBSGenericDataService
}

func (p *tBSGenericDataServiceProcessorBsgGetSliceFromItemR) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TBSGenericDataServiceBsgGetSliceFromItemRArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("bsgGetSliceFromItemR", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TBSGenericDataServiceBsgGetSliceFromItemRResult{}
var retval *TItemSetResult_
  var err2 error
  if retval, err2 = p.handler.BsgGetSliceFromItemR(ctx, args.RootID, args.FromKey, args.Count); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing bsgGetSliceFromItemR: " + err2.Error())
    oprot.WriteMessageBegin("bsgGetSliceFromItemR", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("bsgGetSliceFromItemR", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tBSGenericDataServiceProcessorSplitBigSet struct {
  handler TBSGenericDataService
}

func (p *tBSGenericDataServiceProcessorSplitBigSet) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TBSGenericDataServiceSplitBigSetArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("splitBigSet", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TBSGenericDataServiceSplitBigSetResult{}
var retval *TSplitBigSetResult_
  var err2 error
  if retval, err2 = p.handler.SplitBigSet(ctx, args.RootID, args.BrotherRootID, args.CurrentSize); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing splitBigSet: " + err2.Error())
    oprot.WriteMessageBegin("splitBigSet", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("splitBigSet", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tBSGenericDataServiceProcessorBsgRangeQuery struct {
  handler TBSGenericDataService
}

func (p *tBSGenericDataServiceProcessorBsgRangeQuery) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TBSGenericDataServiceBsgRangeQueryArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("bsgRangeQuery", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TBSGenericDataServiceBsgRangeQueryResult{}
var retval *TItemSetResult_
  var err2 error
  if retval, err2 = p.handler.BsgRangeQuery(ctx, args.RootID, args.StartKey, args.EndKey); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing bsgRangeQuery: " + err2.Error())
    oprot.WriteMessageBegin("bsgRangeQuery", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("bsgRangeQuery", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tBSGenericDataServiceProcessorBsgBulkLoad struct {
  handler TBSGenericDataService
}

func (p *tBSGenericDataServiceProcessorBsgBulkLoad) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TBSGenericDataServiceBsgBulkLoadArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("bsgBulkLoad", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TBSGenericDataServiceBsgBulkLoadResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.BsgBulkLoad(ctx, args.RootID, args.SetData); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing bsgBulkLoad: " + err2.Error())
    oprot.WriteMessageBegin("bsgBulkLoad", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("bsgBulkLoad", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tBSGenericDataServiceProcessorBsgMultiPut struct {
  handler TBSGenericDataService
}

func (p *tBSGenericDataServiceProcessorBsgMultiPut) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TBSGenericDataServiceBsgMultiPutArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("bsgMultiPut", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TBSGenericDataServiceBsgMultiPutResult{}
var retval *TMultiPutItemResult_
  var err2 error
  if retval, err2 = p.handler.BsgMultiPut(ctx, args.RootID, args.SetData, args.GetAddedItems, args.GetReplacedItems); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing bsgMultiPut: " + err2.Error())
    oprot.WriteMessageBegin("bsgMultiPut", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("bsgMultiPut", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tBSGenericDataServiceProcessorGetSetGenData struct {
  handler TBSGenericDataService
}

func (p *tBSGenericDataServiceProcessorGetSetGenData) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TBSGenericDataServiceGetSetGenDataArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getSetGenData", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TBSGenericDataServiceGetSetGenDataResult{}
var retval *TBigSetGenericData
  var err2 error
  if retval, err2 = p.handler.GetSetGenData(ctx, args.MetaID); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getSetGenData: " + err2.Error())
    oprot.WriteMessageBegin("getSetGenData", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getSetGenData", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tBSGenericDataServiceProcessorPutSetGenData struct {
  handler TBSGenericDataService
}

func (p *tBSGenericDataServiceProcessorPutSetGenData) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TBSGenericDataServicePutSetGenDataArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("putSetGenData", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TBSGenericDataServicePutSetGenDataResult{}
  var err2 error
  if err2 = p.handler.PutSetGenData(ctx, args.MetaID, args.Metadata); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing putSetGenData: " + err2.Error())
    oprot.WriteMessageBegin("putSetGenData", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  if err2 = oprot.WriteMessageBegin("putSetGenData", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tBSGenericDataServiceProcessorGetTotalCount struct {
  handler TBSGenericDataService
}

func (p *tBSGenericDataServiceProcessorGetTotalCount) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TBSGenericDataServiceGetTotalCountArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getTotalCount", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TBSGenericDataServiceGetTotalCountResult{}
var retval int64
  var err2 error
  if retval, err2 = p.handler.GetTotalCount(ctx, args.RootID); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getTotalCount: " + err2.Error())
    oprot.WriteMessageBegin("getTotalCount", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("getTotalCount", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tBSGenericDataServiceProcessorRemoveAll struct {
  handler TBSGenericDataService
}

func (p *tBSGenericDataServiceProcessorRemoveAll) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TBSGenericDataServiceRemoveAllArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("removeAll", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TBSGenericDataServiceRemoveAllResult{}
var retval int64
  var err2 error
  if retval, err2 = p.handler.RemoveAll(ctx, args.RootID); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing removeAll: " + err2.Error())
    oprot.WriteMessageBegin("removeAll", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("removeAll", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - RootID
//  - Item
type TBSGenericDataServiceBsgPutItemArgs struct {
  RootID TContainerKey `thrift:"rootID,1" db:"rootID" json:"rootID"`
  Item *TItem `thrift:"item,2" db:"item" json:"item"`
}

func NewTBSGenericDataServiceBsgPutItemArgs() *TBSGenericDataServiceBsgPutItemArgs {
  return &TBSGenericDataServiceBsgPutItemArgs{}
}


func (p *TBSGenericDataServiceBsgPutItemArgs) GetRootID() TContainerKey {
  return p.RootID
}
var TBSGenericDataServiceBsgPutItemArgs_Item_DEFAULT *TItem
func (p *TBSGenericDataServiceBsgPutItemArgs) GetItem() *TItem {
  if !p.IsSetItem() {
    return TBSGenericDataServiceBsgPutItemArgs_Item_DEFAULT
  }
return p.Item
}
func (p *TBSGenericDataServiceBsgPutItemArgs) IsSetItem() bool {
  return p.Item != nil
}

func (p *TBSGenericDataServiceBsgPutItemArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TBSGenericDataServiceBsgPutItemArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TContainerKey(v)
  p.RootID = temp
}
  return nil
}

func (p *TBSGenericDataServiceBsgPutItemArgs)  ReadField2(iprot thrift.TProtocol) error {
  p.Item = &TItem{}
  if err := p.Item.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Item), err)
  }
  return nil
}

func (p *TBSGenericDataServiceBsgPutItemArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("bsgPutItem_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TBSGenericDataServiceBsgPutItemArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("rootID", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rootID: ", p), err) }
  if err := oprot.WriteI64(int64(p.RootID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.rootID (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rootID: ", p), err) }
  return err
}

func (p *TBSGenericDataServiceBsgPutItemArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("item", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:item: ", p), err) }
  if err := p.Item.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Item), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:item: ", p), err) }
  return err
}

func (p *TBSGenericDataServiceBsgPutItemArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TBSGenericDataServiceBsgPutItemArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TBSGenericDataServiceBsgPutItemResult struct {
  Success *TPutItemResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTBSGenericDataServiceBsgPutItemResult() *TBSGenericDataServiceBsgPutItemResult {
  return &TBSGenericDataServiceBsgPutItemResult{}
}

var TBSGenericDataServiceBsgPutItemResult_Success_DEFAULT *TPutItemResult_
func (p *TBSGenericDataServiceBsgPutItemResult) GetSuccess() *TPutItemResult_ {
  if !p.IsSetSuccess() {
    return TBSGenericDataServiceBsgPutItemResult_Success_DEFAULT
  }
return p.Success
}
func (p *TBSGenericDataServiceBsgPutItemResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TBSGenericDataServiceBsgPutItemResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TBSGenericDataServiceBsgPutItemResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TPutItemResult_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TBSGenericDataServiceBsgPutItemResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("bsgPutItem_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TBSGenericDataServiceBsgPutItemResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TBSGenericDataServiceBsgPutItemResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TBSGenericDataServiceBsgPutItemResult(%+v)", *p)
}

// Attributes:
//  - Key
//  - ItemKey
type TBSGenericDataServiceBsgRemoveItemArgs struct {
  Key TMetaKey `thrift:"key,1" db:"key" json:"key"`
  ItemKey TItemKey `thrift:"itemKey,2" db:"itemKey" json:"itemKey"`
}

func NewTBSGenericDataServiceBsgRemoveItemArgs() *TBSGenericDataServiceBsgRemoveItemArgs {
  return &TBSGenericDataServiceBsgRemoveItemArgs{}
}


func (p *TBSGenericDataServiceBsgRemoveItemArgs) GetKey() TMetaKey {
  return p.Key
}

func (p *TBSGenericDataServiceBsgRemoveItemArgs) GetItemKey() TItemKey {
  return p.ItemKey
}
func (p *TBSGenericDataServiceBsgRemoveItemArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TBSGenericDataServiceBsgRemoveItemArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TMetaKey(v)
  p.Key = temp
}
  return nil
}

func (p *TBSGenericDataServiceBsgRemoveItemArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := TItemKey(v)
  p.ItemKey = temp
}
  return nil
}

func (p *TBSGenericDataServiceBsgRemoveItemArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("bsgRemoveItem_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TBSGenericDataServiceBsgRemoveItemArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("key", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:key: ", p), err) }
  if err := oprot.WriteI64(int64(p.Key)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.key (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:key: ", p), err) }
  return err
}

func (p *TBSGenericDataServiceBsgRemoveItemArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("itemKey", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:itemKey: ", p), err) }
  if err := oprot.WriteBinary(p.ItemKey); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.itemKey (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:itemKey: ", p), err) }
  return err
}

func (p *TBSGenericDataServiceBsgRemoveItemArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TBSGenericDataServiceBsgRemoveItemArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TBSGenericDataServiceBsgRemoveItemResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTBSGenericDataServiceBsgRemoveItemResult() *TBSGenericDataServiceBsgRemoveItemResult {
  return &TBSGenericDataServiceBsgRemoveItemResult{}
}

var TBSGenericDataServiceBsgRemoveItemResult_Success_DEFAULT bool
func (p *TBSGenericDataServiceBsgRemoveItemResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return TBSGenericDataServiceBsgRemoveItemResult_Success_DEFAULT
  }
return *p.Success
}
func (p *TBSGenericDataServiceBsgRemoveItemResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TBSGenericDataServiceBsgRemoveItemResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TBSGenericDataServiceBsgRemoveItemResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *TBSGenericDataServiceBsgRemoveItemResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("bsgRemoveItem_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TBSGenericDataServiceBsgRemoveItemResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TBSGenericDataServiceBsgRemoveItemResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TBSGenericDataServiceBsgRemoveItemResult(%+v)", *p)
}

// Attributes:
//  - RootID
//  - ItemKey
type TBSGenericDataServiceBsgExistedArgs struct {
  RootID TContainerKey `thrift:"rootID,1" db:"rootID" json:"rootID"`
  ItemKey TItemKey `thrift:"itemKey,2" db:"itemKey" json:"itemKey"`
}

func NewTBSGenericDataServiceBsgExistedArgs() *TBSGenericDataServiceBsgExistedArgs {
  return &TBSGenericDataServiceBsgExistedArgs{}
}


func (p *TBSGenericDataServiceBsgExistedArgs) GetRootID() TContainerKey {
  return p.RootID
}

func (p *TBSGenericDataServiceBsgExistedArgs) GetItemKey() TItemKey {
  return p.ItemKey
}
func (p *TBSGenericDataServiceBsgExistedArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TBSGenericDataServiceBsgExistedArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TContainerKey(v)
  p.RootID = temp
}
  return nil
}

func (p *TBSGenericDataServiceBsgExistedArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := TItemKey(v)
  p.ItemKey = temp
}
  return nil
}

func (p *TBSGenericDataServiceBsgExistedArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("bsgExisted_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TBSGenericDataServiceBsgExistedArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("rootID", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rootID: ", p), err) }
  if err := oprot.WriteI64(int64(p.RootID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.rootID (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rootID: ", p), err) }
  return err
}

func (p *TBSGenericDataServiceBsgExistedArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("itemKey", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:itemKey: ", p), err) }
  if err := oprot.WriteBinary(p.ItemKey); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.itemKey (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:itemKey: ", p), err) }
  return err
}

func (p *TBSGenericDataServiceBsgExistedArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TBSGenericDataServiceBsgExistedArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TBSGenericDataServiceBsgExistedResult struct {
  Success *TExistedResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTBSGenericDataServiceBsgExistedResult() *TBSGenericDataServiceBsgExistedResult {
  return &TBSGenericDataServiceBsgExistedResult{}
}

var TBSGenericDataServiceBsgExistedResult_Success_DEFAULT *TExistedResult_
func (p *TBSGenericDataServiceBsgExistedResult) GetSuccess() *TExistedResult_ {
  if !p.IsSetSuccess() {
    return TBSGenericDataServiceBsgExistedResult_Success_DEFAULT
  }
return p.Success
}
func (p *TBSGenericDataServiceBsgExistedResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TBSGenericDataServiceBsgExistedResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TBSGenericDataServiceBsgExistedResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TExistedResult_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TBSGenericDataServiceBsgExistedResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("bsgExisted_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TBSGenericDataServiceBsgExistedResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TBSGenericDataServiceBsgExistedResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TBSGenericDataServiceBsgExistedResult(%+v)", *p)
}

// Attributes:
//  - RootID
//  - ItemKey
type TBSGenericDataServiceBsgGetItemArgs struct {
  RootID TContainerKey `thrift:"rootID,1" db:"rootID" json:"rootID"`
  ItemKey TItemKey `thrift:"itemKey,2" db:"itemKey" json:"itemKey"`
}

func NewTBSGenericDataServiceBsgGetItemArgs() *TBSGenericDataServiceBsgGetItemArgs {
  return &TBSGenericDataServiceBsgGetItemArgs{}
}


func (p *TBSGenericDataServiceBsgGetItemArgs) GetRootID() TContainerKey {
  return p.RootID
}

func (p *TBSGenericDataServiceBsgGetItemArgs) GetItemKey() TItemKey {
  return p.ItemKey
}
func (p *TBSGenericDataServiceBsgGetItemArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TBSGenericDataServiceBsgGetItemArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TContainerKey(v)
  p.RootID = temp
}
  return nil
}

func (p *TBSGenericDataServiceBsgGetItemArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := TItemKey(v)
  p.ItemKey = temp
}
  return nil
}

func (p *TBSGenericDataServiceBsgGetItemArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("bsgGetItem_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TBSGenericDataServiceBsgGetItemArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("rootID", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rootID: ", p), err) }
  if err := oprot.WriteI64(int64(p.RootID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.rootID (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rootID: ", p), err) }
  return err
}

func (p *TBSGenericDataServiceBsgGetItemArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("itemKey", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:itemKey: ", p), err) }
  if err := oprot.WriteBinary(p.ItemKey); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.itemKey (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:itemKey: ", p), err) }
  return err
}

func (p *TBSGenericDataServiceBsgGetItemArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TBSGenericDataServiceBsgGetItemArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TBSGenericDataServiceBsgGetItemResult struct {
  Success *TItemResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTBSGenericDataServiceBsgGetItemResult() *TBSGenericDataServiceBsgGetItemResult {
  return &TBSGenericDataServiceBsgGetItemResult{}
}

var TBSGenericDataServiceBsgGetItemResult_Success_DEFAULT *TItemResult_
func (p *TBSGenericDataServiceBsgGetItemResult) GetSuccess() *TItemResult_ {
  if !p.IsSetSuccess() {
    return TBSGenericDataServiceBsgGetItemResult_Success_DEFAULT
  }
return p.Success
}
func (p *TBSGenericDataServiceBsgGetItemResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TBSGenericDataServiceBsgGetItemResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TBSGenericDataServiceBsgGetItemResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TItemResult_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TBSGenericDataServiceBsgGetItemResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("bsgGetItem_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TBSGenericDataServiceBsgGetItemResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TBSGenericDataServiceBsgGetItemResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TBSGenericDataServiceBsgGetItemResult(%+v)", *p)
}

// Attributes:
//  - RootID
//  - FromIdx
//  - Count
type TBSGenericDataServiceBsgGetSliceArgs struct {
  RootID TContainerKey `thrift:"rootID,1" db:"rootID" json:"rootID"`
  FromIdx int32 `thrift:"fromIdx,2" db:"fromIdx" json:"fromIdx"`
  Count int32 `thrift:"count,3" db:"count" json:"count"`
}

func NewTBSGenericDataServiceBsgGetSliceArgs() *TBSGenericDataServiceBsgGetSliceArgs {
  return &TBSGenericDataServiceBsgGetSliceArgs{}
}


func (p *TBSGenericDataServiceBsgGetSliceArgs) GetRootID() TContainerKey {
  return p.RootID
}

func (p *TBSGenericDataServiceBsgGetSliceArgs) GetFromIdx() int32 {
  return p.FromIdx
}

func (p *TBSGenericDataServiceBsgGetSliceArgs) GetCount() int32 {
  return p.Count
}
func (p *TBSGenericDataServiceBsgGetSliceArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TBSGenericDataServiceBsgGetSliceArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TContainerKey(v)
  p.RootID = temp
}
  return nil
}

func (p *TBSGenericDataServiceBsgGetSliceArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.FromIdx = v
}
  return nil
}

func (p *TBSGenericDataServiceBsgGetSliceArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Count = v
}
  return nil
}

func (p *TBSGenericDataServiceBsgGetSliceArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("bsgGetSlice_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TBSGenericDataServiceBsgGetSliceArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("rootID", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rootID: ", p), err) }
  if err := oprot.WriteI64(int64(p.RootID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.rootID (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rootID: ", p), err) }
  return err
}

func (p *TBSGenericDataServiceBsgGetSliceArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("fromIdx", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:fromIdx: ", p), err) }
  if err := oprot.WriteI32(int32(p.FromIdx)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.fromIdx (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:fromIdx: ", p), err) }
  return err
}

func (p *TBSGenericDataServiceBsgGetSliceArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("count", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:count: ", p), err) }
  if err := oprot.WriteI32(int32(p.Count)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.count (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:count: ", p), err) }
  return err
}

func (p *TBSGenericDataServiceBsgGetSliceArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TBSGenericDataServiceBsgGetSliceArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TBSGenericDataServiceBsgGetSliceResult struct {
  Success *TItemSetResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTBSGenericDataServiceBsgGetSliceResult() *TBSGenericDataServiceBsgGetSliceResult {
  return &TBSGenericDataServiceBsgGetSliceResult{}
}

var TBSGenericDataServiceBsgGetSliceResult_Success_DEFAULT *TItemSetResult_
func (p *TBSGenericDataServiceBsgGetSliceResult) GetSuccess() *TItemSetResult_ {
  if !p.IsSetSuccess() {
    return TBSGenericDataServiceBsgGetSliceResult_Success_DEFAULT
  }
return p.Success
}
func (p *TBSGenericDataServiceBsgGetSliceResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TBSGenericDataServiceBsgGetSliceResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TBSGenericDataServiceBsgGetSliceResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TItemSetResult_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TBSGenericDataServiceBsgGetSliceResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("bsgGetSlice_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TBSGenericDataServiceBsgGetSliceResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TBSGenericDataServiceBsgGetSliceResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TBSGenericDataServiceBsgGetSliceResult(%+v)", *p)
}

// Attributes:
//  - RootID
//  - FromKey
//  - Count
type TBSGenericDataServiceBsgGetSliceFromItemArgs struct {
  RootID TContainerKey `thrift:"rootID,1" db:"rootID" json:"rootID"`
  FromKey TItemKey `thrift:"fromKey,2" db:"fromKey" json:"fromKey"`
  Count int32 `thrift:"count,3" db:"count" json:"count"`
}

func NewTBSGenericDataServiceBsgGetSliceFromItemArgs() *TBSGenericDataServiceBsgGetSliceFromItemArgs {
  return &TBSGenericDataServiceBsgGetSliceFromItemArgs{}
}


func (p *TBSGenericDataServiceBsgGetSliceFromItemArgs) GetRootID() TContainerKey {
  return p.RootID
}

func (p *TBSGenericDataServiceBsgGetSliceFromItemArgs) GetFromKey() TItemKey {
  return p.FromKey
}

func (p *TBSGenericDataServiceBsgGetSliceFromItemArgs) GetCount() int32 {
  return p.Count
}
func (p *TBSGenericDataServiceBsgGetSliceFromItemArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TBSGenericDataServiceBsgGetSliceFromItemArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TContainerKey(v)
  p.RootID = temp
}
  return nil
}

func (p *TBSGenericDataServiceBsgGetSliceFromItemArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := TItemKey(v)
  p.FromKey = temp
}
  return nil
}

func (p *TBSGenericDataServiceBsgGetSliceFromItemArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Count = v
}
  return nil
}

func (p *TBSGenericDataServiceBsgGetSliceFromItemArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("bsgGetSliceFromItem_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TBSGenericDataServiceBsgGetSliceFromItemArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("rootID", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rootID: ", p), err) }
  if err := oprot.WriteI64(int64(p.RootID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.rootID (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rootID: ", p), err) }
  return err
}

func (p *TBSGenericDataServiceBsgGetSliceFromItemArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("fromKey", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:fromKey: ", p), err) }
  if err := oprot.WriteBinary(p.FromKey); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.fromKey (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:fromKey: ", p), err) }
  return err
}

func (p *TBSGenericDataServiceBsgGetSliceFromItemArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("count", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:count: ", p), err) }
  if err := oprot.WriteI32(int32(p.Count)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.count (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:count: ", p), err) }
  return err
}

func (p *TBSGenericDataServiceBsgGetSliceFromItemArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TBSGenericDataServiceBsgGetSliceFromItemArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TBSGenericDataServiceBsgGetSliceFromItemResult struct {
  Success *TItemSetResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTBSGenericDataServiceBsgGetSliceFromItemResult() *TBSGenericDataServiceBsgGetSliceFromItemResult {
  return &TBSGenericDataServiceBsgGetSliceFromItemResult{}
}

var TBSGenericDataServiceBsgGetSliceFromItemResult_Success_DEFAULT *TItemSetResult_
func (p *TBSGenericDataServiceBsgGetSliceFromItemResult) GetSuccess() *TItemSetResult_ {
  if !p.IsSetSuccess() {
    return TBSGenericDataServiceBsgGetSliceFromItemResult_Success_DEFAULT
  }
return p.Success
}
func (p *TBSGenericDataServiceBsgGetSliceFromItemResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TBSGenericDataServiceBsgGetSliceFromItemResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TBSGenericDataServiceBsgGetSliceFromItemResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TItemSetResult_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TBSGenericDataServiceBsgGetSliceFromItemResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("bsgGetSliceFromItem_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TBSGenericDataServiceBsgGetSliceFromItemResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TBSGenericDataServiceBsgGetSliceFromItemResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TBSGenericDataServiceBsgGetSliceFromItemResult(%+v)", *p)
}

// Attributes:
//  - RootID
//  - FromIdx
//  - Count
type TBSGenericDataServiceBsgGetSliceRArgs struct {
  RootID TContainerKey `thrift:"rootID,1" db:"rootID" json:"rootID"`
  FromIdx int32 `thrift:"fromIdx,2" db:"fromIdx" json:"fromIdx"`
  Count int32 `thrift:"count,3" db:"count" json:"count"`
}

func NewTBSGenericDataServiceBsgGetSliceRArgs() *TBSGenericDataServiceBsgGetSliceRArgs {
  return &TBSGenericDataServiceBsgGetSliceRArgs{}
}


func (p *TBSGenericDataServiceBsgGetSliceRArgs) GetRootID() TContainerKey {
  return p.RootID
}

func (p *TBSGenericDataServiceBsgGetSliceRArgs) GetFromIdx() int32 {
  return p.FromIdx
}

func (p *TBSGenericDataServiceBsgGetSliceRArgs) GetCount() int32 {
  return p.Count
}
func (p *TBSGenericDataServiceBsgGetSliceRArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TBSGenericDataServiceBsgGetSliceRArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TContainerKey(v)
  p.RootID = temp
}
  return nil
}

func (p *TBSGenericDataServiceBsgGetSliceRArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.FromIdx = v
}
  return nil
}

func (p *TBSGenericDataServiceBsgGetSliceRArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Count = v
}
  return nil
}

func (p *TBSGenericDataServiceBsgGetSliceRArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("bsgGetSliceR_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TBSGenericDataServiceBsgGetSliceRArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("rootID", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rootID: ", p), err) }
  if err := oprot.WriteI64(int64(p.RootID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.rootID (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rootID: ", p), err) }
  return err
}

func (p *TBSGenericDataServiceBsgGetSliceRArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("fromIdx", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:fromIdx: ", p), err) }
  if err := oprot.WriteI32(int32(p.FromIdx)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.fromIdx (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:fromIdx: ", p), err) }
  return err
}

func (p *TBSGenericDataServiceBsgGetSliceRArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("count", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:count: ", p), err) }
  if err := oprot.WriteI32(int32(p.Count)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.count (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:count: ", p), err) }
  return err
}

func (p *TBSGenericDataServiceBsgGetSliceRArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TBSGenericDataServiceBsgGetSliceRArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TBSGenericDataServiceBsgGetSliceRResult struct {
  Success *TItemSetResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTBSGenericDataServiceBsgGetSliceRResult() *TBSGenericDataServiceBsgGetSliceRResult {
  return &TBSGenericDataServiceBsgGetSliceRResult{}
}

var TBSGenericDataServiceBsgGetSliceRResult_Success_DEFAULT *TItemSetResult_
func (p *TBSGenericDataServiceBsgGetSliceRResult) GetSuccess() *TItemSetResult_ {
  if !p.IsSetSuccess() {
    return TBSGenericDataServiceBsgGetSliceRResult_Success_DEFAULT
  }
return p.Success
}
func (p *TBSGenericDataServiceBsgGetSliceRResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TBSGenericDataServiceBsgGetSliceRResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TBSGenericDataServiceBsgGetSliceRResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TItemSetResult_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TBSGenericDataServiceBsgGetSliceRResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("bsgGetSliceR_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TBSGenericDataServiceBsgGetSliceRResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TBSGenericDataServiceBsgGetSliceRResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TBSGenericDataServiceBsgGetSliceRResult(%+v)", *p)
}

// Attributes:
//  - RootID
//  - FromKey
//  - Count
type TBSGenericDataServiceBsgGetSliceFromItemRArgs struct {
  RootID TContainerKey `thrift:"rootID,1" db:"rootID" json:"rootID"`
  FromKey TItemKey `thrift:"fromKey,2" db:"fromKey" json:"fromKey"`
  Count int32 `thrift:"count,3" db:"count" json:"count"`
}

func NewTBSGenericDataServiceBsgGetSliceFromItemRArgs() *TBSGenericDataServiceBsgGetSliceFromItemRArgs {
  return &TBSGenericDataServiceBsgGetSliceFromItemRArgs{}
}


func (p *TBSGenericDataServiceBsgGetSliceFromItemRArgs) GetRootID() TContainerKey {
  return p.RootID
}

func (p *TBSGenericDataServiceBsgGetSliceFromItemRArgs) GetFromKey() TItemKey {
  return p.FromKey
}

func (p *TBSGenericDataServiceBsgGetSliceFromItemRArgs) GetCount() int32 {
  return p.Count
}
func (p *TBSGenericDataServiceBsgGetSliceFromItemRArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TBSGenericDataServiceBsgGetSliceFromItemRArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TContainerKey(v)
  p.RootID = temp
}
  return nil
}

func (p *TBSGenericDataServiceBsgGetSliceFromItemRArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := TItemKey(v)
  p.FromKey = temp
}
  return nil
}

func (p *TBSGenericDataServiceBsgGetSliceFromItemRArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Count = v
}
  return nil
}

func (p *TBSGenericDataServiceBsgGetSliceFromItemRArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("bsgGetSliceFromItemR_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TBSGenericDataServiceBsgGetSliceFromItemRArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("rootID", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rootID: ", p), err) }
  if err := oprot.WriteI64(int64(p.RootID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.rootID (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rootID: ", p), err) }
  return err
}

func (p *TBSGenericDataServiceBsgGetSliceFromItemRArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("fromKey", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:fromKey: ", p), err) }
  if err := oprot.WriteBinary(p.FromKey); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.fromKey (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:fromKey: ", p), err) }
  return err
}

func (p *TBSGenericDataServiceBsgGetSliceFromItemRArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("count", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:count: ", p), err) }
  if err := oprot.WriteI32(int32(p.Count)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.count (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:count: ", p), err) }
  return err
}

func (p *TBSGenericDataServiceBsgGetSliceFromItemRArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TBSGenericDataServiceBsgGetSliceFromItemRArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TBSGenericDataServiceBsgGetSliceFromItemRResult struct {
  Success *TItemSetResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTBSGenericDataServiceBsgGetSliceFromItemRResult() *TBSGenericDataServiceBsgGetSliceFromItemRResult {
  return &TBSGenericDataServiceBsgGetSliceFromItemRResult{}
}

var TBSGenericDataServiceBsgGetSliceFromItemRResult_Success_DEFAULT *TItemSetResult_
func (p *TBSGenericDataServiceBsgGetSliceFromItemRResult) GetSuccess() *TItemSetResult_ {
  if !p.IsSetSuccess() {
    return TBSGenericDataServiceBsgGetSliceFromItemRResult_Success_DEFAULT
  }
return p.Success
}
func (p *TBSGenericDataServiceBsgGetSliceFromItemRResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TBSGenericDataServiceBsgGetSliceFromItemRResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TBSGenericDataServiceBsgGetSliceFromItemRResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TItemSetResult_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TBSGenericDataServiceBsgGetSliceFromItemRResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("bsgGetSliceFromItemR_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TBSGenericDataServiceBsgGetSliceFromItemRResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TBSGenericDataServiceBsgGetSliceFromItemRResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TBSGenericDataServiceBsgGetSliceFromItemRResult(%+v)", *p)
}

// Attributes:
//  - RootID
//  - BrotherRootID
//  - CurrentSize
type TBSGenericDataServiceSplitBigSetArgs struct {
  RootID TContainerKey `thrift:"rootID,1" db:"rootID" json:"rootID"`
  BrotherRootID TContainerKey `thrift:"brotherRootID,2" db:"brotherRootID" json:"brotherRootID"`
  CurrentSize int64 `thrift:"currentSize,3" db:"currentSize" json:"currentSize"`
}

func NewTBSGenericDataServiceSplitBigSetArgs() *TBSGenericDataServiceSplitBigSetArgs {
  return &TBSGenericDataServiceSplitBigSetArgs{}
}


func (p *TBSGenericDataServiceSplitBigSetArgs) GetRootID() TContainerKey {
  return p.RootID
}

func (p *TBSGenericDataServiceSplitBigSetArgs) GetBrotherRootID() TContainerKey {
  return p.BrotherRootID
}

func (p *TBSGenericDataServiceSplitBigSetArgs) GetCurrentSize() int64 {
  return p.CurrentSize
}
func (p *TBSGenericDataServiceSplitBigSetArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TBSGenericDataServiceSplitBigSetArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TContainerKey(v)
  p.RootID = temp
}
  return nil
}

func (p *TBSGenericDataServiceSplitBigSetArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := TContainerKey(v)
  p.BrotherRootID = temp
}
  return nil
}

func (p *TBSGenericDataServiceSplitBigSetArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.CurrentSize = v
}
  return nil
}

func (p *TBSGenericDataServiceSplitBigSetArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("splitBigSet_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TBSGenericDataServiceSplitBigSetArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("rootID", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rootID: ", p), err) }
  if err := oprot.WriteI64(int64(p.RootID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.rootID (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rootID: ", p), err) }
  return err
}

func (p *TBSGenericDataServiceSplitBigSetArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("brotherRootID", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:brotherRootID: ", p), err) }
  if err := oprot.WriteI64(int64(p.BrotherRootID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.brotherRootID (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:brotherRootID: ", p), err) }
  return err
}

func (p *TBSGenericDataServiceSplitBigSetArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("currentSize", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:currentSize: ", p), err) }
  if err := oprot.WriteI64(int64(p.CurrentSize)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.currentSize (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:currentSize: ", p), err) }
  return err
}

func (p *TBSGenericDataServiceSplitBigSetArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TBSGenericDataServiceSplitBigSetArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TBSGenericDataServiceSplitBigSetResult struct {
  Success *TSplitBigSetResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTBSGenericDataServiceSplitBigSetResult() *TBSGenericDataServiceSplitBigSetResult {
  return &TBSGenericDataServiceSplitBigSetResult{}
}

var TBSGenericDataServiceSplitBigSetResult_Success_DEFAULT *TSplitBigSetResult_
func (p *TBSGenericDataServiceSplitBigSetResult) GetSuccess() *TSplitBigSetResult_ {
  if !p.IsSetSuccess() {
    return TBSGenericDataServiceSplitBigSetResult_Success_DEFAULT
  }
return p.Success
}
func (p *TBSGenericDataServiceSplitBigSetResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TBSGenericDataServiceSplitBigSetResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TBSGenericDataServiceSplitBigSetResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TSplitBigSetResult_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TBSGenericDataServiceSplitBigSetResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("splitBigSet_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TBSGenericDataServiceSplitBigSetResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TBSGenericDataServiceSplitBigSetResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TBSGenericDataServiceSplitBigSetResult(%+v)", *p)
}

// Attributes:
//  - RootID
//  - StartKey
//  - EndKey
type TBSGenericDataServiceBsgRangeQueryArgs struct {
  RootID TContainerKey `thrift:"rootID,1" db:"rootID" json:"rootID"`
  StartKey TItemKey `thrift:"startKey,2" db:"startKey" json:"startKey"`
  EndKey TItemKey `thrift:"endKey,3" db:"endKey" json:"endKey"`
}

func NewTBSGenericDataServiceBsgRangeQueryArgs() *TBSGenericDataServiceBsgRangeQueryArgs {
  return &TBSGenericDataServiceBsgRangeQueryArgs{}
}


func (p *TBSGenericDataServiceBsgRangeQueryArgs) GetRootID() TContainerKey {
  return p.RootID
}

func (p *TBSGenericDataServiceBsgRangeQueryArgs) GetStartKey() TItemKey {
  return p.StartKey
}

func (p *TBSGenericDataServiceBsgRangeQueryArgs) GetEndKey() TItemKey {
  return p.EndKey
}
func (p *TBSGenericDataServiceBsgRangeQueryArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TBSGenericDataServiceBsgRangeQueryArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TContainerKey(v)
  p.RootID = temp
}
  return nil
}

func (p *TBSGenericDataServiceBsgRangeQueryArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := TItemKey(v)
  p.StartKey = temp
}
  return nil
}

func (p *TBSGenericDataServiceBsgRangeQueryArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := TItemKey(v)
  p.EndKey = temp
}
  return nil
}

func (p *TBSGenericDataServiceBsgRangeQueryArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("bsgRangeQuery_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TBSGenericDataServiceBsgRangeQueryArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("rootID", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rootID: ", p), err) }
  if err := oprot.WriteI64(int64(p.RootID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.rootID (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rootID: ", p), err) }
  return err
}

func (p *TBSGenericDataServiceBsgRangeQueryArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("startKey", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:startKey: ", p), err) }
  if err := oprot.WriteBinary(p.StartKey); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.startKey (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:startKey: ", p), err) }
  return err
}

func (p *TBSGenericDataServiceBsgRangeQueryArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("endKey", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:endKey: ", p), err) }
  if err := oprot.WriteBinary(p.EndKey); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.endKey (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:endKey: ", p), err) }
  return err
}

func (p *TBSGenericDataServiceBsgRangeQueryArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TBSGenericDataServiceBsgRangeQueryArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TBSGenericDataServiceBsgRangeQueryResult struct {
  Success *TItemSetResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTBSGenericDataServiceBsgRangeQueryResult() *TBSGenericDataServiceBsgRangeQueryResult {
  return &TBSGenericDataServiceBsgRangeQueryResult{}
}

var TBSGenericDataServiceBsgRangeQueryResult_Success_DEFAULT *TItemSetResult_
func (p *TBSGenericDataServiceBsgRangeQueryResult) GetSuccess() *TItemSetResult_ {
  if !p.IsSetSuccess() {
    return TBSGenericDataServiceBsgRangeQueryResult_Success_DEFAULT
  }
return p.Success
}
func (p *TBSGenericDataServiceBsgRangeQueryResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TBSGenericDataServiceBsgRangeQueryResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TBSGenericDataServiceBsgRangeQueryResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TItemSetResult_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TBSGenericDataServiceBsgRangeQueryResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("bsgRangeQuery_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TBSGenericDataServiceBsgRangeQueryResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TBSGenericDataServiceBsgRangeQueryResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TBSGenericDataServiceBsgRangeQueryResult(%+v)", *p)
}

// Attributes:
//  - RootID
//  - SetData
type TBSGenericDataServiceBsgBulkLoadArgs struct {
  RootID TContainerKey `thrift:"rootID,1" db:"rootID" json:"rootID"`
  SetData *TItemSet `thrift:"setData,2" db:"setData" json:"setData"`
}

func NewTBSGenericDataServiceBsgBulkLoadArgs() *TBSGenericDataServiceBsgBulkLoadArgs {
  return &TBSGenericDataServiceBsgBulkLoadArgs{}
}


func (p *TBSGenericDataServiceBsgBulkLoadArgs) GetRootID() TContainerKey {
  return p.RootID
}
var TBSGenericDataServiceBsgBulkLoadArgs_SetData_DEFAULT *TItemSet
func (p *TBSGenericDataServiceBsgBulkLoadArgs) GetSetData() *TItemSet {
  if !p.IsSetSetData() {
    return TBSGenericDataServiceBsgBulkLoadArgs_SetData_DEFAULT
  }
return p.SetData
}
func (p *TBSGenericDataServiceBsgBulkLoadArgs) IsSetSetData() bool {
  return p.SetData != nil
}

func (p *TBSGenericDataServiceBsgBulkLoadArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TBSGenericDataServiceBsgBulkLoadArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TContainerKey(v)
  p.RootID = temp
}
  return nil
}

func (p *TBSGenericDataServiceBsgBulkLoadArgs)  ReadField2(iprot thrift.TProtocol) error {
  p.SetData = &TItemSet{}
  if err := p.SetData.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SetData), err)
  }
  return nil
}

func (p *TBSGenericDataServiceBsgBulkLoadArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("bsgBulkLoad_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TBSGenericDataServiceBsgBulkLoadArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("rootID", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rootID: ", p), err) }
  if err := oprot.WriteI64(int64(p.RootID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.rootID (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rootID: ", p), err) }
  return err
}

func (p *TBSGenericDataServiceBsgBulkLoadArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("setData", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:setData: ", p), err) }
  if err := p.SetData.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SetData), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:setData: ", p), err) }
  return err
}

func (p *TBSGenericDataServiceBsgBulkLoadArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TBSGenericDataServiceBsgBulkLoadArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TBSGenericDataServiceBsgBulkLoadResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTBSGenericDataServiceBsgBulkLoadResult() *TBSGenericDataServiceBsgBulkLoadResult {
  return &TBSGenericDataServiceBsgBulkLoadResult{}
}

var TBSGenericDataServiceBsgBulkLoadResult_Success_DEFAULT bool
func (p *TBSGenericDataServiceBsgBulkLoadResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return TBSGenericDataServiceBsgBulkLoadResult_Success_DEFAULT
  }
return *p.Success
}
func (p *TBSGenericDataServiceBsgBulkLoadResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TBSGenericDataServiceBsgBulkLoadResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TBSGenericDataServiceBsgBulkLoadResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *TBSGenericDataServiceBsgBulkLoadResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("bsgBulkLoad_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TBSGenericDataServiceBsgBulkLoadResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TBSGenericDataServiceBsgBulkLoadResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TBSGenericDataServiceBsgBulkLoadResult(%+v)", *p)
}

// Attributes:
//  - RootID
//  - SetData
//  - GetAddedItems
//  - GetReplacedItems
type TBSGenericDataServiceBsgMultiPutArgs struct {
  RootID TContainerKey `thrift:"rootID,1" db:"rootID" json:"rootID"`
  SetData *TItemSet `thrift:"setData,2" db:"setData" json:"setData"`
  GetAddedItems bool `thrift:"getAddedItems,3" db:"getAddedItems" json:"getAddedItems"`
  GetReplacedItems bool `thrift:"getReplacedItems,4" db:"getReplacedItems" json:"getReplacedItems"`
}

func NewTBSGenericDataServiceBsgMultiPutArgs() *TBSGenericDataServiceBsgMultiPutArgs {
  return &TBSGenericDataServiceBsgMultiPutArgs{}
}


func (p *TBSGenericDataServiceBsgMultiPutArgs) GetRootID() TContainerKey {
  return p.RootID
}
var TBSGenericDataServiceBsgMultiPutArgs_SetData_DEFAULT *TItemSet
func (p *TBSGenericDataServiceBsgMultiPutArgs) GetSetData() *TItemSet {
  if !p.IsSetSetData() {
    return TBSGenericDataServiceBsgMultiPutArgs_SetData_DEFAULT
  }
return p.SetData
}

func (p *TBSGenericDataServiceBsgMultiPutArgs) GetGetAddedItems() bool {
  return p.GetAddedItems
}

func (p *TBSGenericDataServiceBsgMultiPutArgs) GetGetReplacedItems() bool {
  return p.GetReplacedItems
}
func (p *TBSGenericDataServiceBsgMultiPutArgs) IsSetSetData() bool {
  return p.SetData != nil
}

func (p *TBSGenericDataServiceBsgMultiPutArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TBSGenericDataServiceBsgMultiPutArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TContainerKey(v)
  p.RootID = temp
}
  return nil
}

func (p *TBSGenericDataServiceBsgMultiPutArgs)  ReadField2(iprot thrift.TProtocol) error {
  p.SetData = &TItemSet{}
  if err := p.SetData.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SetData), err)
  }
  return nil
}

func (p *TBSGenericDataServiceBsgMultiPutArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.GetAddedItems = v
}
  return nil
}

func (p *TBSGenericDataServiceBsgMultiPutArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.GetReplacedItems = v
}
  return nil
}

func (p *TBSGenericDataServiceBsgMultiPutArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("bsgMultiPut_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TBSGenericDataServiceBsgMultiPutArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("rootID", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rootID: ", p), err) }
  if err := oprot.WriteI64(int64(p.RootID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.rootID (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rootID: ", p), err) }
  return err
}

func (p *TBSGenericDataServiceBsgMultiPutArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("setData", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:setData: ", p), err) }
  if err := p.SetData.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SetData), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:setData: ", p), err) }
  return err
}

func (p *TBSGenericDataServiceBsgMultiPutArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("getAddedItems", thrift.BOOL, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:getAddedItems: ", p), err) }
  if err := oprot.WriteBool(bool(p.GetAddedItems)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.getAddedItems (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:getAddedItems: ", p), err) }
  return err
}

func (p *TBSGenericDataServiceBsgMultiPutArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("getReplacedItems", thrift.BOOL, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:getReplacedItems: ", p), err) }
  if err := oprot.WriteBool(bool(p.GetReplacedItems)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.getReplacedItems (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:getReplacedItems: ", p), err) }
  return err
}

func (p *TBSGenericDataServiceBsgMultiPutArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TBSGenericDataServiceBsgMultiPutArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TBSGenericDataServiceBsgMultiPutResult struct {
  Success *TMultiPutItemResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTBSGenericDataServiceBsgMultiPutResult() *TBSGenericDataServiceBsgMultiPutResult {
  return &TBSGenericDataServiceBsgMultiPutResult{}
}

var TBSGenericDataServiceBsgMultiPutResult_Success_DEFAULT *TMultiPutItemResult_
func (p *TBSGenericDataServiceBsgMultiPutResult) GetSuccess() *TMultiPutItemResult_ {
  if !p.IsSetSuccess() {
    return TBSGenericDataServiceBsgMultiPutResult_Success_DEFAULT
  }
return p.Success
}
func (p *TBSGenericDataServiceBsgMultiPutResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TBSGenericDataServiceBsgMultiPutResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TBSGenericDataServiceBsgMultiPutResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TMultiPutItemResult_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TBSGenericDataServiceBsgMultiPutResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("bsgMultiPut_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TBSGenericDataServiceBsgMultiPutResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TBSGenericDataServiceBsgMultiPutResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TBSGenericDataServiceBsgMultiPutResult(%+v)", *p)
}

// Attributes:
//  - MetaID
type TBSGenericDataServiceGetSetGenDataArgs struct {
  MetaID TMetaKey `thrift:"metaID,1" db:"metaID" json:"metaID"`
}

func NewTBSGenericDataServiceGetSetGenDataArgs() *TBSGenericDataServiceGetSetGenDataArgs {
  return &TBSGenericDataServiceGetSetGenDataArgs{}
}


func (p *TBSGenericDataServiceGetSetGenDataArgs) GetMetaID() TMetaKey {
  return p.MetaID
}
func (p *TBSGenericDataServiceGetSetGenDataArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TBSGenericDataServiceGetSetGenDataArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TMetaKey(v)
  p.MetaID = temp
}
  return nil
}

func (p *TBSGenericDataServiceGetSetGenDataArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getSetGenData_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TBSGenericDataServiceGetSetGenDataArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("metaID", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:metaID: ", p), err) }
  if err := oprot.WriteI64(int64(p.MetaID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.metaID (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:metaID: ", p), err) }
  return err
}

func (p *TBSGenericDataServiceGetSetGenDataArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TBSGenericDataServiceGetSetGenDataArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TBSGenericDataServiceGetSetGenDataResult struct {
  Success *TBigSetGenericData `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTBSGenericDataServiceGetSetGenDataResult() *TBSGenericDataServiceGetSetGenDataResult {
  return &TBSGenericDataServiceGetSetGenDataResult{}
}

var TBSGenericDataServiceGetSetGenDataResult_Success_DEFAULT *TBigSetGenericData
func (p *TBSGenericDataServiceGetSetGenDataResult) GetSuccess() *TBigSetGenericData {
  if !p.IsSetSuccess() {
    return TBSGenericDataServiceGetSetGenDataResult_Success_DEFAULT
  }
return p.Success
}
func (p *TBSGenericDataServiceGetSetGenDataResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TBSGenericDataServiceGetSetGenDataResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TBSGenericDataServiceGetSetGenDataResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TBigSetGenericData{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TBSGenericDataServiceGetSetGenDataResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getSetGenData_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TBSGenericDataServiceGetSetGenDataResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TBSGenericDataServiceGetSetGenDataResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TBSGenericDataServiceGetSetGenDataResult(%+v)", *p)
}

// Attributes:
//  - MetaID
//  - Metadata
type TBSGenericDataServicePutSetGenDataArgs struct {
  MetaID TMetaKey `thrift:"metaID,1" db:"metaID" json:"metaID"`
  Metadata *TBigSetGenericData `thrift:"metadata,2" db:"metadata" json:"metadata"`
}

func NewTBSGenericDataServicePutSetGenDataArgs() *TBSGenericDataServicePutSetGenDataArgs {
  return &TBSGenericDataServicePutSetGenDataArgs{}
}


func (p *TBSGenericDataServicePutSetGenDataArgs) GetMetaID() TMetaKey {
  return p.MetaID
}
var TBSGenericDataServicePutSetGenDataArgs_Metadata_DEFAULT *TBigSetGenericData
func (p *TBSGenericDataServicePutSetGenDataArgs) GetMetadata() *TBigSetGenericData {
  if !p.IsSetMetadata() {
    return TBSGenericDataServicePutSetGenDataArgs_Metadata_DEFAULT
  }
return p.Metadata
}
func (p *TBSGenericDataServicePutSetGenDataArgs) IsSetMetadata() bool {
  return p.Metadata != nil
}

func (p *TBSGenericDataServicePutSetGenDataArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TBSGenericDataServicePutSetGenDataArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TMetaKey(v)
  p.MetaID = temp
}
  return nil
}

func (p *TBSGenericDataServicePutSetGenDataArgs)  ReadField2(iprot thrift.TProtocol) error {
  p.Metadata = &TBigSetGenericData{}
  if err := p.Metadata.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Metadata), err)
  }
  return nil
}

func (p *TBSGenericDataServicePutSetGenDataArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("putSetGenData_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TBSGenericDataServicePutSetGenDataArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("metaID", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:metaID: ", p), err) }
  if err := oprot.WriteI64(int64(p.MetaID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.metaID (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:metaID: ", p), err) }
  return err
}

func (p *TBSGenericDataServicePutSetGenDataArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("metadata", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:metadata: ", p), err) }
  if err := p.Metadata.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Metadata), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:metadata: ", p), err) }
  return err
}

func (p *TBSGenericDataServicePutSetGenDataArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TBSGenericDataServicePutSetGenDataArgs(%+v)", *p)
}

type TBSGenericDataServicePutSetGenDataResult struct {
}

func NewTBSGenericDataServicePutSetGenDataResult() *TBSGenericDataServicePutSetGenDataResult {
  return &TBSGenericDataServicePutSetGenDataResult{}
}

func (p *TBSGenericDataServicePutSetGenDataResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TBSGenericDataServicePutSetGenDataResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("putSetGenData_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TBSGenericDataServicePutSetGenDataResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TBSGenericDataServicePutSetGenDataResult(%+v)", *p)
}

// Attributes:
//  - RootID
type TBSGenericDataServiceGetTotalCountArgs struct {
  RootID TContainerKey `thrift:"rootID,1" db:"rootID" json:"rootID"`
}

func NewTBSGenericDataServiceGetTotalCountArgs() *TBSGenericDataServiceGetTotalCountArgs {
  return &TBSGenericDataServiceGetTotalCountArgs{}
}


func (p *TBSGenericDataServiceGetTotalCountArgs) GetRootID() TContainerKey {
  return p.RootID
}
func (p *TBSGenericDataServiceGetTotalCountArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TBSGenericDataServiceGetTotalCountArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TContainerKey(v)
  p.RootID = temp
}
  return nil
}

func (p *TBSGenericDataServiceGetTotalCountArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getTotalCount_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TBSGenericDataServiceGetTotalCountArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("rootID", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rootID: ", p), err) }
  if err := oprot.WriteI64(int64(p.RootID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.rootID (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rootID: ", p), err) }
  return err
}

func (p *TBSGenericDataServiceGetTotalCountArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TBSGenericDataServiceGetTotalCountArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TBSGenericDataServiceGetTotalCountResult struct {
  Success *int64 `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTBSGenericDataServiceGetTotalCountResult() *TBSGenericDataServiceGetTotalCountResult {
  return &TBSGenericDataServiceGetTotalCountResult{}
}

var TBSGenericDataServiceGetTotalCountResult_Success_DEFAULT int64
func (p *TBSGenericDataServiceGetTotalCountResult) GetSuccess() int64 {
  if !p.IsSetSuccess() {
    return TBSGenericDataServiceGetTotalCountResult_Success_DEFAULT
  }
return *p.Success
}
func (p *TBSGenericDataServiceGetTotalCountResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TBSGenericDataServiceGetTotalCountResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TBSGenericDataServiceGetTotalCountResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *TBSGenericDataServiceGetTotalCountResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getTotalCount_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TBSGenericDataServiceGetTotalCountResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.I64, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI64(int64(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TBSGenericDataServiceGetTotalCountResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TBSGenericDataServiceGetTotalCountResult(%+v)", *p)
}

// Attributes:
//  - RootID
type TBSGenericDataServiceRemoveAllArgs struct {
  RootID TContainerKey `thrift:"rootID,1" db:"rootID" json:"rootID"`
}

func NewTBSGenericDataServiceRemoveAllArgs() *TBSGenericDataServiceRemoveAllArgs {
  return &TBSGenericDataServiceRemoveAllArgs{}
}


func (p *TBSGenericDataServiceRemoveAllArgs) GetRootID() TContainerKey {
  return p.RootID
}
func (p *TBSGenericDataServiceRemoveAllArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TBSGenericDataServiceRemoveAllArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TContainerKey(v)
  p.RootID = temp
}
  return nil
}

func (p *TBSGenericDataServiceRemoveAllArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("removeAll_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TBSGenericDataServiceRemoveAllArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("rootID", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rootID: ", p), err) }
  if err := oprot.WriteI64(int64(p.RootID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.rootID (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rootID: ", p), err) }
  return err
}

func (p *TBSGenericDataServiceRemoveAllArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TBSGenericDataServiceRemoveAllArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TBSGenericDataServiceRemoveAllResult struct {
  Success *int64 `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTBSGenericDataServiceRemoveAllResult() *TBSGenericDataServiceRemoveAllResult {
  return &TBSGenericDataServiceRemoveAllResult{}
}

var TBSGenericDataServiceRemoveAllResult_Success_DEFAULT int64
func (p *TBSGenericDataServiceRemoveAllResult) GetSuccess() int64 {
  if !p.IsSetSuccess() {
    return TBSGenericDataServiceRemoveAllResult_Success_DEFAULT
  }
return *p.Success
}
func (p *TBSGenericDataServiceRemoveAllResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TBSGenericDataServiceRemoveAllResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TBSGenericDataServiceRemoveAllResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *TBSGenericDataServiceRemoveAllResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("removeAll_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TBSGenericDataServiceRemoveAllResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.I64, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI64(int64(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TBSGenericDataServiceRemoveAllResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TBSGenericDataServiceRemoveAllResult(%+v)", *p)
}


type TStringBigSetKVService interface {
  // Parameters:
  //  - BsName
  CreateStringBigSet(ctx context.Context, bsName TStringKey) (r *TBigSetInfoResult_, err error)
  // Parameters:
  //  - BsName
  GetBigSetInfoByName(ctx context.Context, bsName TStringKey) (r *TBigSetInfoResult_, err error)
  // Parameters:
  //  - BsName
  //  - BigsetID
  AssignBigSetName(ctx context.Context, bsName TStringKey, bigsetID TContainerKey) (r *TBigSetInfoResult_, err error)
  // Parameters:
  //  - BsName
  //  - Item
  BsPutItem(ctx context.Context, bsName TStringKey, item *TItem) (r *TPutItemResult_, err error)
  // Parameters:
  //  - BsName
  //  - ItemKey
  BsRemoveItem(ctx context.Context, bsName TStringKey, itemKey TItemKey) (r bool, err error)
  // Parameters:
  //  - BsName
  //  - ItemKey
  BsExisted(ctx context.Context, bsName TStringKey, itemKey TItemKey) (r *TExistedResult_, err error)
  // Parameters:
  //  - BsName
  //  - ItemKey
  BsGetItem(ctx context.Context, bsName TStringKey, itemKey TItemKey) (r *TItemResult_, err error)
  // Parameters:
  //  - BsName
  //  - FromPos
  //  - Count
  BsGetSlice(ctx context.Context, bsName TStringKey, fromPos int32, count int32) (r *TItemSetResult_, err error)
  // Parameters:
  //  - BsName
  //  - FromKey
  //  - Count
  BsGetSliceFromItem(ctx context.Context, bsName TStringKey, fromKey TItemKey, count int32) (r *TItemSetResult_, err error)
  // Parameters:
  //  - BsName
  //  - FromPos
  //  - Count
  BsGetSliceR(ctx context.Context, bsName TStringKey, fromPos int32, count int32) (r *TItemSetResult_, err error)
  // Parameters:
  //  - BsName
  //  - FromKey
  //  - Count
  BsGetSliceFromItemR(ctx context.Context, bsName TStringKey, fromKey TItemKey, count int32) (r *TItemSetResult_, err error)
  // Parameters:
  //  - BsName
  //  - StartKey
  //  - EndKey
  BsRangeQuery(ctx context.Context, bsName TStringKey, startKey TItemKey, endKey TItemKey) (r *TItemSetResult_, err error)
  // Parameters:
  //  - BsName
  //  - SetData
  BsBulkLoad(ctx context.Context, bsName TStringKey, setData *TItemSet) (r bool, err error)
  // Parameters:
  //  - BsName
  //  - SetData
  //  - GetAddedItems
  //  - GetReplacedItems
  BsMultiPut(ctx context.Context, bsName TStringKey, setData *TItemSet, getAddedItems bool, getReplacedItems bool) (r *TMultiPutItemResult_, err error)
  // Parameters:
  //  - BsName
  GetTotalCount(ctx context.Context, bsName TStringKey) (r int64, err error)
  // Parameters:
  //  - BsName
  RemoveAll(ctx context.Context, bsName TStringKey) (r int64, err error)
  TotalStringKeyCount(ctx context.Context) (r int64, err error)
  // Parameters:
  //  - FromIndex
  //  - Count
  GetListKey(ctx context.Context, fromIndex int64, count int32) (r []TStringKey, err error)
  // Parameters:
  //  - KeyFrom
  //  - Count
  GetListKeyFrom(ctx context.Context, keyFrom TStringKey, count int32) (r []TStringKey, err error)
}

type TStringBigSetKVServiceClient struct {
  c thrift.TClient
}

func NewTStringBigSetKVServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *TStringBigSetKVServiceClient {
  return &TStringBigSetKVServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewTStringBigSetKVServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *TStringBigSetKVServiceClient {
  return &TStringBigSetKVServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewTStringBigSetKVServiceClient(c thrift.TClient) *TStringBigSetKVServiceClient {
  return &TStringBigSetKVServiceClient{
    c: c,
  }
}

func (p *TStringBigSetKVServiceClient) Client_() thrift.TClient {
  return p.c
}
// Parameters:
//  - BsName
func (p *TStringBigSetKVServiceClient) CreateStringBigSet(ctx context.Context, bsName TStringKey) (r *TBigSetInfoResult_, err error) {
  var _args107 TStringBigSetKVServiceCreateStringBigSetArgs
  _args107.BsName = bsName
  var _result108 TStringBigSetKVServiceCreateStringBigSetResult
  if err = p.Client_().Call(ctx, "createStringBigSet", &_args107, &_result108); err != nil {
    return
  }
  return _result108.GetSuccess(), nil
}

// Parameters:
//  - BsName
func (p *TStringBigSetKVServiceClient) GetBigSetInfoByName(ctx context.Context, bsName TStringKey) (r *TBigSetInfoResult_, err error) {
  var _args109 TStringBigSetKVServiceGetBigSetInfoByNameArgs
  _args109.BsName = bsName
  var _result110 TStringBigSetKVServiceGetBigSetInfoByNameResult
  if err = p.Client_().Call(ctx, "getBigSetInfoByName", &_args109, &_result110); err != nil {
    return
  }
  return _result110.GetSuccess(), nil
}

// Parameters:
//  - BsName
//  - BigsetID
func (p *TStringBigSetKVServiceClient) AssignBigSetName(ctx context.Context, bsName TStringKey, bigsetID TContainerKey) (r *TBigSetInfoResult_, err error) {
  var _args111 TStringBigSetKVServiceAssignBigSetNameArgs
  _args111.BsName = bsName
  _args111.BigsetID = bigsetID
  var _result112 TStringBigSetKVServiceAssignBigSetNameResult
  if err = p.Client_().Call(ctx, "assignBigSetName", &_args111, &_result112); err != nil {
    return
  }
  return _result112.GetSuccess(), nil
}

// Parameters:
//  - BsName
//  - Item
func (p *TStringBigSetKVServiceClient) BsPutItem(ctx context.Context, bsName TStringKey, item *TItem) (r *TPutItemResult_, err error) {
  var _args113 TStringBigSetKVServiceBsPutItemArgs
  _args113.BsName = bsName
  _args113.Item = item
  var _result114 TStringBigSetKVServiceBsPutItemResult
  if err = p.Client_().Call(ctx, "bsPutItem", &_args113, &_result114); err != nil {
    return
  }
  return _result114.GetSuccess(), nil
}

// Parameters:
//  - BsName
//  - ItemKey
func (p *TStringBigSetKVServiceClient) BsRemoveItem(ctx context.Context, bsName TStringKey, itemKey TItemKey) (r bool, err error) {
  var _args115 TStringBigSetKVServiceBsRemoveItemArgs
  _args115.BsName = bsName
  _args115.ItemKey = itemKey
  var _result116 TStringBigSetKVServiceBsRemoveItemResult
  if err = p.Client_().Call(ctx, "bsRemoveItem", &_args115, &_result116); err != nil {
    return
  }
  return _result116.GetSuccess(), nil
}

// Parameters:
//  - BsName
//  - ItemKey
func (p *TStringBigSetKVServiceClient) BsExisted(ctx context.Context, bsName TStringKey, itemKey TItemKey) (r *TExistedResult_, err error) {
  var _args117 TStringBigSetKVServiceBsExistedArgs
  _args117.BsName = bsName
  _args117.ItemKey = itemKey
  var _result118 TStringBigSetKVServiceBsExistedResult
  if err = p.Client_().Call(ctx, "bsExisted", &_args117, &_result118); err != nil {
    return
  }
  return _result118.GetSuccess(), nil
}

// Parameters:
//  - BsName
//  - ItemKey
func (p *TStringBigSetKVServiceClient) BsGetItem(ctx context.Context, bsName TStringKey, itemKey TItemKey) (r *TItemResult_, err error) {
  var _args119 TStringBigSetKVServiceBsGetItemArgs
  _args119.BsName = bsName
  _args119.ItemKey = itemKey
  var _result120 TStringBigSetKVServiceBsGetItemResult
  if err = p.Client_().Call(ctx, "bsGetItem", &_args119, &_result120); err != nil {
    return
  }
  return _result120.GetSuccess(), nil
}

// Parameters:
//  - BsName
//  - FromPos
//  - Count
func (p *TStringBigSetKVServiceClient) BsGetSlice(ctx context.Context, bsName TStringKey, fromPos int32, count int32) (r *TItemSetResult_, err error) {
  var _args121 TStringBigSetKVServiceBsGetSliceArgs
  _args121.BsName = bsName
  _args121.FromPos = fromPos
  _args121.Count = count
  var _result122 TStringBigSetKVServiceBsGetSliceResult
  if err = p.Client_().Call(ctx, "bsGetSlice", &_args121, &_result122); err != nil {
    return
  }
  return _result122.GetSuccess(), nil
}

// Parameters:
//  - BsName
//  - FromKey
//  - Count
func (p *TStringBigSetKVServiceClient) BsGetSliceFromItem(ctx context.Context, bsName TStringKey, fromKey TItemKey, count int32) (r *TItemSetResult_, err error) {
  var _args123 TStringBigSetKVServiceBsGetSliceFromItemArgs
  _args123.BsName = bsName
  _args123.FromKey = fromKey
  _args123.Count = count
  var _result124 TStringBigSetKVServiceBsGetSliceFromItemResult
  if err = p.Client_().Call(ctx, "bsGetSliceFromItem", &_args123, &_result124); err != nil {
    return
  }
  return _result124.GetSuccess(), nil
}

// Parameters:
//  - BsName
//  - FromPos
//  - Count
func (p *TStringBigSetKVServiceClient) BsGetSliceR(ctx context.Context, bsName TStringKey, fromPos int32, count int32) (r *TItemSetResult_, err error) {
  var _args125 TStringBigSetKVServiceBsGetSliceRArgs
  _args125.BsName = bsName
  _args125.FromPos = fromPos
  _args125.Count = count
  var _result126 TStringBigSetKVServiceBsGetSliceRResult
  if err = p.Client_().Call(ctx, "bsGetSliceR", &_args125, &_result126); err != nil {
    return
  }
  return _result126.GetSuccess(), nil
}

// Parameters:
//  - BsName
//  - FromKey
//  - Count
func (p *TStringBigSetKVServiceClient) BsGetSliceFromItemR(ctx context.Context, bsName TStringKey, fromKey TItemKey, count int32) (r *TItemSetResult_, err error) {
  var _args127 TStringBigSetKVServiceBsGetSliceFromItemRArgs
  _args127.BsName = bsName
  _args127.FromKey = fromKey
  _args127.Count = count
  var _result128 TStringBigSetKVServiceBsGetSliceFromItemRResult
  if err = p.Client_().Call(ctx, "bsGetSliceFromItemR", &_args127, &_result128); err != nil {
    return
  }
  return _result128.GetSuccess(), nil
}

// Parameters:
//  - BsName
//  - StartKey
//  - EndKey
func (p *TStringBigSetKVServiceClient) BsRangeQuery(ctx context.Context, bsName TStringKey, startKey TItemKey, endKey TItemKey) (r *TItemSetResult_, err error) {
  var _args129 TStringBigSetKVServiceBsRangeQueryArgs
  _args129.BsName = bsName
  _args129.StartKey = startKey
  _args129.EndKey = endKey
  var _result130 TStringBigSetKVServiceBsRangeQueryResult
  if err = p.Client_().Call(ctx, "bsRangeQuery", &_args129, &_result130); err != nil {
    return
  }
  return _result130.GetSuccess(), nil
}

// Parameters:
//  - BsName
//  - SetData
func (p *TStringBigSetKVServiceClient) BsBulkLoad(ctx context.Context, bsName TStringKey, setData *TItemSet) (r bool, err error) {
  var _args131 TStringBigSetKVServiceBsBulkLoadArgs
  _args131.BsName = bsName
  _args131.SetData = setData
  var _result132 TStringBigSetKVServiceBsBulkLoadResult
  if err = p.Client_().Call(ctx, "bsBulkLoad", &_args131, &_result132); err != nil {
    return
  }
  return _result132.GetSuccess(), nil
}

// Parameters:
//  - BsName
//  - SetData
//  - GetAddedItems
//  - GetReplacedItems
func (p *TStringBigSetKVServiceClient) BsMultiPut(ctx context.Context, bsName TStringKey, setData *TItemSet, getAddedItems bool, getReplacedItems bool) (r *TMultiPutItemResult_, err error) {
  var _args133 TStringBigSetKVServiceBsMultiPutArgs
  _args133.BsName = bsName
  _args133.SetData = setData
  _args133.GetAddedItems = getAddedItems
  _args133.GetReplacedItems = getReplacedItems
  var _result134 TStringBigSetKVServiceBsMultiPutResult
  if err = p.Client_().Call(ctx, "bsMultiPut", &_args133, &_result134); err != nil {
    return
  }
  return _result134.GetSuccess(), nil
}

// Parameters:
//  - BsName
func (p *TStringBigSetKVServiceClient) GetTotalCount(ctx context.Context, bsName TStringKey) (r int64, err error) {
  var _args135 TStringBigSetKVServiceGetTotalCountArgs
  _args135.BsName = bsName
  var _result136 TStringBigSetKVServiceGetTotalCountResult
  if err = p.Client_().Call(ctx, "getTotalCount", &_args135, &_result136); err != nil {
    return
  }
  return _result136.GetSuccess(), nil
}

// Parameters:
//  - BsName
func (p *TStringBigSetKVServiceClient) RemoveAll(ctx context.Context, bsName TStringKey) (r int64, err error) {
  var _args137 TStringBigSetKVServiceRemoveAllArgs
  _args137.BsName = bsName
  var _result138 TStringBigSetKVServiceRemoveAllResult
  if err = p.Client_().Call(ctx, "removeAll", &_args137, &_result138); err != nil {
    return
  }
  return _result138.GetSuccess(), nil
}

func (p *TStringBigSetKVServiceClient) TotalStringKeyCount(ctx context.Context) (r int64, err error) {
  var _args139 TStringBigSetKVServiceTotalStringKeyCountArgs
  var _result140 TStringBigSetKVServiceTotalStringKeyCountResult
  if err = p.Client_().Call(ctx, "totalStringKeyCount", &_args139, &_result140); err != nil {
    return
  }
  return _result140.GetSuccess(), nil
}

// Parameters:
//  - FromIndex
//  - Count
func (p *TStringBigSetKVServiceClient) GetListKey(ctx context.Context, fromIndex int64, count int32) (r []TStringKey, err error) {
  var _args141 TStringBigSetKVServiceGetListKeyArgs
  _args141.FromIndex = fromIndex
  _args141.Count = count
  var _result142 TStringBigSetKVServiceGetListKeyResult
  if err = p.Client_().Call(ctx, "getListKey", &_args141, &_result142); err != nil {
    return
  }
  return _result142.GetSuccess(), nil
}

// Parameters:
//  - KeyFrom
//  - Count
func (p *TStringBigSetKVServiceClient) GetListKeyFrom(ctx context.Context, keyFrom TStringKey, count int32) (r []TStringKey, err error) {
  var _args143 TStringBigSetKVServiceGetListKeyFromArgs
  _args143.KeyFrom = keyFrom
  _args143.Count = count
  var _result144 TStringBigSetKVServiceGetListKeyFromResult
  if err = p.Client_().Call(ctx, "getListKeyFrom", &_args143, &_result144); err != nil {
    return
  }
  return _result144.GetSuccess(), nil
}

type TStringBigSetKVServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler TStringBigSetKVService
}

func (p *TStringBigSetKVServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *TStringBigSetKVServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *TStringBigSetKVServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewTStringBigSetKVServiceProcessor(handler TStringBigSetKVService) *TStringBigSetKVServiceProcessor {

  self145 := &TStringBigSetKVServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self145.processorMap["createStringBigSet"] = &tStringBigSetKVServiceProcessorCreateStringBigSet{handler:handler}
  self145.processorMap["getBigSetInfoByName"] = &tStringBigSetKVServiceProcessorGetBigSetInfoByName{handler:handler}
  self145.processorMap["assignBigSetName"] = &tStringBigSetKVServiceProcessorAssignBigSetName{handler:handler}
  self145.processorMap["bsPutItem"] = &tStringBigSetKVServiceProcessorBsPutItem{handler:handler}
  self145.processorMap["bsRemoveItem"] = &tStringBigSetKVServiceProcessorBsRemoveItem{handler:handler}
  self145.processorMap["bsExisted"] = &tStringBigSetKVServiceProcessorBsExisted{handler:handler}
  self145.processorMap["bsGetItem"] = &tStringBigSetKVServiceProcessorBsGetItem{handler:handler}
  self145.processorMap["bsGetSlice"] = &tStringBigSetKVServiceProcessorBsGetSlice{handler:handler}
  self145.processorMap["bsGetSliceFromItem"] = &tStringBigSetKVServiceProcessorBsGetSliceFromItem{handler:handler}
  self145.processorMap["bsGetSliceR"] = &tStringBigSetKVServiceProcessorBsGetSliceR{handler:handler}
  self145.processorMap["bsGetSliceFromItemR"] = &tStringBigSetKVServiceProcessorBsGetSliceFromItemR{handler:handler}
  self145.processorMap["bsRangeQuery"] = &tStringBigSetKVServiceProcessorBsRangeQuery{handler:handler}
  self145.processorMap["bsBulkLoad"] = &tStringBigSetKVServiceProcessorBsBulkLoad{handler:handler}
  self145.processorMap["bsMultiPut"] = &tStringBigSetKVServiceProcessorBsMultiPut{handler:handler}
  self145.processorMap["getTotalCount"] = &tStringBigSetKVServiceProcessorGetTotalCount{handler:handler}
  self145.processorMap["removeAll"] = &tStringBigSetKVServiceProcessorRemoveAll{handler:handler}
  self145.processorMap["totalStringKeyCount"] = &tStringBigSetKVServiceProcessorTotalStringKeyCount{handler:handler}
  self145.processorMap["getListKey"] = &tStringBigSetKVServiceProcessorGetListKey{handler:handler}
  self145.processorMap["getListKeyFrom"] = &tStringBigSetKVServiceProcessorGetListKeyFrom{handler:handler}
return self145
}

func (p *TStringBigSetKVServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x146 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x146.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush(ctx)
  return false, x146

}

type tStringBigSetKVServiceProcessorCreateStringBigSet struct {
  handler TStringBigSetKVService
}

func (p *tStringBigSetKVServiceProcessorCreateStringBigSet) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TStringBigSetKVServiceCreateStringBigSetArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("createStringBigSet", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TStringBigSetKVServiceCreateStringBigSetResult{}
var retval *TBigSetInfoResult_
  var err2 error
  if retval, err2 = p.handler.CreateStringBigSet(ctx, args.BsName); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing createStringBigSet: " + err2.Error())
    oprot.WriteMessageBegin("createStringBigSet", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("createStringBigSet", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tStringBigSetKVServiceProcessorGetBigSetInfoByName struct {
  handler TStringBigSetKVService
}

func (p *tStringBigSetKVServiceProcessorGetBigSetInfoByName) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TStringBigSetKVServiceGetBigSetInfoByNameArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getBigSetInfoByName", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TStringBigSetKVServiceGetBigSetInfoByNameResult{}
var retval *TBigSetInfoResult_
  var err2 error
  if retval, err2 = p.handler.GetBigSetInfoByName(ctx, args.BsName); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getBigSetInfoByName: " + err2.Error())
    oprot.WriteMessageBegin("getBigSetInfoByName", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getBigSetInfoByName", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tStringBigSetKVServiceProcessorAssignBigSetName struct {
  handler TStringBigSetKVService
}

func (p *tStringBigSetKVServiceProcessorAssignBigSetName) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TStringBigSetKVServiceAssignBigSetNameArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("assignBigSetName", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TStringBigSetKVServiceAssignBigSetNameResult{}
var retval *TBigSetInfoResult_
  var err2 error
  if retval, err2 = p.handler.AssignBigSetName(ctx, args.BsName, args.BigsetID); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing assignBigSetName: " + err2.Error())
    oprot.WriteMessageBegin("assignBigSetName", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("assignBigSetName", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tStringBigSetKVServiceProcessorBsPutItem struct {
  handler TStringBigSetKVService
}

func (p *tStringBigSetKVServiceProcessorBsPutItem) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TStringBigSetKVServiceBsPutItemArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("bsPutItem", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TStringBigSetKVServiceBsPutItemResult{}
var retval *TPutItemResult_
  var err2 error
  if retval, err2 = p.handler.BsPutItem(ctx, args.BsName, args.Item); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing bsPutItem: " + err2.Error())
    oprot.WriteMessageBegin("bsPutItem", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("bsPutItem", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tStringBigSetKVServiceProcessorBsRemoveItem struct {
  handler TStringBigSetKVService
}

func (p *tStringBigSetKVServiceProcessorBsRemoveItem) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TStringBigSetKVServiceBsRemoveItemArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("bsRemoveItem", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TStringBigSetKVServiceBsRemoveItemResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.BsRemoveItem(ctx, args.BsName, args.ItemKey); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing bsRemoveItem: " + err2.Error())
    oprot.WriteMessageBegin("bsRemoveItem", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("bsRemoveItem", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tStringBigSetKVServiceProcessorBsExisted struct {
  handler TStringBigSetKVService
}

func (p *tStringBigSetKVServiceProcessorBsExisted) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TStringBigSetKVServiceBsExistedArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("bsExisted", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TStringBigSetKVServiceBsExistedResult{}
var retval *TExistedResult_
  var err2 error
  if retval, err2 = p.handler.BsExisted(ctx, args.BsName, args.ItemKey); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing bsExisted: " + err2.Error())
    oprot.WriteMessageBegin("bsExisted", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("bsExisted", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tStringBigSetKVServiceProcessorBsGetItem struct {
  handler TStringBigSetKVService
}

func (p *tStringBigSetKVServiceProcessorBsGetItem) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TStringBigSetKVServiceBsGetItemArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("bsGetItem", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TStringBigSetKVServiceBsGetItemResult{}
var retval *TItemResult_
  var err2 error
  if retval, err2 = p.handler.BsGetItem(ctx, args.BsName, args.ItemKey); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing bsGetItem: " + err2.Error())
    oprot.WriteMessageBegin("bsGetItem", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("bsGetItem", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tStringBigSetKVServiceProcessorBsGetSlice struct {
  handler TStringBigSetKVService
}

func (p *tStringBigSetKVServiceProcessorBsGetSlice) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TStringBigSetKVServiceBsGetSliceArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("bsGetSlice", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TStringBigSetKVServiceBsGetSliceResult{}
var retval *TItemSetResult_
  var err2 error
  if retval, err2 = p.handler.BsGetSlice(ctx, args.BsName, args.FromPos, args.Count); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing bsGetSlice: " + err2.Error())
    oprot.WriteMessageBegin("bsGetSlice", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("bsGetSlice", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tStringBigSetKVServiceProcessorBsGetSliceFromItem struct {
  handler TStringBigSetKVService
}

func (p *tStringBigSetKVServiceProcessorBsGetSliceFromItem) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TStringBigSetKVServiceBsGetSliceFromItemArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("bsGetSliceFromItem", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TStringBigSetKVServiceBsGetSliceFromItemResult{}
var retval *TItemSetResult_
  var err2 error
  if retval, err2 = p.handler.BsGetSliceFromItem(ctx, args.BsName, args.FromKey, args.Count); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing bsGetSliceFromItem: " + err2.Error())
    oprot.WriteMessageBegin("bsGetSliceFromItem", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("bsGetSliceFromItem", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tStringBigSetKVServiceProcessorBsGetSliceR struct {
  handler TStringBigSetKVService
}

func (p *tStringBigSetKVServiceProcessorBsGetSliceR) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TStringBigSetKVServiceBsGetSliceRArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("bsGetSliceR", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TStringBigSetKVServiceBsGetSliceRResult{}
var retval *TItemSetResult_
  var err2 error
  if retval, err2 = p.handler.BsGetSliceR(ctx, args.BsName, args.FromPos, args.Count); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing bsGetSliceR: " + err2.Error())
    oprot.WriteMessageBegin("bsGetSliceR", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("bsGetSliceR", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tStringBigSetKVServiceProcessorBsGetSliceFromItemR struct {
  handler TStringBigSetKVService
}

func (p *tStringBigSetKVServiceProcessorBsGetSliceFromItemR) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TStringBigSetKVServiceBsGetSliceFromItemRArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("bsGetSliceFromItemR", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TStringBigSetKVServiceBsGetSliceFromItemRResult{}
var retval *TItemSetResult_
  var err2 error
  if retval, err2 = p.handler.BsGetSliceFromItemR(ctx, args.BsName, args.FromKey, args.Count); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing bsGetSliceFromItemR: " + err2.Error())
    oprot.WriteMessageBegin("bsGetSliceFromItemR", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("bsGetSliceFromItemR", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tStringBigSetKVServiceProcessorBsRangeQuery struct {
  handler TStringBigSetKVService
}

func (p *tStringBigSetKVServiceProcessorBsRangeQuery) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TStringBigSetKVServiceBsRangeQueryArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("bsRangeQuery", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TStringBigSetKVServiceBsRangeQueryResult{}
var retval *TItemSetResult_
  var err2 error
  if retval, err2 = p.handler.BsRangeQuery(ctx, args.BsName, args.StartKey, args.EndKey); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing bsRangeQuery: " + err2.Error())
    oprot.WriteMessageBegin("bsRangeQuery", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("bsRangeQuery", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tStringBigSetKVServiceProcessorBsBulkLoad struct {
  handler TStringBigSetKVService
}

func (p *tStringBigSetKVServiceProcessorBsBulkLoad) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TStringBigSetKVServiceBsBulkLoadArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("bsBulkLoad", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TStringBigSetKVServiceBsBulkLoadResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.BsBulkLoad(ctx, args.BsName, args.SetData); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing bsBulkLoad: " + err2.Error())
    oprot.WriteMessageBegin("bsBulkLoad", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("bsBulkLoad", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tStringBigSetKVServiceProcessorBsMultiPut struct {
  handler TStringBigSetKVService
}

func (p *tStringBigSetKVServiceProcessorBsMultiPut) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TStringBigSetKVServiceBsMultiPutArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("bsMultiPut", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TStringBigSetKVServiceBsMultiPutResult{}
var retval *TMultiPutItemResult_
  var err2 error
  if retval, err2 = p.handler.BsMultiPut(ctx, args.BsName, args.SetData, args.GetAddedItems, args.GetReplacedItems); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing bsMultiPut: " + err2.Error())
    oprot.WriteMessageBegin("bsMultiPut", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("bsMultiPut", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tStringBigSetKVServiceProcessorGetTotalCount struct {
  handler TStringBigSetKVService
}

func (p *tStringBigSetKVServiceProcessorGetTotalCount) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TStringBigSetKVServiceGetTotalCountArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getTotalCount", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TStringBigSetKVServiceGetTotalCountResult{}
var retval int64
  var err2 error
  if retval, err2 = p.handler.GetTotalCount(ctx, args.BsName); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getTotalCount: " + err2.Error())
    oprot.WriteMessageBegin("getTotalCount", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("getTotalCount", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tStringBigSetKVServiceProcessorRemoveAll struct {
  handler TStringBigSetKVService
}

func (p *tStringBigSetKVServiceProcessorRemoveAll) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TStringBigSetKVServiceRemoveAllArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("removeAll", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TStringBigSetKVServiceRemoveAllResult{}
var retval int64
  var err2 error
  if retval, err2 = p.handler.RemoveAll(ctx, args.BsName); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing removeAll: " + err2.Error())
    oprot.WriteMessageBegin("removeAll", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("removeAll", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tStringBigSetKVServiceProcessorTotalStringKeyCount struct {
  handler TStringBigSetKVService
}

func (p *tStringBigSetKVServiceProcessorTotalStringKeyCount) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TStringBigSetKVServiceTotalStringKeyCountArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("totalStringKeyCount", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TStringBigSetKVServiceTotalStringKeyCountResult{}
var retval int64
  var err2 error
  if retval, err2 = p.handler.TotalStringKeyCount(ctx); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing totalStringKeyCount: " + err2.Error())
    oprot.WriteMessageBegin("totalStringKeyCount", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("totalStringKeyCount", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tStringBigSetKVServiceProcessorGetListKey struct {
  handler TStringBigSetKVService
}

func (p *tStringBigSetKVServiceProcessorGetListKey) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TStringBigSetKVServiceGetListKeyArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getListKey", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TStringBigSetKVServiceGetListKeyResult{}
var retval []TStringKey
  var err2 error
  if retval, err2 = p.handler.GetListKey(ctx, args.FromIndex, args.Count); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getListKey: " + err2.Error())
    oprot.WriteMessageBegin("getListKey", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getListKey", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tStringBigSetKVServiceProcessorGetListKeyFrom struct {
  handler TStringBigSetKVService
}

func (p *tStringBigSetKVServiceProcessorGetListKeyFrom) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TStringBigSetKVServiceGetListKeyFromArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getListKeyFrom", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TStringBigSetKVServiceGetListKeyFromResult{}
var retval []TStringKey
  var err2 error
  if retval, err2 = p.handler.GetListKeyFrom(ctx, args.KeyFrom, args.Count); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getListKeyFrom: " + err2.Error())
    oprot.WriteMessageBegin("getListKeyFrom", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getListKeyFrom", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - BsName
type TStringBigSetKVServiceCreateStringBigSetArgs struct {
  BsName TStringKey `thrift:"bsName,1" db:"bsName" json:"bsName"`
}

func NewTStringBigSetKVServiceCreateStringBigSetArgs() *TStringBigSetKVServiceCreateStringBigSetArgs {
  return &TStringBigSetKVServiceCreateStringBigSetArgs{}
}


func (p *TStringBigSetKVServiceCreateStringBigSetArgs) GetBsName() TStringKey {
  return p.BsName
}
func (p *TStringBigSetKVServiceCreateStringBigSetArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TStringBigSetKVServiceCreateStringBigSetArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TStringKey(v)
  p.BsName = temp
}
  return nil
}

func (p *TStringBigSetKVServiceCreateStringBigSetArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("createStringBigSet_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TStringBigSetKVServiceCreateStringBigSetArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("bsName", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:bsName: ", p), err) }
  if err := oprot.WriteString(string(p.BsName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.bsName (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:bsName: ", p), err) }
  return err
}

func (p *TStringBigSetKVServiceCreateStringBigSetArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TStringBigSetKVServiceCreateStringBigSetArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TStringBigSetKVServiceCreateStringBigSetResult struct {
  Success *TBigSetInfoResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTStringBigSetKVServiceCreateStringBigSetResult() *TStringBigSetKVServiceCreateStringBigSetResult {
  return &TStringBigSetKVServiceCreateStringBigSetResult{}
}

var TStringBigSetKVServiceCreateStringBigSetResult_Success_DEFAULT *TBigSetInfoResult_
func (p *TStringBigSetKVServiceCreateStringBigSetResult) GetSuccess() *TBigSetInfoResult_ {
  if !p.IsSetSuccess() {
    return TStringBigSetKVServiceCreateStringBigSetResult_Success_DEFAULT
  }
return p.Success
}
func (p *TStringBigSetKVServiceCreateStringBigSetResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TStringBigSetKVServiceCreateStringBigSetResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TStringBigSetKVServiceCreateStringBigSetResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TBigSetInfoResult_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TStringBigSetKVServiceCreateStringBigSetResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("createStringBigSet_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TStringBigSetKVServiceCreateStringBigSetResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TStringBigSetKVServiceCreateStringBigSetResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TStringBigSetKVServiceCreateStringBigSetResult(%+v)", *p)
}

// Attributes:
//  - BsName
type TStringBigSetKVServiceGetBigSetInfoByNameArgs struct {
  BsName TStringKey `thrift:"bsName,1" db:"bsName" json:"bsName"`
}

func NewTStringBigSetKVServiceGetBigSetInfoByNameArgs() *TStringBigSetKVServiceGetBigSetInfoByNameArgs {
  return &TStringBigSetKVServiceGetBigSetInfoByNameArgs{}
}


func (p *TStringBigSetKVServiceGetBigSetInfoByNameArgs) GetBsName() TStringKey {
  return p.BsName
}
func (p *TStringBigSetKVServiceGetBigSetInfoByNameArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TStringBigSetKVServiceGetBigSetInfoByNameArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TStringKey(v)
  p.BsName = temp
}
  return nil
}

func (p *TStringBigSetKVServiceGetBigSetInfoByNameArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getBigSetInfoByName_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TStringBigSetKVServiceGetBigSetInfoByNameArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("bsName", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:bsName: ", p), err) }
  if err := oprot.WriteString(string(p.BsName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.bsName (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:bsName: ", p), err) }
  return err
}

func (p *TStringBigSetKVServiceGetBigSetInfoByNameArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TStringBigSetKVServiceGetBigSetInfoByNameArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TStringBigSetKVServiceGetBigSetInfoByNameResult struct {
  Success *TBigSetInfoResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTStringBigSetKVServiceGetBigSetInfoByNameResult() *TStringBigSetKVServiceGetBigSetInfoByNameResult {
  return &TStringBigSetKVServiceGetBigSetInfoByNameResult{}
}

var TStringBigSetKVServiceGetBigSetInfoByNameResult_Success_DEFAULT *TBigSetInfoResult_
func (p *TStringBigSetKVServiceGetBigSetInfoByNameResult) GetSuccess() *TBigSetInfoResult_ {
  if !p.IsSetSuccess() {
    return TStringBigSetKVServiceGetBigSetInfoByNameResult_Success_DEFAULT
  }
return p.Success
}
func (p *TStringBigSetKVServiceGetBigSetInfoByNameResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TStringBigSetKVServiceGetBigSetInfoByNameResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TStringBigSetKVServiceGetBigSetInfoByNameResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TBigSetInfoResult_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TStringBigSetKVServiceGetBigSetInfoByNameResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getBigSetInfoByName_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TStringBigSetKVServiceGetBigSetInfoByNameResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TStringBigSetKVServiceGetBigSetInfoByNameResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TStringBigSetKVServiceGetBigSetInfoByNameResult(%+v)", *p)
}

// Attributes:
//  - BsName
//  - BigsetID
type TStringBigSetKVServiceAssignBigSetNameArgs struct {
  BsName TStringKey `thrift:"bsName,1" db:"bsName" json:"bsName"`
  BigsetID TContainerKey `thrift:"bigsetID,2" db:"bigsetID" json:"bigsetID"`
}

func NewTStringBigSetKVServiceAssignBigSetNameArgs() *TStringBigSetKVServiceAssignBigSetNameArgs {
  return &TStringBigSetKVServiceAssignBigSetNameArgs{}
}


func (p *TStringBigSetKVServiceAssignBigSetNameArgs) GetBsName() TStringKey {
  return p.BsName
}

func (p *TStringBigSetKVServiceAssignBigSetNameArgs) GetBigsetID() TContainerKey {
  return p.BigsetID
}
func (p *TStringBigSetKVServiceAssignBigSetNameArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TStringBigSetKVServiceAssignBigSetNameArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TStringKey(v)
  p.BsName = temp
}
  return nil
}

func (p *TStringBigSetKVServiceAssignBigSetNameArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := TContainerKey(v)
  p.BigsetID = temp
}
  return nil
}

func (p *TStringBigSetKVServiceAssignBigSetNameArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("assignBigSetName_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TStringBigSetKVServiceAssignBigSetNameArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("bsName", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:bsName: ", p), err) }
  if err := oprot.WriteString(string(p.BsName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.bsName (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:bsName: ", p), err) }
  return err
}

func (p *TStringBigSetKVServiceAssignBigSetNameArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("bigsetID", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:bigsetID: ", p), err) }
  if err := oprot.WriteI64(int64(p.BigsetID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.bigsetID (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:bigsetID: ", p), err) }
  return err
}

func (p *TStringBigSetKVServiceAssignBigSetNameArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TStringBigSetKVServiceAssignBigSetNameArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TStringBigSetKVServiceAssignBigSetNameResult struct {
  Success *TBigSetInfoResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTStringBigSetKVServiceAssignBigSetNameResult() *TStringBigSetKVServiceAssignBigSetNameResult {
  return &TStringBigSetKVServiceAssignBigSetNameResult{}
}

var TStringBigSetKVServiceAssignBigSetNameResult_Success_DEFAULT *TBigSetInfoResult_
func (p *TStringBigSetKVServiceAssignBigSetNameResult) GetSuccess() *TBigSetInfoResult_ {
  if !p.IsSetSuccess() {
    return TStringBigSetKVServiceAssignBigSetNameResult_Success_DEFAULT
  }
return p.Success
}
func (p *TStringBigSetKVServiceAssignBigSetNameResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TStringBigSetKVServiceAssignBigSetNameResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TStringBigSetKVServiceAssignBigSetNameResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TBigSetInfoResult_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TStringBigSetKVServiceAssignBigSetNameResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("assignBigSetName_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TStringBigSetKVServiceAssignBigSetNameResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TStringBigSetKVServiceAssignBigSetNameResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TStringBigSetKVServiceAssignBigSetNameResult(%+v)", *p)
}

// Attributes:
//  - BsName
//  - Item
type TStringBigSetKVServiceBsPutItemArgs struct {
  BsName TStringKey `thrift:"bsName,1" db:"bsName" json:"bsName"`
  Item *TItem `thrift:"item,2" db:"item" json:"item"`
}

func NewTStringBigSetKVServiceBsPutItemArgs() *TStringBigSetKVServiceBsPutItemArgs {
  return &TStringBigSetKVServiceBsPutItemArgs{}
}


func (p *TStringBigSetKVServiceBsPutItemArgs) GetBsName() TStringKey {
  return p.BsName
}
var TStringBigSetKVServiceBsPutItemArgs_Item_DEFAULT *TItem
func (p *TStringBigSetKVServiceBsPutItemArgs) GetItem() *TItem {
  if !p.IsSetItem() {
    return TStringBigSetKVServiceBsPutItemArgs_Item_DEFAULT
  }
return p.Item
}
func (p *TStringBigSetKVServiceBsPutItemArgs) IsSetItem() bool {
  return p.Item != nil
}

func (p *TStringBigSetKVServiceBsPutItemArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TStringBigSetKVServiceBsPutItemArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TStringKey(v)
  p.BsName = temp
}
  return nil
}

func (p *TStringBigSetKVServiceBsPutItemArgs)  ReadField2(iprot thrift.TProtocol) error {
  p.Item = &TItem{}
  if err := p.Item.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Item), err)
  }
  return nil
}

func (p *TStringBigSetKVServiceBsPutItemArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("bsPutItem_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TStringBigSetKVServiceBsPutItemArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("bsName", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:bsName: ", p), err) }
  if err := oprot.WriteString(string(p.BsName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.bsName (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:bsName: ", p), err) }
  return err
}

func (p *TStringBigSetKVServiceBsPutItemArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("item", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:item: ", p), err) }
  if err := p.Item.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Item), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:item: ", p), err) }
  return err
}

func (p *TStringBigSetKVServiceBsPutItemArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TStringBigSetKVServiceBsPutItemArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TStringBigSetKVServiceBsPutItemResult struct {
  Success *TPutItemResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTStringBigSetKVServiceBsPutItemResult() *TStringBigSetKVServiceBsPutItemResult {
  return &TStringBigSetKVServiceBsPutItemResult{}
}

var TStringBigSetKVServiceBsPutItemResult_Success_DEFAULT *TPutItemResult_
func (p *TStringBigSetKVServiceBsPutItemResult) GetSuccess() *TPutItemResult_ {
  if !p.IsSetSuccess() {
    return TStringBigSetKVServiceBsPutItemResult_Success_DEFAULT
  }
return p.Success
}
func (p *TStringBigSetKVServiceBsPutItemResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TStringBigSetKVServiceBsPutItemResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TStringBigSetKVServiceBsPutItemResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TPutItemResult_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TStringBigSetKVServiceBsPutItemResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("bsPutItem_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TStringBigSetKVServiceBsPutItemResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TStringBigSetKVServiceBsPutItemResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TStringBigSetKVServiceBsPutItemResult(%+v)", *p)
}

// Attributes:
//  - BsName
//  - ItemKey
type TStringBigSetKVServiceBsRemoveItemArgs struct {
  BsName TStringKey `thrift:"bsName,1" db:"bsName" json:"bsName"`
  ItemKey TItemKey `thrift:"itemKey,2" db:"itemKey" json:"itemKey"`
}

func NewTStringBigSetKVServiceBsRemoveItemArgs() *TStringBigSetKVServiceBsRemoveItemArgs {
  return &TStringBigSetKVServiceBsRemoveItemArgs{}
}


func (p *TStringBigSetKVServiceBsRemoveItemArgs) GetBsName() TStringKey {
  return p.BsName
}

func (p *TStringBigSetKVServiceBsRemoveItemArgs) GetItemKey() TItemKey {
  return p.ItemKey
}
func (p *TStringBigSetKVServiceBsRemoveItemArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TStringBigSetKVServiceBsRemoveItemArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TStringKey(v)
  p.BsName = temp
}
  return nil
}

func (p *TStringBigSetKVServiceBsRemoveItemArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := TItemKey(v)
  p.ItemKey = temp
}
  return nil
}

func (p *TStringBigSetKVServiceBsRemoveItemArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("bsRemoveItem_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TStringBigSetKVServiceBsRemoveItemArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("bsName", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:bsName: ", p), err) }
  if err := oprot.WriteString(string(p.BsName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.bsName (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:bsName: ", p), err) }
  return err
}

func (p *TStringBigSetKVServiceBsRemoveItemArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("itemKey", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:itemKey: ", p), err) }
  if err := oprot.WriteBinary(p.ItemKey); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.itemKey (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:itemKey: ", p), err) }
  return err
}

func (p *TStringBigSetKVServiceBsRemoveItemArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TStringBigSetKVServiceBsRemoveItemArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TStringBigSetKVServiceBsRemoveItemResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTStringBigSetKVServiceBsRemoveItemResult() *TStringBigSetKVServiceBsRemoveItemResult {
  return &TStringBigSetKVServiceBsRemoveItemResult{}
}

var TStringBigSetKVServiceBsRemoveItemResult_Success_DEFAULT bool
func (p *TStringBigSetKVServiceBsRemoveItemResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return TStringBigSetKVServiceBsRemoveItemResult_Success_DEFAULT
  }
return *p.Success
}
func (p *TStringBigSetKVServiceBsRemoveItemResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TStringBigSetKVServiceBsRemoveItemResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TStringBigSetKVServiceBsRemoveItemResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *TStringBigSetKVServiceBsRemoveItemResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("bsRemoveItem_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TStringBigSetKVServiceBsRemoveItemResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TStringBigSetKVServiceBsRemoveItemResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TStringBigSetKVServiceBsRemoveItemResult(%+v)", *p)
}

// Attributes:
//  - BsName
//  - ItemKey
type TStringBigSetKVServiceBsExistedArgs struct {
  BsName TStringKey `thrift:"bsName,1" db:"bsName" json:"bsName"`
  ItemKey TItemKey `thrift:"itemKey,2" db:"itemKey" json:"itemKey"`
}

func NewTStringBigSetKVServiceBsExistedArgs() *TStringBigSetKVServiceBsExistedArgs {
  return &TStringBigSetKVServiceBsExistedArgs{}
}


func (p *TStringBigSetKVServiceBsExistedArgs) GetBsName() TStringKey {
  return p.BsName
}

func (p *TStringBigSetKVServiceBsExistedArgs) GetItemKey() TItemKey {
  return p.ItemKey
}
func (p *TStringBigSetKVServiceBsExistedArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TStringBigSetKVServiceBsExistedArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TStringKey(v)
  p.BsName = temp
}
  return nil
}

func (p *TStringBigSetKVServiceBsExistedArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := TItemKey(v)
  p.ItemKey = temp
}
  return nil
}

func (p *TStringBigSetKVServiceBsExistedArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("bsExisted_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TStringBigSetKVServiceBsExistedArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("bsName", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:bsName: ", p), err) }
  if err := oprot.WriteString(string(p.BsName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.bsName (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:bsName: ", p), err) }
  return err
}

func (p *TStringBigSetKVServiceBsExistedArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("itemKey", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:itemKey: ", p), err) }
  if err := oprot.WriteBinary(p.ItemKey); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.itemKey (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:itemKey: ", p), err) }
  return err
}

func (p *TStringBigSetKVServiceBsExistedArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TStringBigSetKVServiceBsExistedArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TStringBigSetKVServiceBsExistedResult struct {
  Success *TExistedResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTStringBigSetKVServiceBsExistedResult() *TStringBigSetKVServiceBsExistedResult {
  return &TStringBigSetKVServiceBsExistedResult{}
}

var TStringBigSetKVServiceBsExistedResult_Success_DEFAULT *TExistedResult_
func (p *TStringBigSetKVServiceBsExistedResult) GetSuccess() *TExistedResult_ {
  if !p.IsSetSuccess() {
    return TStringBigSetKVServiceBsExistedResult_Success_DEFAULT
  }
return p.Success
}
func (p *TStringBigSetKVServiceBsExistedResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TStringBigSetKVServiceBsExistedResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TStringBigSetKVServiceBsExistedResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TExistedResult_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TStringBigSetKVServiceBsExistedResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("bsExisted_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TStringBigSetKVServiceBsExistedResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TStringBigSetKVServiceBsExistedResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TStringBigSetKVServiceBsExistedResult(%+v)", *p)
}

// Attributes:
//  - BsName
//  - ItemKey
type TStringBigSetKVServiceBsGetItemArgs struct {
  BsName TStringKey `thrift:"bsName,1" db:"bsName" json:"bsName"`
  ItemKey TItemKey `thrift:"itemKey,2" db:"itemKey" json:"itemKey"`
}

func NewTStringBigSetKVServiceBsGetItemArgs() *TStringBigSetKVServiceBsGetItemArgs {
  return &TStringBigSetKVServiceBsGetItemArgs{}
}


func (p *TStringBigSetKVServiceBsGetItemArgs) GetBsName() TStringKey {
  return p.BsName
}

func (p *TStringBigSetKVServiceBsGetItemArgs) GetItemKey() TItemKey {
  return p.ItemKey
}
func (p *TStringBigSetKVServiceBsGetItemArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TStringBigSetKVServiceBsGetItemArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TStringKey(v)
  p.BsName = temp
}
  return nil
}

func (p *TStringBigSetKVServiceBsGetItemArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := TItemKey(v)
  p.ItemKey = temp
}
  return nil
}

func (p *TStringBigSetKVServiceBsGetItemArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("bsGetItem_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TStringBigSetKVServiceBsGetItemArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("bsName", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:bsName: ", p), err) }
  if err := oprot.WriteString(string(p.BsName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.bsName (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:bsName: ", p), err) }
  return err
}

func (p *TStringBigSetKVServiceBsGetItemArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("itemKey", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:itemKey: ", p), err) }
  if err := oprot.WriteBinary(p.ItemKey); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.itemKey (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:itemKey: ", p), err) }
  return err
}

func (p *TStringBigSetKVServiceBsGetItemArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TStringBigSetKVServiceBsGetItemArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TStringBigSetKVServiceBsGetItemResult struct {
  Success *TItemResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTStringBigSetKVServiceBsGetItemResult() *TStringBigSetKVServiceBsGetItemResult {
  return &TStringBigSetKVServiceBsGetItemResult{}
}

var TStringBigSetKVServiceBsGetItemResult_Success_DEFAULT *TItemResult_
func (p *TStringBigSetKVServiceBsGetItemResult) GetSuccess() *TItemResult_ {
  if !p.IsSetSuccess() {
    return TStringBigSetKVServiceBsGetItemResult_Success_DEFAULT
  }
return p.Success
}
func (p *TStringBigSetKVServiceBsGetItemResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TStringBigSetKVServiceBsGetItemResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TStringBigSetKVServiceBsGetItemResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TItemResult_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TStringBigSetKVServiceBsGetItemResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("bsGetItem_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TStringBigSetKVServiceBsGetItemResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TStringBigSetKVServiceBsGetItemResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TStringBigSetKVServiceBsGetItemResult(%+v)", *p)
}

// Attributes:
//  - BsName
//  - FromPos
//  - Count
type TStringBigSetKVServiceBsGetSliceArgs struct {
  BsName TStringKey `thrift:"bsName,1" db:"bsName" json:"bsName"`
  FromPos int32 `thrift:"fromPos,2" db:"fromPos" json:"fromPos"`
  Count int32 `thrift:"count,3" db:"count" json:"count"`
}

func NewTStringBigSetKVServiceBsGetSliceArgs() *TStringBigSetKVServiceBsGetSliceArgs {
  return &TStringBigSetKVServiceBsGetSliceArgs{}
}


func (p *TStringBigSetKVServiceBsGetSliceArgs) GetBsName() TStringKey {
  return p.BsName
}

func (p *TStringBigSetKVServiceBsGetSliceArgs) GetFromPos() int32 {
  return p.FromPos
}

func (p *TStringBigSetKVServiceBsGetSliceArgs) GetCount() int32 {
  return p.Count
}
func (p *TStringBigSetKVServiceBsGetSliceArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TStringBigSetKVServiceBsGetSliceArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TStringKey(v)
  p.BsName = temp
}
  return nil
}

func (p *TStringBigSetKVServiceBsGetSliceArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.FromPos = v
}
  return nil
}

func (p *TStringBigSetKVServiceBsGetSliceArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Count = v
}
  return nil
}

func (p *TStringBigSetKVServiceBsGetSliceArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("bsGetSlice_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TStringBigSetKVServiceBsGetSliceArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("bsName", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:bsName: ", p), err) }
  if err := oprot.WriteString(string(p.BsName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.bsName (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:bsName: ", p), err) }
  return err
}

func (p *TStringBigSetKVServiceBsGetSliceArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("fromPos", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:fromPos: ", p), err) }
  if err := oprot.WriteI32(int32(p.FromPos)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.fromPos (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:fromPos: ", p), err) }
  return err
}

func (p *TStringBigSetKVServiceBsGetSliceArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("count", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:count: ", p), err) }
  if err := oprot.WriteI32(int32(p.Count)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.count (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:count: ", p), err) }
  return err
}

func (p *TStringBigSetKVServiceBsGetSliceArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TStringBigSetKVServiceBsGetSliceArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TStringBigSetKVServiceBsGetSliceResult struct {
  Success *TItemSetResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTStringBigSetKVServiceBsGetSliceResult() *TStringBigSetKVServiceBsGetSliceResult {
  return &TStringBigSetKVServiceBsGetSliceResult{}
}

var TStringBigSetKVServiceBsGetSliceResult_Success_DEFAULT *TItemSetResult_
func (p *TStringBigSetKVServiceBsGetSliceResult) GetSuccess() *TItemSetResult_ {
  if !p.IsSetSuccess() {
    return TStringBigSetKVServiceBsGetSliceResult_Success_DEFAULT
  }
return p.Success
}
func (p *TStringBigSetKVServiceBsGetSliceResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TStringBigSetKVServiceBsGetSliceResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TStringBigSetKVServiceBsGetSliceResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TItemSetResult_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TStringBigSetKVServiceBsGetSliceResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("bsGetSlice_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TStringBigSetKVServiceBsGetSliceResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TStringBigSetKVServiceBsGetSliceResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TStringBigSetKVServiceBsGetSliceResult(%+v)", *p)
}

// Attributes:
//  - BsName
//  - FromKey
//  - Count
type TStringBigSetKVServiceBsGetSliceFromItemArgs struct {
  BsName TStringKey `thrift:"bsName,1" db:"bsName" json:"bsName"`
  FromKey TItemKey `thrift:"fromKey,2" db:"fromKey" json:"fromKey"`
  Count int32 `thrift:"count,3" db:"count" json:"count"`
}

func NewTStringBigSetKVServiceBsGetSliceFromItemArgs() *TStringBigSetKVServiceBsGetSliceFromItemArgs {
  return &TStringBigSetKVServiceBsGetSliceFromItemArgs{}
}


func (p *TStringBigSetKVServiceBsGetSliceFromItemArgs) GetBsName() TStringKey {
  return p.BsName
}

func (p *TStringBigSetKVServiceBsGetSliceFromItemArgs) GetFromKey() TItemKey {
  return p.FromKey
}

func (p *TStringBigSetKVServiceBsGetSliceFromItemArgs) GetCount() int32 {
  return p.Count
}
func (p *TStringBigSetKVServiceBsGetSliceFromItemArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TStringBigSetKVServiceBsGetSliceFromItemArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TStringKey(v)
  p.BsName = temp
}
  return nil
}

func (p *TStringBigSetKVServiceBsGetSliceFromItemArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := TItemKey(v)
  p.FromKey = temp
}
  return nil
}

func (p *TStringBigSetKVServiceBsGetSliceFromItemArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Count = v
}
  return nil
}

func (p *TStringBigSetKVServiceBsGetSliceFromItemArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("bsGetSliceFromItem_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TStringBigSetKVServiceBsGetSliceFromItemArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("bsName", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:bsName: ", p), err) }
  if err := oprot.WriteString(string(p.BsName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.bsName (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:bsName: ", p), err) }
  return err
}

func (p *TStringBigSetKVServiceBsGetSliceFromItemArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("fromKey", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:fromKey: ", p), err) }
  if err := oprot.WriteBinary(p.FromKey); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.fromKey (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:fromKey: ", p), err) }
  return err
}

func (p *TStringBigSetKVServiceBsGetSliceFromItemArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("count", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:count: ", p), err) }
  if err := oprot.WriteI32(int32(p.Count)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.count (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:count: ", p), err) }
  return err
}

func (p *TStringBigSetKVServiceBsGetSliceFromItemArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TStringBigSetKVServiceBsGetSliceFromItemArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TStringBigSetKVServiceBsGetSliceFromItemResult struct {
  Success *TItemSetResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTStringBigSetKVServiceBsGetSliceFromItemResult() *TStringBigSetKVServiceBsGetSliceFromItemResult {
  return &TStringBigSetKVServiceBsGetSliceFromItemResult{}
}

var TStringBigSetKVServiceBsGetSliceFromItemResult_Success_DEFAULT *TItemSetResult_
func (p *TStringBigSetKVServiceBsGetSliceFromItemResult) GetSuccess() *TItemSetResult_ {
  if !p.IsSetSuccess() {
    return TStringBigSetKVServiceBsGetSliceFromItemResult_Success_DEFAULT
  }
return p.Success
}
func (p *TStringBigSetKVServiceBsGetSliceFromItemResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TStringBigSetKVServiceBsGetSliceFromItemResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TStringBigSetKVServiceBsGetSliceFromItemResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TItemSetResult_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TStringBigSetKVServiceBsGetSliceFromItemResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("bsGetSliceFromItem_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TStringBigSetKVServiceBsGetSliceFromItemResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TStringBigSetKVServiceBsGetSliceFromItemResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TStringBigSetKVServiceBsGetSliceFromItemResult(%+v)", *p)
}

// Attributes:
//  - BsName
//  - FromPos
//  - Count
type TStringBigSetKVServiceBsGetSliceRArgs struct {
  BsName TStringKey `thrift:"bsName,1" db:"bsName" json:"bsName"`
  FromPos int32 `thrift:"fromPos,2" db:"fromPos" json:"fromPos"`
  Count int32 `thrift:"count,3" db:"count" json:"count"`
}

func NewTStringBigSetKVServiceBsGetSliceRArgs() *TStringBigSetKVServiceBsGetSliceRArgs {
  return &TStringBigSetKVServiceBsGetSliceRArgs{}
}


func (p *TStringBigSetKVServiceBsGetSliceRArgs) GetBsName() TStringKey {
  return p.BsName
}

func (p *TStringBigSetKVServiceBsGetSliceRArgs) GetFromPos() int32 {
  return p.FromPos
}

func (p *TStringBigSetKVServiceBsGetSliceRArgs) GetCount() int32 {
  return p.Count
}
func (p *TStringBigSetKVServiceBsGetSliceRArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TStringBigSetKVServiceBsGetSliceRArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TStringKey(v)
  p.BsName = temp
}
  return nil
}

func (p *TStringBigSetKVServiceBsGetSliceRArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.FromPos = v
}
  return nil
}

func (p *TStringBigSetKVServiceBsGetSliceRArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Count = v
}
  return nil
}

func (p *TStringBigSetKVServiceBsGetSliceRArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("bsGetSliceR_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TStringBigSetKVServiceBsGetSliceRArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("bsName", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:bsName: ", p), err) }
  if err := oprot.WriteString(string(p.BsName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.bsName (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:bsName: ", p), err) }
  return err
}

func (p *TStringBigSetKVServiceBsGetSliceRArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("fromPos", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:fromPos: ", p), err) }
  if err := oprot.WriteI32(int32(p.FromPos)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.fromPos (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:fromPos: ", p), err) }
  return err
}

func (p *TStringBigSetKVServiceBsGetSliceRArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("count", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:count: ", p), err) }
  if err := oprot.WriteI32(int32(p.Count)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.count (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:count: ", p), err) }
  return err
}

func (p *TStringBigSetKVServiceBsGetSliceRArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TStringBigSetKVServiceBsGetSliceRArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TStringBigSetKVServiceBsGetSliceRResult struct {
  Success *TItemSetResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTStringBigSetKVServiceBsGetSliceRResult() *TStringBigSetKVServiceBsGetSliceRResult {
  return &TStringBigSetKVServiceBsGetSliceRResult{}
}

var TStringBigSetKVServiceBsGetSliceRResult_Success_DEFAULT *TItemSetResult_
func (p *TStringBigSetKVServiceBsGetSliceRResult) GetSuccess() *TItemSetResult_ {
  if !p.IsSetSuccess() {
    return TStringBigSetKVServiceBsGetSliceRResult_Success_DEFAULT
  }
return p.Success
}
func (p *TStringBigSetKVServiceBsGetSliceRResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TStringBigSetKVServiceBsGetSliceRResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TStringBigSetKVServiceBsGetSliceRResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TItemSetResult_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TStringBigSetKVServiceBsGetSliceRResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("bsGetSliceR_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TStringBigSetKVServiceBsGetSliceRResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TStringBigSetKVServiceBsGetSliceRResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TStringBigSetKVServiceBsGetSliceRResult(%+v)", *p)
}

// Attributes:
//  - BsName
//  - FromKey
//  - Count
type TStringBigSetKVServiceBsGetSliceFromItemRArgs struct {
  BsName TStringKey `thrift:"bsName,1" db:"bsName" json:"bsName"`
  FromKey TItemKey `thrift:"fromKey,2" db:"fromKey" json:"fromKey"`
  Count int32 `thrift:"count,3" db:"count" json:"count"`
}

func NewTStringBigSetKVServiceBsGetSliceFromItemRArgs() *TStringBigSetKVServiceBsGetSliceFromItemRArgs {
  return &TStringBigSetKVServiceBsGetSliceFromItemRArgs{}
}


func (p *TStringBigSetKVServiceBsGetSliceFromItemRArgs) GetBsName() TStringKey {
  return p.BsName
}

func (p *TStringBigSetKVServiceBsGetSliceFromItemRArgs) GetFromKey() TItemKey {
  return p.FromKey
}

func (p *TStringBigSetKVServiceBsGetSliceFromItemRArgs) GetCount() int32 {
  return p.Count
}
func (p *TStringBigSetKVServiceBsGetSliceFromItemRArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TStringBigSetKVServiceBsGetSliceFromItemRArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TStringKey(v)
  p.BsName = temp
}
  return nil
}

func (p *TStringBigSetKVServiceBsGetSliceFromItemRArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := TItemKey(v)
  p.FromKey = temp
}
  return nil
}

func (p *TStringBigSetKVServiceBsGetSliceFromItemRArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Count = v
}
  return nil
}

func (p *TStringBigSetKVServiceBsGetSliceFromItemRArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("bsGetSliceFromItemR_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TStringBigSetKVServiceBsGetSliceFromItemRArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("bsName", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:bsName: ", p), err) }
  if err := oprot.WriteString(string(p.BsName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.bsName (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:bsName: ", p), err) }
  return err
}

func (p *TStringBigSetKVServiceBsGetSliceFromItemRArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("fromKey", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:fromKey: ", p), err) }
  if err := oprot.WriteBinary(p.FromKey); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.fromKey (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:fromKey: ", p), err) }
  return err
}

func (p *TStringBigSetKVServiceBsGetSliceFromItemRArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("count", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:count: ", p), err) }
  if err := oprot.WriteI32(int32(p.Count)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.count (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:count: ", p), err) }
  return err
}

func (p *TStringBigSetKVServiceBsGetSliceFromItemRArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TStringBigSetKVServiceBsGetSliceFromItemRArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TStringBigSetKVServiceBsGetSliceFromItemRResult struct {
  Success *TItemSetResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTStringBigSetKVServiceBsGetSliceFromItemRResult() *TStringBigSetKVServiceBsGetSliceFromItemRResult {
  return &TStringBigSetKVServiceBsGetSliceFromItemRResult{}
}

var TStringBigSetKVServiceBsGetSliceFromItemRResult_Success_DEFAULT *TItemSetResult_
func (p *TStringBigSetKVServiceBsGetSliceFromItemRResult) GetSuccess() *TItemSetResult_ {
  if !p.IsSetSuccess() {
    return TStringBigSetKVServiceBsGetSliceFromItemRResult_Success_DEFAULT
  }
return p.Success
}
func (p *TStringBigSetKVServiceBsGetSliceFromItemRResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TStringBigSetKVServiceBsGetSliceFromItemRResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TStringBigSetKVServiceBsGetSliceFromItemRResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TItemSetResult_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TStringBigSetKVServiceBsGetSliceFromItemRResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("bsGetSliceFromItemR_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TStringBigSetKVServiceBsGetSliceFromItemRResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TStringBigSetKVServiceBsGetSliceFromItemRResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TStringBigSetKVServiceBsGetSliceFromItemRResult(%+v)", *p)
}

// Attributes:
//  - BsName
//  - StartKey
//  - EndKey
type TStringBigSetKVServiceBsRangeQueryArgs struct {
  BsName TStringKey `thrift:"bsName,1" db:"bsName" json:"bsName"`
  StartKey TItemKey `thrift:"startKey,2" db:"startKey" json:"startKey"`
  EndKey TItemKey `thrift:"endKey,3" db:"endKey" json:"endKey"`
}

func NewTStringBigSetKVServiceBsRangeQueryArgs() *TStringBigSetKVServiceBsRangeQueryArgs {
  return &TStringBigSetKVServiceBsRangeQueryArgs{}
}


func (p *TStringBigSetKVServiceBsRangeQueryArgs) GetBsName() TStringKey {
  return p.BsName
}

func (p *TStringBigSetKVServiceBsRangeQueryArgs) GetStartKey() TItemKey {
  return p.StartKey
}

func (p *TStringBigSetKVServiceBsRangeQueryArgs) GetEndKey() TItemKey {
  return p.EndKey
}
func (p *TStringBigSetKVServiceBsRangeQueryArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TStringBigSetKVServiceBsRangeQueryArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TStringKey(v)
  p.BsName = temp
}
  return nil
}

func (p *TStringBigSetKVServiceBsRangeQueryArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := TItemKey(v)
  p.StartKey = temp
}
  return nil
}

func (p *TStringBigSetKVServiceBsRangeQueryArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := TItemKey(v)
  p.EndKey = temp
}
  return nil
}

func (p *TStringBigSetKVServiceBsRangeQueryArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("bsRangeQuery_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TStringBigSetKVServiceBsRangeQueryArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("bsName", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:bsName: ", p), err) }
  if err := oprot.WriteString(string(p.BsName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.bsName (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:bsName: ", p), err) }
  return err
}

func (p *TStringBigSetKVServiceBsRangeQueryArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("startKey", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:startKey: ", p), err) }
  if err := oprot.WriteBinary(p.StartKey); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.startKey (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:startKey: ", p), err) }
  return err
}

func (p *TStringBigSetKVServiceBsRangeQueryArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("endKey", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:endKey: ", p), err) }
  if err := oprot.WriteBinary(p.EndKey); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.endKey (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:endKey: ", p), err) }
  return err
}

func (p *TStringBigSetKVServiceBsRangeQueryArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TStringBigSetKVServiceBsRangeQueryArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TStringBigSetKVServiceBsRangeQueryResult struct {
  Success *TItemSetResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTStringBigSetKVServiceBsRangeQueryResult() *TStringBigSetKVServiceBsRangeQueryResult {
  return &TStringBigSetKVServiceBsRangeQueryResult{}
}

var TStringBigSetKVServiceBsRangeQueryResult_Success_DEFAULT *TItemSetResult_
func (p *TStringBigSetKVServiceBsRangeQueryResult) GetSuccess() *TItemSetResult_ {
  if !p.IsSetSuccess() {
    return TStringBigSetKVServiceBsRangeQueryResult_Success_DEFAULT
  }
return p.Success
}
func (p *TStringBigSetKVServiceBsRangeQueryResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TStringBigSetKVServiceBsRangeQueryResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TStringBigSetKVServiceBsRangeQueryResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TItemSetResult_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TStringBigSetKVServiceBsRangeQueryResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("bsRangeQuery_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TStringBigSetKVServiceBsRangeQueryResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TStringBigSetKVServiceBsRangeQueryResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TStringBigSetKVServiceBsRangeQueryResult(%+v)", *p)
}

// Attributes:
//  - BsName
//  - SetData
type TStringBigSetKVServiceBsBulkLoadArgs struct {
  BsName TStringKey `thrift:"bsName,1" db:"bsName" json:"bsName"`
  SetData *TItemSet `thrift:"setData,2" db:"setData" json:"setData"`
}

func NewTStringBigSetKVServiceBsBulkLoadArgs() *TStringBigSetKVServiceBsBulkLoadArgs {
  return &TStringBigSetKVServiceBsBulkLoadArgs{}
}


func (p *TStringBigSetKVServiceBsBulkLoadArgs) GetBsName() TStringKey {
  return p.BsName
}
var TStringBigSetKVServiceBsBulkLoadArgs_SetData_DEFAULT *TItemSet
func (p *TStringBigSetKVServiceBsBulkLoadArgs) GetSetData() *TItemSet {
  if !p.IsSetSetData() {
    return TStringBigSetKVServiceBsBulkLoadArgs_SetData_DEFAULT
  }
return p.SetData
}
func (p *TStringBigSetKVServiceBsBulkLoadArgs) IsSetSetData() bool {
  return p.SetData != nil
}

func (p *TStringBigSetKVServiceBsBulkLoadArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TStringBigSetKVServiceBsBulkLoadArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TStringKey(v)
  p.BsName = temp
}
  return nil
}

func (p *TStringBigSetKVServiceBsBulkLoadArgs)  ReadField2(iprot thrift.TProtocol) error {
  p.SetData = &TItemSet{}
  if err := p.SetData.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SetData), err)
  }
  return nil
}

func (p *TStringBigSetKVServiceBsBulkLoadArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("bsBulkLoad_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TStringBigSetKVServiceBsBulkLoadArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("bsName", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:bsName: ", p), err) }
  if err := oprot.WriteString(string(p.BsName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.bsName (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:bsName: ", p), err) }
  return err
}

func (p *TStringBigSetKVServiceBsBulkLoadArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("setData", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:setData: ", p), err) }
  if err := p.SetData.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SetData), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:setData: ", p), err) }
  return err
}

func (p *TStringBigSetKVServiceBsBulkLoadArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TStringBigSetKVServiceBsBulkLoadArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TStringBigSetKVServiceBsBulkLoadResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTStringBigSetKVServiceBsBulkLoadResult() *TStringBigSetKVServiceBsBulkLoadResult {
  return &TStringBigSetKVServiceBsBulkLoadResult{}
}

var TStringBigSetKVServiceBsBulkLoadResult_Success_DEFAULT bool
func (p *TStringBigSetKVServiceBsBulkLoadResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return TStringBigSetKVServiceBsBulkLoadResult_Success_DEFAULT
  }
return *p.Success
}
func (p *TStringBigSetKVServiceBsBulkLoadResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TStringBigSetKVServiceBsBulkLoadResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TStringBigSetKVServiceBsBulkLoadResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *TStringBigSetKVServiceBsBulkLoadResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("bsBulkLoad_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TStringBigSetKVServiceBsBulkLoadResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TStringBigSetKVServiceBsBulkLoadResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TStringBigSetKVServiceBsBulkLoadResult(%+v)", *p)
}

// Attributes:
//  - BsName
//  - SetData
//  - GetAddedItems
//  - GetReplacedItems
type TStringBigSetKVServiceBsMultiPutArgs struct {
  BsName TStringKey `thrift:"bsName,1" db:"bsName" json:"bsName"`
  SetData *TItemSet `thrift:"setData,2" db:"setData" json:"setData"`
  GetAddedItems bool `thrift:"getAddedItems,3" db:"getAddedItems" json:"getAddedItems"`
  GetReplacedItems bool `thrift:"getReplacedItems,4" db:"getReplacedItems" json:"getReplacedItems"`
}

func NewTStringBigSetKVServiceBsMultiPutArgs() *TStringBigSetKVServiceBsMultiPutArgs {
  return &TStringBigSetKVServiceBsMultiPutArgs{}
}


func (p *TStringBigSetKVServiceBsMultiPutArgs) GetBsName() TStringKey {
  return p.BsName
}
var TStringBigSetKVServiceBsMultiPutArgs_SetData_DEFAULT *TItemSet
func (p *TStringBigSetKVServiceBsMultiPutArgs) GetSetData() *TItemSet {
  if !p.IsSetSetData() {
    return TStringBigSetKVServiceBsMultiPutArgs_SetData_DEFAULT
  }
return p.SetData
}

func (p *TStringBigSetKVServiceBsMultiPutArgs) GetGetAddedItems() bool {
  return p.GetAddedItems
}

func (p *TStringBigSetKVServiceBsMultiPutArgs) GetGetReplacedItems() bool {
  return p.GetReplacedItems
}
func (p *TStringBigSetKVServiceBsMultiPutArgs) IsSetSetData() bool {
  return p.SetData != nil
}

func (p *TStringBigSetKVServiceBsMultiPutArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TStringBigSetKVServiceBsMultiPutArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TStringKey(v)
  p.BsName = temp
}
  return nil
}

func (p *TStringBigSetKVServiceBsMultiPutArgs)  ReadField2(iprot thrift.TProtocol) error {
  p.SetData = &TItemSet{}
  if err := p.SetData.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SetData), err)
  }
  return nil
}

func (p *TStringBigSetKVServiceBsMultiPutArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.GetAddedItems = v
}
  return nil
}

func (p *TStringBigSetKVServiceBsMultiPutArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.GetReplacedItems = v
}
  return nil
}

func (p *TStringBigSetKVServiceBsMultiPutArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("bsMultiPut_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TStringBigSetKVServiceBsMultiPutArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("bsName", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:bsName: ", p), err) }
  if err := oprot.WriteString(string(p.BsName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.bsName (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:bsName: ", p), err) }
  return err
}

func (p *TStringBigSetKVServiceBsMultiPutArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("setData", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:setData: ", p), err) }
  if err := p.SetData.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SetData), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:setData: ", p), err) }
  return err
}

func (p *TStringBigSetKVServiceBsMultiPutArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("getAddedItems", thrift.BOOL, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:getAddedItems: ", p), err) }
  if err := oprot.WriteBool(bool(p.GetAddedItems)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.getAddedItems (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:getAddedItems: ", p), err) }
  return err
}

func (p *TStringBigSetKVServiceBsMultiPutArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("getReplacedItems", thrift.BOOL, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:getReplacedItems: ", p), err) }
  if err := oprot.WriteBool(bool(p.GetReplacedItems)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.getReplacedItems (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:getReplacedItems: ", p), err) }
  return err
}

func (p *TStringBigSetKVServiceBsMultiPutArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TStringBigSetKVServiceBsMultiPutArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TStringBigSetKVServiceBsMultiPutResult struct {
  Success *TMultiPutItemResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTStringBigSetKVServiceBsMultiPutResult() *TStringBigSetKVServiceBsMultiPutResult {
  return &TStringBigSetKVServiceBsMultiPutResult{}
}

var TStringBigSetKVServiceBsMultiPutResult_Success_DEFAULT *TMultiPutItemResult_
func (p *TStringBigSetKVServiceBsMultiPutResult) GetSuccess() *TMultiPutItemResult_ {
  if !p.IsSetSuccess() {
    return TStringBigSetKVServiceBsMultiPutResult_Success_DEFAULT
  }
return p.Success
}
func (p *TStringBigSetKVServiceBsMultiPutResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TStringBigSetKVServiceBsMultiPutResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TStringBigSetKVServiceBsMultiPutResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TMultiPutItemResult_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TStringBigSetKVServiceBsMultiPutResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("bsMultiPut_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TStringBigSetKVServiceBsMultiPutResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TStringBigSetKVServiceBsMultiPutResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TStringBigSetKVServiceBsMultiPutResult(%+v)", *p)
}

// Attributes:
//  - BsName
type TStringBigSetKVServiceGetTotalCountArgs struct {
  BsName TStringKey `thrift:"bsName,1" db:"bsName" json:"bsName"`
}

func NewTStringBigSetKVServiceGetTotalCountArgs() *TStringBigSetKVServiceGetTotalCountArgs {
  return &TStringBigSetKVServiceGetTotalCountArgs{}
}


func (p *TStringBigSetKVServiceGetTotalCountArgs) GetBsName() TStringKey {
  return p.BsName
}
func (p *TStringBigSetKVServiceGetTotalCountArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TStringBigSetKVServiceGetTotalCountArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TStringKey(v)
  p.BsName = temp
}
  return nil
}

func (p *TStringBigSetKVServiceGetTotalCountArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getTotalCount_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TStringBigSetKVServiceGetTotalCountArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("bsName", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:bsName: ", p), err) }
  if err := oprot.WriteString(string(p.BsName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.bsName (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:bsName: ", p), err) }
  return err
}

func (p *TStringBigSetKVServiceGetTotalCountArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TStringBigSetKVServiceGetTotalCountArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TStringBigSetKVServiceGetTotalCountResult struct {
  Success *int64 `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTStringBigSetKVServiceGetTotalCountResult() *TStringBigSetKVServiceGetTotalCountResult {
  return &TStringBigSetKVServiceGetTotalCountResult{}
}

var TStringBigSetKVServiceGetTotalCountResult_Success_DEFAULT int64
func (p *TStringBigSetKVServiceGetTotalCountResult) GetSuccess() int64 {
  if !p.IsSetSuccess() {
    return TStringBigSetKVServiceGetTotalCountResult_Success_DEFAULT
  }
return *p.Success
}
func (p *TStringBigSetKVServiceGetTotalCountResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TStringBigSetKVServiceGetTotalCountResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TStringBigSetKVServiceGetTotalCountResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *TStringBigSetKVServiceGetTotalCountResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getTotalCount_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TStringBigSetKVServiceGetTotalCountResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.I64, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI64(int64(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TStringBigSetKVServiceGetTotalCountResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TStringBigSetKVServiceGetTotalCountResult(%+v)", *p)
}

// Attributes:
//  - BsName
type TStringBigSetKVServiceRemoveAllArgs struct {
  BsName TStringKey `thrift:"bsName,1" db:"bsName" json:"bsName"`
}

func NewTStringBigSetKVServiceRemoveAllArgs() *TStringBigSetKVServiceRemoveAllArgs {
  return &TStringBigSetKVServiceRemoveAllArgs{}
}


func (p *TStringBigSetKVServiceRemoveAllArgs) GetBsName() TStringKey {
  return p.BsName
}
func (p *TStringBigSetKVServiceRemoveAllArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TStringBigSetKVServiceRemoveAllArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TStringKey(v)
  p.BsName = temp
}
  return nil
}

func (p *TStringBigSetKVServiceRemoveAllArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("removeAll_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TStringBigSetKVServiceRemoveAllArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("bsName", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:bsName: ", p), err) }
  if err := oprot.WriteString(string(p.BsName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.bsName (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:bsName: ", p), err) }
  return err
}

func (p *TStringBigSetKVServiceRemoveAllArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TStringBigSetKVServiceRemoveAllArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TStringBigSetKVServiceRemoveAllResult struct {
  Success *int64 `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTStringBigSetKVServiceRemoveAllResult() *TStringBigSetKVServiceRemoveAllResult {
  return &TStringBigSetKVServiceRemoveAllResult{}
}

var TStringBigSetKVServiceRemoveAllResult_Success_DEFAULT int64
func (p *TStringBigSetKVServiceRemoveAllResult) GetSuccess() int64 {
  if !p.IsSetSuccess() {
    return TStringBigSetKVServiceRemoveAllResult_Success_DEFAULT
  }
return *p.Success
}
func (p *TStringBigSetKVServiceRemoveAllResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TStringBigSetKVServiceRemoveAllResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TStringBigSetKVServiceRemoveAllResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *TStringBigSetKVServiceRemoveAllResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("removeAll_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TStringBigSetKVServiceRemoveAllResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.I64, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI64(int64(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TStringBigSetKVServiceRemoveAllResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TStringBigSetKVServiceRemoveAllResult(%+v)", *p)
}

type TStringBigSetKVServiceTotalStringKeyCountArgs struct {
}

func NewTStringBigSetKVServiceTotalStringKeyCountArgs() *TStringBigSetKVServiceTotalStringKeyCountArgs {
  return &TStringBigSetKVServiceTotalStringKeyCountArgs{}
}

func (p *TStringBigSetKVServiceTotalStringKeyCountArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TStringBigSetKVServiceTotalStringKeyCountArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("totalStringKeyCount_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TStringBigSetKVServiceTotalStringKeyCountArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TStringBigSetKVServiceTotalStringKeyCountArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TStringBigSetKVServiceTotalStringKeyCountResult struct {
  Success *int64 `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTStringBigSetKVServiceTotalStringKeyCountResult() *TStringBigSetKVServiceTotalStringKeyCountResult {
  return &TStringBigSetKVServiceTotalStringKeyCountResult{}
}

var TStringBigSetKVServiceTotalStringKeyCountResult_Success_DEFAULT int64
func (p *TStringBigSetKVServiceTotalStringKeyCountResult) GetSuccess() int64 {
  if !p.IsSetSuccess() {
    return TStringBigSetKVServiceTotalStringKeyCountResult_Success_DEFAULT
  }
return *p.Success
}
func (p *TStringBigSetKVServiceTotalStringKeyCountResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TStringBigSetKVServiceTotalStringKeyCountResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TStringBigSetKVServiceTotalStringKeyCountResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *TStringBigSetKVServiceTotalStringKeyCountResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("totalStringKeyCount_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TStringBigSetKVServiceTotalStringKeyCountResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.I64, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI64(int64(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TStringBigSetKVServiceTotalStringKeyCountResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TStringBigSetKVServiceTotalStringKeyCountResult(%+v)", *p)
}

// Attributes:
//  - FromIndex
//  - Count
type TStringBigSetKVServiceGetListKeyArgs struct {
  FromIndex int64 `thrift:"fromIndex,1" db:"fromIndex" json:"fromIndex"`
  Count int32 `thrift:"count,2" db:"count" json:"count"`
}

func NewTStringBigSetKVServiceGetListKeyArgs() *TStringBigSetKVServiceGetListKeyArgs {
  return &TStringBigSetKVServiceGetListKeyArgs{}
}


func (p *TStringBigSetKVServiceGetListKeyArgs) GetFromIndex() int64 {
  return p.FromIndex
}

func (p *TStringBigSetKVServiceGetListKeyArgs) GetCount() int32 {
  return p.Count
}
func (p *TStringBigSetKVServiceGetListKeyArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TStringBigSetKVServiceGetListKeyArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.FromIndex = v
}
  return nil
}

func (p *TStringBigSetKVServiceGetListKeyArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Count = v
}
  return nil
}

func (p *TStringBigSetKVServiceGetListKeyArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getListKey_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TStringBigSetKVServiceGetListKeyArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("fromIndex", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:fromIndex: ", p), err) }
  if err := oprot.WriteI64(int64(p.FromIndex)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.fromIndex (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:fromIndex: ", p), err) }
  return err
}

func (p *TStringBigSetKVServiceGetListKeyArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("count", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:count: ", p), err) }
  if err := oprot.WriteI32(int32(p.Count)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.count (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:count: ", p), err) }
  return err
}

func (p *TStringBigSetKVServiceGetListKeyArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TStringBigSetKVServiceGetListKeyArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TStringBigSetKVServiceGetListKeyResult struct {
  Success []TStringKey `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTStringBigSetKVServiceGetListKeyResult() *TStringBigSetKVServiceGetListKeyResult {
  return &TStringBigSetKVServiceGetListKeyResult{}
}

var TStringBigSetKVServiceGetListKeyResult_Success_DEFAULT []TStringKey

func (p *TStringBigSetKVServiceGetListKeyResult) GetSuccess() []TStringKey {
  return p.Success
}
func (p *TStringBigSetKVServiceGetListKeyResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TStringBigSetKVServiceGetListKeyResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TStringBigSetKVServiceGetListKeyResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]TStringKey, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
var _elem147 TStringKey
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := TStringKey(v)
    _elem147 = temp
}
    p.Success = append(p.Success, _elem147)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TStringBigSetKVServiceGetListKeyResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getListKey_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TStringBigSetKVServiceGetListKeyResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRING, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TStringBigSetKVServiceGetListKeyResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TStringBigSetKVServiceGetListKeyResult(%+v)", *p)
}

// Attributes:
//  - KeyFrom
//  - Count
type TStringBigSetKVServiceGetListKeyFromArgs struct {
  KeyFrom TStringKey `thrift:"keyFrom,1" db:"keyFrom" json:"keyFrom"`
  Count int32 `thrift:"count,2" db:"count" json:"count"`
}

func NewTStringBigSetKVServiceGetListKeyFromArgs() *TStringBigSetKVServiceGetListKeyFromArgs {
  return &TStringBigSetKVServiceGetListKeyFromArgs{}
}


func (p *TStringBigSetKVServiceGetListKeyFromArgs) GetKeyFrom() TStringKey {
  return p.KeyFrom
}

func (p *TStringBigSetKVServiceGetListKeyFromArgs) GetCount() int32 {
  return p.Count
}
func (p *TStringBigSetKVServiceGetListKeyFromArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TStringBigSetKVServiceGetListKeyFromArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TStringKey(v)
  p.KeyFrom = temp
}
  return nil
}

func (p *TStringBigSetKVServiceGetListKeyFromArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Count = v
}
  return nil
}

func (p *TStringBigSetKVServiceGetListKeyFromArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getListKeyFrom_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TStringBigSetKVServiceGetListKeyFromArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("keyFrom", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:keyFrom: ", p), err) }
  if err := oprot.WriteString(string(p.KeyFrom)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.keyFrom (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:keyFrom: ", p), err) }
  return err
}

func (p *TStringBigSetKVServiceGetListKeyFromArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("count", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:count: ", p), err) }
  if err := oprot.WriteI32(int32(p.Count)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.count (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:count: ", p), err) }
  return err
}

func (p *TStringBigSetKVServiceGetListKeyFromArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TStringBigSetKVServiceGetListKeyFromArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TStringBigSetKVServiceGetListKeyFromResult struct {
  Success []TStringKey `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTStringBigSetKVServiceGetListKeyFromResult() *TStringBigSetKVServiceGetListKeyFromResult {
  return &TStringBigSetKVServiceGetListKeyFromResult{}
}

var TStringBigSetKVServiceGetListKeyFromResult_Success_DEFAULT []TStringKey

func (p *TStringBigSetKVServiceGetListKeyFromResult) GetSuccess() []TStringKey {
  return p.Success
}
func (p *TStringBigSetKVServiceGetListKeyFromResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TStringBigSetKVServiceGetListKeyFromResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TStringBigSetKVServiceGetListKeyFromResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]TStringKey, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
var _elem148 TStringKey
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := TStringKey(v)
    _elem148 = temp
}
    p.Success = append(p.Success, _elem148)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TStringBigSetKVServiceGetListKeyFromResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getListKeyFrom_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TStringBigSetKVServiceGetListKeyFromResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRING, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TStringBigSetKVServiceGetListKeyFromResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TStringBigSetKVServiceGetListKeyFromResult(%+v)", *p)
}


type TBSBigValueService interface {}

type TBSBigValueServiceClient struct {
  c thrift.TClient
}

func NewTBSBigValueServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *TBSBigValueServiceClient {
  return &TBSBigValueServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewTBSBigValueServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *TBSBigValueServiceClient {
  return &TBSBigValueServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewTBSBigValueServiceClient(c thrift.TClient) *TBSBigValueServiceClient {
  return &TBSBigValueServiceClient{
    c: c,
  }
}

func (p *TBSBigValueServiceClient) Client_() thrift.TClient {
  return p.c
}
type TBSBigValueServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler TBSBigValueService
}

func (p *TBSBigValueServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *TBSBigValueServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *TBSBigValueServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewTBSBigValueServiceProcessor(handler TBSBigValueService) *TBSBigValueServiceProcessor {

  self203 := &TBSBigValueServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
return self203
}

func (p *TBSBigValueServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x204 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x204.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush(ctx)
  return false, x204

}


// HELPER FUNCTIONS AND STRUCTURES


type TIBSDataService interface {
  // Parameters:
  //  - BigsetID
  //  - Item
  PutItem(ctx context.Context, bigsetID TKey, item *TItem) (r *TPutItemResult_, err error)
  // Parameters:
  //  - BigsetID
  //  - ItemKey
  RemoveItem(ctx context.Context, bigsetID TKey, itemKey TItemKey) (r bool, err error)
  // Parameters:
  //  - BigsetID
  //  - ItemKey
  Existed(ctx context.Context, bigsetID TKey, itemKey TItemKey) (r *TExistedResult_, err error)
  // Parameters:
  //  - BigsetID
  //  - ItemKey
  GetItem(ctx context.Context, bigsetID TKey, itemKey TItemKey) (r *TItemResult_, err error)
  // Parameters:
  //  - BigsetID
  //  - FromPos
  //  - Count
  GetSlice(ctx context.Context, bigsetID TKey, fromPos int32, count int32) (r *TItemSetResult_, err error)
  // Parameters:
  //  - BigsetID
  //  - FromKey
  //  - Count
  GetSliceFromItem(ctx context.Context, bigsetID TKey, fromKey TItemKey, count int32) (r *TItemSetResult_, err error)
  // Parameters:
  //  - BigsetID
  //  - FromPos
  //  - Count
  GetSliceR(ctx context.Context, bigsetID TKey, fromPos int32, count int32) (r *TItemSetResult_, err error)
  // Parameters:
  //  - BigsetID
  //  - FromKey
  //  - Count
  GetSliceFromItemR(ctx context.Context, bigsetID TKey, fromKey TItemKey, count int32) (r *TItemSetResult_, err error)
  // Parameters:
  //  - BigsetID
  //  - StartKey
  //  - EndKey
  RangeQuery(ctx context.Context, bigsetID TKey, startKey TItemKey, endKey TItemKey) (r *TItemSetResult_, err error)
  // Parameters:
  //  - BigsetID
  //  - SetData
  BulkLoad(ctx context.Context, bigsetID TKey, setData *TItemSet) (r bool, err error)
  // Parameters:
  //  - BigsetID
  //  - SetData
  //  - GetAddedItems
  //  - GetReplacedItems
  MultiPut(ctx context.Context, bigsetID TKey, setData *TItemSet, getAddedItems bool, getReplacedItems bool) (r *TMultiPutItemResult_, err error)
  // Parameters:
  //  - BigsetID
  GetTotalCount(ctx context.Context, bigsetID TKey) (r int64, err error)
  // Parameters:
  //  - BigsetID
  RemoveAll(ctx context.Context, bigsetID TKey) (r int64, err error)
}

type TIBSDataServiceClient struct {
  c thrift.TClient
}

func NewTIBSDataServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *TIBSDataServiceClient {
  return &TIBSDataServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewTIBSDataServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *TIBSDataServiceClient {
  return &TIBSDataServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewTIBSDataServiceClient(c thrift.TClient) *TIBSDataServiceClient {
  return &TIBSDataServiceClient{
    c: c,
  }
}

func (p *TIBSDataServiceClient) Client_() thrift.TClient {
  return p.c
}
// Parameters:
//  - BigsetID
//  - Item
func (p *TIBSDataServiceClient) PutItem(ctx context.Context, bigsetID TKey, item *TItem) (r *TPutItemResult_, err error) {
  var _args205 TIBSDataServicePutItemArgs
  _args205.BigsetID = bigsetID
  _args205.Item = item
  var _result206 TIBSDataServicePutItemResult
  if err = p.Client_().Call(ctx, "putItem", &_args205, &_result206); err != nil {
    return
  }
  return _result206.GetSuccess(), nil
}

// Parameters:
//  - BigsetID
//  - ItemKey
func (p *TIBSDataServiceClient) RemoveItem(ctx context.Context, bigsetID TKey, itemKey TItemKey) (r bool, err error) {
  var _args207 TIBSDataServiceRemoveItemArgs
  _args207.BigsetID = bigsetID
  _args207.ItemKey = itemKey
  var _result208 TIBSDataServiceRemoveItemResult
  if err = p.Client_().Call(ctx, "removeItem", &_args207, &_result208); err != nil {
    return
  }
  return _result208.GetSuccess(), nil
}

// Parameters:
//  - BigsetID
//  - ItemKey
func (p *TIBSDataServiceClient) Existed(ctx context.Context, bigsetID TKey, itemKey TItemKey) (r *TExistedResult_, err error) {
  var _args209 TIBSDataServiceExistedArgs
  _args209.BigsetID = bigsetID
  _args209.ItemKey = itemKey
  var _result210 TIBSDataServiceExistedResult
  if err = p.Client_().Call(ctx, "existed", &_args209, &_result210); err != nil {
    return
  }
  return _result210.GetSuccess(), nil
}

// Parameters:
//  - BigsetID
//  - ItemKey
func (p *TIBSDataServiceClient) GetItem(ctx context.Context, bigsetID TKey, itemKey TItemKey) (r *TItemResult_, err error) {
  var _args211 TIBSDataServiceGetItemArgs
  _args211.BigsetID = bigsetID
  _args211.ItemKey = itemKey
  var _result212 TIBSDataServiceGetItemResult
  if err = p.Client_().Call(ctx, "getItem", &_args211, &_result212); err != nil {
    return
  }
  return _result212.GetSuccess(), nil
}

// Parameters:
//  - BigsetID
//  - FromPos
//  - Count
func (p *TIBSDataServiceClient) GetSlice(ctx context.Context, bigsetID TKey, fromPos int32, count int32) (r *TItemSetResult_, err error) {
  var _args213 TIBSDataServiceGetSliceArgs
  _args213.BigsetID = bigsetID
  _args213.FromPos = fromPos
  _args213.Count = count
  var _result214 TIBSDataServiceGetSliceResult
  if err = p.Client_().Call(ctx, "getSlice", &_args213, &_result214); err != nil {
    return
  }
  return _result214.GetSuccess(), nil
}

// Parameters:
//  - BigsetID
//  - FromKey
//  - Count
func (p *TIBSDataServiceClient) GetSliceFromItem(ctx context.Context, bigsetID TKey, fromKey TItemKey, count int32) (r *TItemSetResult_, err error) {
  var _args215 TIBSDataServiceGetSliceFromItemArgs
  _args215.BigsetID = bigsetID
  _args215.FromKey = fromKey
  _args215.Count = count
  var _result216 TIBSDataServiceGetSliceFromItemResult
  if err = p.Client_().Call(ctx, "getSliceFromItem", &_args215, &_result216); err != nil {
    return
  }
  return _result216.GetSuccess(), nil
}

// Parameters:
//  - BigsetID
//  - FromPos
//  - Count
func (p *TIBSDataServiceClient) GetSliceR(ctx context.Context, bigsetID TKey, fromPos int32, count int32) (r *TItemSetResult_, err error) {
  var _args217 TIBSDataServiceGetSliceRArgs
  _args217.BigsetID = bigsetID
  _args217.FromPos = fromPos
  _args217.Count = count
  var _result218 TIBSDataServiceGetSliceRResult
  if err = p.Client_().Call(ctx, "getSliceR", &_args217, &_result218); err != nil {
    return
  }
  return _result218.GetSuccess(), nil
}

// Parameters:
//  - BigsetID
//  - FromKey
//  - Count
func (p *TIBSDataServiceClient) GetSliceFromItemR(ctx context.Context, bigsetID TKey, fromKey TItemKey, count int32) (r *TItemSetResult_, err error) {
  var _args219 TIBSDataServiceGetSliceFromItemRArgs
  _args219.BigsetID = bigsetID
  _args219.FromKey = fromKey
  _args219.Count = count
  var _result220 TIBSDataServiceGetSliceFromItemRResult
  if err = p.Client_().Call(ctx, "getSliceFromItemR", &_args219, &_result220); err != nil {
    return
  }
  return _result220.GetSuccess(), nil
}

// Parameters:
//  - BigsetID
//  - StartKey
//  - EndKey
func (p *TIBSDataServiceClient) RangeQuery(ctx context.Context, bigsetID TKey, startKey TItemKey, endKey TItemKey) (r *TItemSetResult_, err error) {
  var _args221 TIBSDataServiceRangeQueryArgs
  _args221.BigsetID = bigsetID
  _args221.StartKey = startKey
  _args221.EndKey = endKey
  var _result222 TIBSDataServiceRangeQueryResult
  if err = p.Client_().Call(ctx, "rangeQuery", &_args221, &_result222); err != nil {
    return
  }
  return _result222.GetSuccess(), nil
}

// Parameters:
//  - BigsetID
//  - SetData
func (p *TIBSDataServiceClient) BulkLoad(ctx context.Context, bigsetID TKey, setData *TItemSet) (r bool, err error) {
  var _args223 TIBSDataServiceBulkLoadArgs
  _args223.BigsetID = bigsetID
  _args223.SetData = setData
  var _result224 TIBSDataServiceBulkLoadResult
  if err = p.Client_().Call(ctx, "bulkLoad", &_args223, &_result224); err != nil {
    return
  }
  return _result224.GetSuccess(), nil
}

// Parameters:
//  - BigsetID
//  - SetData
//  - GetAddedItems
//  - GetReplacedItems
func (p *TIBSDataServiceClient) MultiPut(ctx context.Context, bigsetID TKey, setData *TItemSet, getAddedItems bool, getReplacedItems bool) (r *TMultiPutItemResult_, err error) {
  var _args225 TIBSDataServiceMultiPutArgs
  _args225.BigsetID = bigsetID
  _args225.SetData = setData
  _args225.GetAddedItems = getAddedItems
  _args225.GetReplacedItems = getReplacedItems
  var _result226 TIBSDataServiceMultiPutResult
  if err = p.Client_().Call(ctx, "multiPut", &_args225, &_result226); err != nil {
    return
  }
  return _result226.GetSuccess(), nil
}

// Parameters:
//  - BigsetID
func (p *TIBSDataServiceClient) GetTotalCount(ctx context.Context, bigsetID TKey) (r int64, err error) {
  var _args227 TIBSDataServiceGetTotalCountArgs
  _args227.BigsetID = bigsetID
  var _result228 TIBSDataServiceGetTotalCountResult
  if err = p.Client_().Call(ctx, "getTotalCount", &_args227, &_result228); err != nil {
    return
  }
  return _result228.GetSuccess(), nil
}

// Parameters:
//  - BigsetID
func (p *TIBSDataServiceClient) RemoveAll(ctx context.Context, bigsetID TKey) (r int64, err error) {
  var _args229 TIBSDataServiceRemoveAllArgs
  _args229.BigsetID = bigsetID
  var _result230 TIBSDataServiceRemoveAllResult
  if err = p.Client_().Call(ctx, "removeAll", &_args229, &_result230); err != nil {
    return
  }
  return _result230.GetSuccess(), nil
}

type TIBSDataServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler TIBSDataService
}

func (p *TIBSDataServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *TIBSDataServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *TIBSDataServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewTIBSDataServiceProcessor(handler TIBSDataService) *TIBSDataServiceProcessor {

  self231 := &TIBSDataServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self231.processorMap["putItem"] = &tIBSDataServiceProcessorPutItem{handler:handler}
  self231.processorMap["removeItem"] = &tIBSDataServiceProcessorRemoveItem{handler:handler}
  self231.processorMap["existed"] = &tIBSDataServiceProcessorExisted{handler:handler}
  self231.processorMap["getItem"] = &tIBSDataServiceProcessorGetItem{handler:handler}
  self231.processorMap["getSlice"] = &tIBSDataServiceProcessorGetSlice{handler:handler}
  self231.processorMap["getSliceFromItem"] = &tIBSDataServiceProcessorGetSliceFromItem{handler:handler}
  self231.processorMap["getSliceR"] = &tIBSDataServiceProcessorGetSliceR{handler:handler}
  self231.processorMap["getSliceFromItemR"] = &tIBSDataServiceProcessorGetSliceFromItemR{handler:handler}
  self231.processorMap["rangeQuery"] = &tIBSDataServiceProcessorRangeQuery{handler:handler}
  self231.processorMap["bulkLoad"] = &tIBSDataServiceProcessorBulkLoad{handler:handler}
  self231.processorMap["multiPut"] = &tIBSDataServiceProcessorMultiPut{handler:handler}
  self231.processorMap["getTotalCount"] = &tIBSDataServiceProcessorGetTotalCount{handler:handler}
  self231.processorMap["removeAll"] = &tIBSDataServiceProcessorRemoveAll{handler:handler}
return self231
}

func (p *TIBSDataServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x232 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x232.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush(ctx)
  return false, x232

}

type tIBSDataServiceProcessorPutItem struct {
  handler TIBSDataService
}

func (p *tIBSDataServiceProcessorPutItem) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TIBSDataServicePutItemArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("putItem", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TIBSDataServicePutItemResult{}
var retval *TPutItemResult_
  var err2 error
  if retval, err2 = p.handler.PutItem(ctx, args.BigsetID, args.Item); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing putItem: " + err2.Error())
    oprot.WriteMessageBegin("putItem", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("putItem", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tIBSDataServiceProcessorRemoveItem struct {
  handler TIBSDataService
}

func (p *tIBSDataServiceProcessorRemoveItem) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TIBSDataServiceRemoveItemArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("removeItem", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TIBSDataServiceRemoveItemResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.RemoveItem(ctx, args.BigsetID, args.ItemKey); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing removeItem: " + err2.Error())
    oprot.WriteMessageBegin("removeItem", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("removeItem", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tIBSDataServiceProcessorExisted struct {
  handler TIBSDataService
}

func (p *tIBSDataServiceProcessorExisted) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TIBSDataServiceExistedArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("existed", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TIBSDataServiceExistedResult{}
var retval *TExistedResult_
  var err2 error
  if retval, err2 = p.handler.Existed(ctx, args.BigsetID, args.ItemKey); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing existed: " + err2.Error())
    oprot.WriteMessageBegin("existed", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("existed", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tIBSDataServiceProcessorGetItem struct {
  handler TIBSDataService
}

func (p *tIBSDataServiceProcessorGetItem) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TIBSDataServiceGetItemArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getItem", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TIBSDataServiceGetItemResult{}
var retval *TItemResult_
  var err2 error
  if retval, err2 = p.handler.GetItem(ctx, args.BigsetID, args.ItemKey); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getItem: " + err2.Error())
    oprot.WriteMessageBegin("getItem", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getItem", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tIBSDataServiceProcessorGetSlice struct {
  handler TIBSDataService
}

func (p *tIBSDataServiceProcessorGetSlice) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TIBSDataServiceGetSliceArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getSlice", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TIBSDataServiceGetSliceResult{}
var retval *TItemSetResult_
  var err2 error
  if retval, err2 = p.handler.GetSlice(ctx, args.BigsetID, args.FromPos, args.Count); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getSlice: " + err2.Error())
    oprot.WriteMessageBegin("getSlice", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getSlice", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tIBSDataServiceProcessorGetSliceFromItem struct {
  handler TIBSDataService
}

func (p *tIBSDataServiceProcessorGetSliceFromItem) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TIBSDataServiceGetSliceFromItemArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getSliceFromItem", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TIBSDataServiceGetSliceFromItemResult{}
var retval *TItemSetResult_
  var err2 error
  if retval, err2 = p.handler.GetSliceFromItem(ctx, args.BigsetID, args.FromKey, args.Count); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getSliceFromItem: " + err2.Error())
    oprot.WriteMessageBegin("getSliceFromItem", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getSliceFromItem", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tIBSDataServiceProcessorGetSliceR struct {
  handler TIBSDataService
}

func (p *tIBSDataServiceProcessorGetSliceR) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TIBSDataServiceGetSliceRArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getSliceR", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TIBSDataServiceGetSliceRResult{}
var retval *TItemSetResult_
  var err2 error
  if retval, err2 = p.handler.GetSliceR(ctx, args.BigsetID, args.FromPos, args.Count); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getSliceR: " + err2.Error())
    oprot.WriteMessageBegin("getSliceR", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getSliceR", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tIBSDataServiceProcessorGetSliceFromItemR struct {
  handler TIBSDataService
}

func (p *tIBSDataServiceProcessorGetSliceFromItemR) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TIBSDataServiceGetSliceFromItemRArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getSliceFromItemR", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TIBSDataServiceGetSliceFromItemRResult{}
var retval *TItemSetResult_
  var err2 error
  if retval, err2 = p.handler.GetSliceFromItemR(ctx, args.BigsetID, args.FromKey, args.Count); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getSliceFromItemR: " + err2.Error())
    oprot.WriteMessageBegin("getSliceFromItemR", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getSliceFromItemR", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tIBSDataServiceProcessorRangeQuery struct {
  handler TIBSDataService
}

func (p *tIBSDataServiceProcessorRangeQuery) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TIBSDataServiceRangeQueryArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("rangeQuery", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TIBSDataServiceRangeQueryResult{}
var retval *TItemSetResult_
  var err2 error
  if retval, err2 = p.handler.RangeQuery(ctx, args.BigsetID, args.StartKey, args.EndKey); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing rangeQuery: " + err2.Error())
    oprot.WriteMessageBegin("rangeQuery", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("rangeQuery", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tIBSDataServiceProcessorBulkLoad struct {
  handler TIBSDataService
}

func (p *tIBSDataServiceProcessorBulkLoad) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TIBSDataServiceBulkLoadArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("bulkLoad", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TIBSDataServiceBulkLoadResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.BulkLoad(ctx, args.BigsetID, args.SetData); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing bulkLoad: " + err2.Error())
    oprot.WriteMessageBegin("bulkLoad", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("bulkLoad", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tIBSDataServiceProcessorMultiPut struct {
  handler TIBSDataService
}

func (p *tIBSDataServiceProcessorMultiPut) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TIBSDataServiceMultiPutArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("multiPut", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TIBSDataServiceMultiPutResult{}
var retval *TMultiPutItemResult_
  var err2 error
  if retval, err2 = p.handler.MultiPut(ctx, args.BigsetID, args.SetData, args.GetAddedItems, args.GetReplacedItems); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing multiPut: " + err2.Error())
    oprot.WriteMessageBegin("multiPut", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("multiPut", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tIBSDataServiceProcessorGetTotalCount struct {
  handler TIBSDataService
}

func (p *tIBSDataServiceProcessorGetTotalCount) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TIBSDataServiceGetTotalCountArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getTotalCount", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TIBSDataServiceGetTotalCountResult{}
var retval int64
  var err2 error
  if retval, err2 = p.handler.GetTotalCount(ctx, args.BigsetID); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getTotalCount: " + err2.Error())
    oprot.WriteMessageBegin("getTotalCount", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("getTotalCount", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tIBSDataServiceProcessorRemoveAll struct {
  handler TIBSDataService
}

func (p *tIBSDataServiceProcessorRemoveAll) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TIBSDataServiceRemoveAllArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("removeAll", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TIBSDataServiceRemoveAllResult{}
var retval int64
  var err2 error
  if retval, err2 = p.handler.RemoveAll(ctx, args.BigsetID); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing removeAll: " + err2.Error())
    oprot.WriteMessageBegin("removeAll", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("removeAll", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - BigsetID
//  - Item
type TIBSDataServicePutItemArgs struct {
  BigsetID TKey `thrift:"bigsetID,1" db:"bigsetID" json:"bigsetID"`
  Item *TItem `thrift:"item,2" db:"item" json:"item"`
}

func NewTIBSDataServicePutItemArgs() *TIBSDataServicePutItemArgs {
  return &TIBSDataServicePutItemArgs{}
}


func (p *TIBSDataServicePutItemArgs) GetBigsetID() TKey {
  return p.BigsetID
}
var TIBSDataServicePutItemArgs_Item_DEFAULT *TItem
func (p *TIBSDataServicePutItemArgs) GetItem() *TItem {
  if !p.IsSetItem() {
    return TIBSDataServicePutItemArgs_Item_DEFAULT
  }
return p.Item
}
func (p *TIBSDataServicePutItemArgs) IsSetItem() bool {
  return p.Item != nil
}

func (p *TIBSDataServicePutItemArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TIBSDataServicePutItemArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TKey(v)
  p.BigsetID = temp
}
  return nil
}

func (p *TIBSDataServicePutItemArgs)  ReadField2(iprot thrift.TProtocol) error {
  p.Item = &TItem{}
  if err := p.Item.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Item), err)
  }
  return nil
}

func (p *TIBSDataServicePutItemArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("putItem_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TIBSDataServicePutItemArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("bigsetID", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:bigsetID: ", p), err) }
  if err := oprot.WriteI64(int64(p.BigsetID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.bigsetID (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:bigsetID: ", p), err) }
  return err
}

func (p *TIBSDataServicePutItemArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("item", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:item: ", p), err) }
  if err := p.Item.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Item), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:item: ", p), err) }
  return err
}

func (p *TIBSDataServicePutItemArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TIBSDataServicePutItemArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TIBSDataServicePutItemResult struct {
  Success *TPutItemResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTIBSDataServicePutItemResult() *TIBSDataServicePutItemResult {
  return &TIBSDataServicePutItemResult{}
}

var TIBSDataServicePutItemResult_Success_DEFAULT *TPutItemResult_
func (p *TIBSDataServicePutItemResult) GetSuccess() *TPutItemResult_ {
  if !p.IsSetSuccess() {
    return TIBSDataServicePutItemResult_Success_DEFAULT
  }
return p.Success
}
func (p *TIBSDataServicePutItemResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TIBSDataServicePutItemResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TIBSDataServicePutItemResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TPutItemResult_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TIBSDataServicePutItemResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("putItem_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TIBSDataServicePutItemResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TIBSDataServicePutItemResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TIBSDataServicePutItemResult(%+v)", *p)
}

// Attributes:
//  - BigsetID
//  - ItemKey
type TIBSDataServiceRemoveItemArgs struct {
  BigsetID TKey `thrift:"bigsetID,1" db:"bigsetID" json:"bigsetID"`
  ItemKey TItemKey `thrift:"itemKey,2" db:"itemKey" json:"itemKey"`
}

func NewTIBSDataServiceRemoveItemArgs() *TIBSDataServiceRemoveItemArgs {
  return &TIBSDataServiceRemoveItemArgs{}
}


func (p *TIBSDataServiceRemoveItemArgs) GetBigsetID() TKey {
  return p.BigsetID
}

func (p *TIBSDataServiceRemoveItemArgs) GetItemKey() TItemKey {
  return p.ItemKey
}
func (p *TIBSDataServiceRemoveItemArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TIBSDataServiceRemoveItemArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TKey(v)
  p.BigsetID = temp
}
  return nil
}

func (p *TIBSDataServiceRemoveItemArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := TItemKey(v)
  p.ItemKey = temp
}
  return nil
}

func (p *TIBSDataServiceRemoveItemArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("removeItem_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TIBSDataServiceRemoveItemArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("bigsetID", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:bigsetID: ", p), err) }
  if err := oprot.WriteI64(int64(p.BigsetID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.bigsetID (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:bigsetID: ", p), err) }
  return err
}

func (p *TIBSDataServiceRemoveItemArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("itemKey", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:itemKey: ", p), err) }
  if err := oprot.WriteBinary(p.ItemKey); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.itemKey (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:itemKey: ", p), err) }
  return err
}

func (p *TIBSDataServiceRemoveItemArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TIBSDataServiceRemoveItemArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TIBSDataServiceRemoveItemResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTIBSDataServiceRemoveItemResult() *TIBSDataServiceRemoveItemResult {
  return &TIBSDataServiceRemoveItemResult{}
}

var TIBSDataServiceRemoveItemResult_Success_DEFAULT bool
func (p *TIBSDataServiceRemoveItemResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return TIBSDataServiceRemoveItemResult_Success_DEFAULT
  }
return *p.Success
}
func (p *TIBSDataServiceRemoveItemResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TIBSDataServiceRemoveItemResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TIBSDataServiceRemoveItemResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *TIBSDataServiceRemoveItemResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("removeItem_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TIBSDataServiceRemoveItemResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TIBSDataServiceRemoveItemResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TIBSDataServiceRemoveItemResult(%+v)", *p)
}

// Attributes:
//  - BigsetID
//  - ItemKey
type TIBSDataServiceExistedArgs struct {
  BigsetID TKey `thrift:"bigsetID,1" db:"bigsetID" json:"bigsetID"`
  ItemKey TItemKey `thrift:"itemKey,2" db:"itemKey" json:"itemKey"`
}

func NewTIBSDataServiceExistedArgs() *TIBSDataServiceExistedArgs {
  return &TIBSDataServiceExistedArgs{}
}


func (p *TIBSDataServiceExistedArgs) GetBigsetID() TKey {
  return p.BigsetID
}

func (p *TIBSDataServiceExistedArgs) GetItemKey() TItemKey {
  return p.ItemKey
}
func (p *TIBSDataServiceExistedArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TIBSDataServiceExistedArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TKey(v)
  p.BigsetID = temp
}
  return nil
}

func (p *TIBSDataServiceExistedArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := TItemKey(v)
  p.ItemKey = temp
}
  return nil
}

func (p *TIBSDataServiceExistedArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("existed_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TIBSDataServiceExistedArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("bigsetID", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:bigsetID: ", p), err) }
  if err := oprot.WriteI64(int64(p.BigsetID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.bigsetID (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:bigsetID: ", p), err) }
  return err
}

func (p *TIBSDataServiceExistedArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("itemKey", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:itemKey: ", p), err) }
  if err := oprot.WriteBinary(p.ItemKey); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.itemKey (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:itemKey: ", p), err) }
  return err
}

func (p *TIBSDataServiceExistedArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TIBSDataServiceExistedArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TIBSDataServiceExistedResult struct {
  Success *TExistedResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTIBSDataServiceExistedResult() *TIBSDataServiceExistedResult {
  return &TIBSDataServiceExistedResult{}
}

var TIBSDataServiceExistedResult_Success_DEFAULT *TExistedResult_
func (p *TIBSDataServiceExistedResult) GetSuccess() *TExistedResult_ {
  if !p.IsSetSuccess() {
    return TIBSDataServiceExistedResult_Success_DEFAULT
  }
return p.Success
}
func (p *TIBSDataServiceExistedResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TIBSDataServiceExistedResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TIBSDataServiceExistedResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TExistedResult_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TIBSDataServiceExistedResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("existed_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TIBSDataServiceExistedResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TIBSDataServiceExistedResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TIBSDataServiceExistedResult(%+v)", *p)
}

// Attributes:
//  - BigsetID
//  - ItemKey
type TIBSDataServiceGetItemArgs struct {
  BigsetID TKey `thrift:"bigsetID,1" db:"bigsetID" json:"bigsetID"`
  ItemKey TItemKey `thrift:"itemKey,2" db:"itemKey" json:"itemKey"`
}

func NewTIBSDataServiceGetItemArgs() *TIBSDataServiceGetItemArgs {
  return &TIBSDataServiceGetItemArgs{}
}


func (p *TIBSDataServiceGetItemArgs) GetBigsetID() TKey {
  return p.BigsetID
}

func (p *TIBSDataServiceGetItemArgs) GetItemKey() TItemKey {
  return p.ItemKey
}
func (p *TIBSDataServiceGetItemArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TIBSDataServiceGetItemArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TKey(v)
  p.BigsetID = temp
}
  return nil
}

func (p *TIBSDataServiceGetItemArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := TItemKey(v)
  p.ItemKey = temp
}
  return nil
}

func (p *TIBSDataServiceGetItemArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getItem_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TIBSDataServiceGetItemArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("bigsetID", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:bigsetID: ", p), err) }
  if err := oprot.WriteI64(int64(p.BigsetID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.bigsetID (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:bigsetID: ", p), err) }
  return err
}

func (p *TIBSDataServiceGetItemArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("itemKey", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:itemKey: ", p), err) }
  if err := oprot.WriteBinary(p.ItemKey); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.itemKey (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:itemKey: ", p), err) }
  return err
}

func (p *TIBSDataServiceGetItemArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TIBSDataServiceGetItemArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TIBSDataServiceGetItemResult struct {
  Success *TItemResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTIBSDataServiceGetItemResult() *TIBSDataServiceGetItemResult {
  return &TIBSDataServiceGetItemResult{}
}

var TIBSDataServiceGetItemResult_Success_DEFAULT *TItemResult_
func (p *TIBSDataServiceGetItemResult) GetSuccess() *TItemResult_ {
  if !p.IsSetSuccess() {
    return TIBSDataServiceGetItemResult_Success_DEFAULT
  }
return p.Success
}
func (p *TIBSDataServiceGetItemResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TIBSDataServiceGetItemResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TIBSDataServiceGetItemResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TItemResult_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TIBSDataServiceGetItemResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getItem_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TIBSDataServiceGetItemResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TIBSDataServiceGetItemResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TIBSDataServiceGetItemResult(%+v)", *p)
}

// Attributes:
//  - BigsetID
//  - FromPos
//  - Count
type TIBSDataServiceGetSliceArgs struct {
  BigsetID TKey `thrift:"bigsetID,1" db:"bigsetID" json:"bigsetID"`
  FromPos int32 `thrift:"fromPos,2" db:"fromPos" json:"fromPos"`
  Count int32 `thrift:"count,3" db:"count" json:"count"`
}

func NewTIBSDataServiceGetSliceArgs() *TIBSDataServiceGetSliceArgs {
  return &TIBSDataServiceGetSliceArgs{}
}


func (p *TIBSDataServiceGetSliceArgs) GetBigsetID() TKey {
  return p.BigsetID
}

func (p *TIBSDataServiceGetSliceArgs) GetFromPos() int32 {
  return p.FromPos
}

func (p *TIBSDataServiceGetSliceArgs) GetCount() int32 {
  return p.Count
}
func (p *TIBSDataServiceGetSliceArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TIBSDataServiceGetSliceArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TKey(v)
  p.BigsetID = temp
}
  return nil
}

func (p *TIBSDataServiceGetSliceArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.FromPos = v
}
  return nil
}

func (p *TIBSDataServiceGetSliceArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Count = v
}
  return nil
}

func (p *TIBSDataServiceGetSliceArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getSlice_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TIBSDataServiceGetSliceArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("bigsetID", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:bigsetID: ", p), err) }
  if err := oprot.WriteI64(int64(p.BigsetID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.bigsetID (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:bigsetID: ", p), err) }
  return err
}

func (p *TIBSDataServiceGetSliceArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("fromPos", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:fromPos: ", p), err) }
  if err := oprot.WriteI32(int32(p.FromPos)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.fromPos (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:fromPos: ", p), err) }
  return err
}

func (p *TIBSDataServiceGetSliceArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("count", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:count: ", p), err) }
  if err := oprot.WriteI32(int32(p.Count)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.count (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:count: ", p), err) }
  return err
}

func (p *TIBSDataServiceGetSliceArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TIBSDataServiceGetSliceArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TIBSDataServiceGetSliceResult struct {
  Success *TItemSetResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTIBSDataServiceGetSliceResult() *TIBSDataServiceGetSliceResult {
  return &TIBSDataServiceGetSliceResult{}
}

var TIBSDataServiceGetSliceResult_Success_DEFAULT *TItemSetResult_
func (p *TIBSDataServiceGetSliceResult) GetSuccess() *TItemSetResult_ {
  if !p.IsSetSuccess() {
    return TIBSDataServiceGetSliceResult_Success_DEFAULT
  }
return p.Success
}
func (p *TIBSDataServiceGetSliceResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TIBSDataServiceGetSliceResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TIBSDataServiceGetSliceResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TItemSetResult_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TIBSDataServiceGetSliceResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getSlice_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TIBSDataServiceGetSliceResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TIBSDataServiceGetSliceResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TIBSDataServiceGetSliceResult(%+v)", *p)
}

// Attributes:
//  - BigsetID
//  - FromKey
//  - Count
type TIBSDataServiceGetSliceFromItemArgs struct {
  BigsetID TKey `thrift:"bigsetID,1" db:"bigsetID" json:"bigsetID"`
  FromKey TItemKey `thrift:"fromKey,2" db:"fromKey" json:"fromKey"`
  Count int32 `thrift:"count,3" db:"count" json:"count"`
}

func NewTIBSDataServiceGetSliceFromItemArgs() *TIBSDataServiceGetSliceFromItemArgs {
  return &TIBSDataServiceGetSliceFromItemArgs{}
}


func (p *TIBSDataServiceGetSliceFromItemArgs) GetBigsetID() TKey {
  return p.BigsetID
}

func (p *TIBSDataServiceGetSliceFromItemArgs) GetFromKey() TItemKey {
  return p.FromKey
}

func (p *TIBSDataServiceGetSliceFromItemArgs) GetCount() int32 {
  return p.Count
}
func (p *TIBSDataServiceGetSliceFromItemArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TIBSDataServiceGetSliceFromItemArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TKey(v)
  p.BigsetID = temp
}
  return nil
}

func (p *TIBSDataServiceGetSliceFromItemArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := TItemKey(v)
  p.FromKey = temp
}
  return nil
}

func (p *TIBSDataServiceGetSliceFromItemArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Count = v
}
  return nil
}

func (p *TIBSDataServiceGetSliceFromItemArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getSliceFromItem_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TIBSDataServiceGetSliceFromItemArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("bigsetID", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:bigsetID: ", p), err) }
  if err := oprot.WriteI64(int64(p.BigsetID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.bigsetID (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:bigsetID: ", p), err) }
  return err
}

func (p *TIBSDataServiceGetSliceFromItemArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("fromKey", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:fromKey: ", p), err) }
  if err := oprot.WriteBinary(p.FromKey); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.fromKey (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:fromKey: ", p), err) }
  return err
}

func (p *TIBSDataServiceGetSliceFromItemArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("count", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:count: ", p), err) }
  if err := oprot.WriteI32(int32(p.Count)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.count (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:count: ", p), err) }
  return err
}

func (p *TIBSDataServiceGetSliceFromItemArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TIBSDataServiceGetSliceFromItemArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TIBSDataServiceGetSliceFromItemResult struct {
  Success *TItemSetResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTIBSDataServiceGetSliceFromItemResult() *TIBSDataServiceGetSliceFromItemResult {
  return &TIBSDataServiceGetSliceFromItemResult{}
}

var TIBSDataServiceGetSliceFromItemResult_Success_DEFAULT *TItemSetResult_
func (p *TIBSDataServiceGetSliceFromItemResult) GetSuccess() *TItemSetResult_ {
  if !p.IsSetSuccess() {
    return TIBSDataServiceGetSliceFromItemResult_Success_DEFAULT
  }
return p.Success
}
func (p *TIBSDataServiceGetSliceFromItemResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TIBSDataServiceGetSliceFromItemResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TIBSDataServiceGetSliceFromItemResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TItemSetResult_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TIBSDataServiceGetSliceFromItemResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getSliceFromItem_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TIBSDataServiceGetSliceFromItemResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TIBSDataServiceGetSliceFromItemResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TIBSDataServiceGetSliceFromItemResult(%+v)", *p)
}

// Attributes:
//  - BigsetID
//  - FromPos
//  - Count
type TIBSDataServiceGetSliceRArgs struct {
  BigsetID TKey `thrift:"bigsetID,1" db:"bigsetID" json:"bigsetID"`
  FromPos int32 `thrift:"fromPos,2" db:"fromPos" json:"fromPos"`
  Count int32 `thrift:"count,3" db:"count" json:"count"`
}

func NewTIBSDataServiceGetSliceRArgs() *TIBSDataServiceGetSliceRArgs {
  return &TIBSDataServiceGetSliceRArgs{}
}


func (p *TIBSDataServiceGetSliceRArgs) GetBigsetID() TKey {
  return p.BigsetID
}

func (p *TIBSDataServiceGetSliceRArgs) GetFromPos() int32 {
  return p.FromPos
}

func (p *TIBSDataServiceGetSliceRArgs) GetCount() int32 {
  return p.Count
}
func (p *TIBSDataServiceGetSliceRArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TIBSDataServiceGetSliceRArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TKey(v)
  p.BigsetID = temp
}
  return nil
}

func (p *TIBSDataServiceGetSliceRArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.FromPos = v
}
  return nil
}

func (p *TIBSDataServiceGetSliceRArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Count = v
}
  return nil
}

func (p *TIBSDataServiceGetSliceRArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getSliceR_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TIBSDataServiceGetSliceRArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("bigsetID", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:bigsetID: ", p), err) }
  if err := oprot.WriteI64(int64(p.BigsetID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.bigsetID (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:bigsetID: ", p), err) }
  return err
}

func (p *TIBSDataServiceGetSliceRArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("fromPos", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:fromPos: ", p), err) }
  if err := oprot.WriteI32(int32(p.FromPos)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.fromPos (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:fromPos: ", p), err) }
  return err
}

func (p *TIBSDataServiceGetSliceRArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("count", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:count: ", p), err) }
  if err := oprot.WriteI32(int32(p.Count)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.count (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:count: ", p), err) }
  return err
}

func (p *TIBSDataServiceGetSliceRArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TIBSDataServiceGetSliceRArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TIBSDataServiceGetSliceRResult struct {
  Success *TItemSetResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTIBSDataServiceGetSliceRResult() *TIBSDataServiceGetSliceRResult {
  return &TIBSDataServiceGetSliceRResult{}
}

var TIBSDataServiceGetSliceRResult_Success_DEFAULT *TItemSetResult_
func (p *TIBSDataServiceGetSliceRResult) GetSuccess() *TItemSetResult_ {
  if !p.IsSetSuccess() {
    return TIBSDataServiceGetSliceRResult_Success_DEFAULT
  }
return p.Success
}
func (p *TIBSDataServiceGetSliceRResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TIBSDataServiceGetSliceRResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TIBSDataServiceGetSliceRResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TItemSetResult_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TIBSDataServiceGetSliceRResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getSliceR_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TIBSDataServiceGetSliceRResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TIBSDataServiceGetSliceRResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TIBSDataServiceGetSliceRResult(%+v)", *p)
}

// Attributes:
//  - BigsetID
//  - FromKey
//  - Count
type TIBSDataServiceGetSliceFromItemRArgs struct {
  BigsetID TKey `thrift:"bigsetID,1" db:"bigsetID" json:"bigsetID"`
  FromKey TItemKey `thrift:"fromKey,2" db:"fromKey" json:"fromKey"`
  Count int32 `thrift:"count,3" db:"count" json:"count"`
}

func NewTIBSDataServiceGetSliceFromItemRArgs() *TIBSDataServiceGetSliceFromItemRArgs {
  return &TIBSDataServiceGetSliceFromItemRArgs{}
}


func (p *TIBSDataServiceGetSliceFromItemRArgs) GetBigsetID() TKey {
  return p.BigsetID
}

func (p *TIBSDataServiceGetSliceFromItemRArgs) GetFromKey() TItemKey {
  return p.FromKey
}

func (p *TIBSDataServiceGetSliceFromItemRArgs) GetCount() int32 {
  return p.Count
}
func (p *TIBSDataServiceGetSliceFromItemRArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TIBSDataServiceGetSliceFromItemRArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TKey(v)
  p.BigsetID = temp
}
  return nil
}

func (p *TIBSDataServiceGetSliceFromItemRArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := TItemKey(v)
  p.FromKey = temp
}
  return nil
}

func (p *TIBSDataServiceGetSliceFromItemRArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Count = v
}
  return nil
}

func (p *TIBSDataServiceGetSliceFromItemRArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getSliceFromItemR_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TIBSDataServiceGetSliceFromItemRArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("bigsetID", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:bigsetID: ", p), err) }
  if err := oprot.WriteI64(int64(p.BigsetID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.bigsetID (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:bigsetID: ", p), err) }
  return err
}

func (p *TIBSDataServiceGetSliceFromItemRArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("fromKey", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:fromKey: ", p), err) }
  if err := oprot.WriteBinary(p.FromKey); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.fromKey (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:fromKey: ", p), err) }
  return err
}

func (p *TIBSDataServiceGetSliceFromItemRArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("count", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:count: ", p), err) }
  if err := oprot.WriteI32(int32(p.Count)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.count (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:count: ", p), err) }
  return err
}

func (p *TIBSDataServiceGetSliceFromItemRArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TIBSDataServiceGetSliceFromItemRArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TIBSDataServiceGetSliceFromItemRResult struct {
  Success *TItemSetResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTIBSDataServiceGetSliceFromItemRResult() *TIBSDataServiceGetSliceFromItemRResult {
  return &TIBSDataServiceGetSliceFromItemRResult{}
}

var TIBSDataServiceGetSliceFromItemRResult_Success_DEFAULT *TItemSetResult_
func (p *TIBSDataServiceGetSliceFromItemRResult) GetSuccess() *TItemSetResult_ {
  if !p.IsSetSuccess() {
    return TIBSDataServiceGetSliceFromItemRResult_Success_DEFAULT
  }
return p.Success
}
func (p *TIBSDataServiceGetSliceFromItemRResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TIBSDataServiceGetSliceFromItemRResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TIBSDataServiceGetSliceFromItemRResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TItemSetResult_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TIBSDataServiceGetSliceFromItemRResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getSliceFromItemR_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TIBSDataServiceGetSliceFromItemRResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TIBSDataServiceGetSliceFromItemRResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TIBSDataServiceGetSliceFromItemRResult(%+v)", *p)
}

// Attributes:
//  - BigsetID
//  - StartKey
//  - EndKey
type TIBSDataServiceRangeQueryArgs struct {
  BigsetID TKey `thrift:"bigsetID,1" db:"bigsetID" json:"bigsetID"`
  StartKey TItemKey `thrift:"startKey,2" db:"startKey" json:"startKey"`
  EndKey TItemKey `thrift:"endKey,3" db:"endKey" json:"endKey"`
}

func NewTIBSDataServiceRangeQueryArgs() *TIBSDataServiceRangeQueryArgs {
  return &TIBSDataServiceRangeQueryArgs{}
}


func (p *TIBSDataServiceRangeQueryArgs) GetBigsetID() TKey {
  return p.BigsetID
}

func (p *TIBSDataServiceRangeQueryArgs) GetStartKey() TItemKey {
  return p.StartKey
}

func (p *TIBSDataServiceRangeQueryArgs) GetEndKey() TItemKey {
  return p.EndKey
}
func (p *TIBSDataServiceRangeQueryArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TIBSDataServiceRangeQueryArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TKey(v)
  p.BigsetID = temp
}
  return nil
}

func (p *TIBSDataServiceRangeQueryArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := TItemKey(v)
  p.StartKey = temp
}
  return nil
}

func (p *TIBSDataServiceRangeQueryArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := TItemKey(v)
  p.EndKey = temp
}
  return nil
}

func (p *TIBSDataServiceRangeQueryArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("rangeQuery_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TIBSDataServiceRangeQueryArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("bigsetID", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:bigsetID: ", p), err) }
  if err := oprot.WriteI64(int64(p.BigsetID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.bigsetID (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:bigsetID: ", p), err) }
  return err
}

func (p *TIBSDataServiceRangeQueryArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("startKey", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:startKey: ", p), err) }
  if err := oprot.WriteBinary(p.StartKey); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.startKey (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:startKey: ", p), err) }
  return err
}

func (p *TIBSDataServiceRangeQueryArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("endKey", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:endKey: ", p), err) }
  if err := oprot.WriteBinary(p.EndKey); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.endKey (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:endKey: ", p), err) }
  return err
}

func (p *TIBSDataServiceRangeQueryArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TIBSDataServiceRangeQueryArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TIBSDataServiceRangeQueryResult struct {
  Success *TItemSetResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTIBSDataServiceRangeQueryResult() *TIBSDataServiceRangeQueryResult {
  return &TIBSDataServiceRangeQueryResult{}
}

var TIBSDataServiceRangeQueryResult_Success_DEFAULT *TItemSetResult_
func (p *TIBSDataServiceRangeQueryResult) GetSuccess() *TItemSetResult_ {
  if !p.IsSetSuccess() {
    return TIBSDataServiceRangeQueryResult_Success_DEFAULT
  }
return p.Success
}
func (p *TIBSDataServiceRangeQueryResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TIBSDataServiceRangeQueryResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TIBSDataServiceRangeQueryResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TItemSetResult_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TIBSDataServiceRangeQueryResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("rangeQuery_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TIBSDataServiceRangeQueryResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TIBSDataServiceRangeQueryResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TIBSDataServiceRangeQueryResult(%+v)", *p)
}

// Attributes:
//  - BigsetID
//  - SetData
type TIBSDataServiceBulkLoadArgs struct {
  BigsetID TKey `thrift:"bigsetID,1" db:"bigsetID" json:"bigsetID"`
  SetData *TItemSet `thrift:"setData,2" db:"setData" json:"setData"`
}

func NewTIBSDataServiceBulkLoadArgs() *TIBSDataServiceBulkLoadArgs {
  return &TIBSDataServiceBulkLoadArgs{}
}


func (p *TIBSDataServiceBulkLoadArgs) GetBigsetID() TKey {
  return p.BigsetID
}
var TIBSDataServiceBulkLoadArgs_SetData_DEFAULT *TItemSet
func (p *TIBSDataServiceBulkLoadArgs) GetSetData() *TItemSet {
  if !p.IsSetSetData() {
    return TIBSDataServiceBulkLoadArgs_SetData_DEFAULT
  }
return p.SetData
}
func (p *TIBSDataServiceBulkLoadArgs) IsSetSetData() bool {
  return p.SetData != nil
}

func (p *TIBSDataServiceBulkLoadArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TIBSDataServiceBulkLoadArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TKey(v)
  p.BigsetID = temp
}
  return nil
}

func (p *TIBSDataServiceBulkLoadArgs)  ReadField2(iprot thrift.TProtocol) error {
  p.SetData = &TItemSet{}
  if err := p.SetData.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SetData), err)
  }
  return nil
}

func (p *TIBSDataServiceBulkLoadArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("bulkLoad_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TIBSDataServiceBulkLoadArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("bigsetID", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:bigsetID: ", p), err) }
  if err := oprot.WriteI64(int64(p.BigsetID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.bigsetID (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:bigsetID: ", p), err) }
  return err
}

func (p *TIBSDataServiceBulkLoadArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("setData", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:setData: ", p), err) }
  if err := p.SetData.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SetData), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:setData: ", p), err) }
  return err
}

func (p *TIBSDataServiceBulkLoadArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TIBSDataServiceBulkLoadArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TIBSDataServiceBulkLoadResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTIBSDataServiceBulkLoadResult() *TIBSDataServiceBulkLoadResult {
  return &TIBSDataServiceBulkLoadResult{}
}

var TIBSDataServiceBulkLoadResult_Success_DEFAULT bool
func (p *TIBSDataServiceBulkLoadResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return TIBSDataServiceBulkLoadResult_Success_DEFAULT
  }
return *p.Success
}
func (p *TIBSDataServiceBulkLoadResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TIBSDataServiceBulkLoadResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TIBSDataServiceBulkLoadResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *TIBSDataServiceBulkLoadResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("bulkLoad_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TIBSDataServiceBulkLoadResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TIBSDataServiceBulkLoadResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TIBSDataServiceBulkLoadResult(%+v)", *p)
}

// Attributes:
//  - BigsetID
//  - SetData
//  - GetAddedItems
//  - GetReplacedItems
type TIBSDataServiceMultiPutArgs struct {
  BigsetID TKey `thrift:"bigsetID,1" db:"bigsetID" json:"bigsetID"`
  SetData *TItemSet `thrift:"setData,2" db:"setData" json:"setData"`
  GetAddedItems bool `thrift:"getAddedItems,3" db:"getAddedItems" json:"getAddedItems"`
  GetReplacedItems bool `thrift:"getReplacedItems,4" db:"getReplacedItems" json:"getReplacedItems"`
}

func NewTIBSDataServiceMultiPutArgs() *TIBSDataServiceMultiPutArgs {
  return &TIBSDataServiceMultiPutArgs{}
}


func (p *TIBSDataServiceMultiPutArgs) GetBigsetID() TKey {
  return p.BigsetID
}
var TIBSDataServiceMultiPutArgs_SetData_DEFAULT *TItemSet
func (p *TIBSDataServiceMultiPutArgs) GetSetData() *TItemSet {
  if !p.IsSetSetData() {
    return TIBSDataServiceMultiPutArgs_SetData_DEFAULT
  }
return p.SetData
}

func (p *TIBSDataServiceMultiPutArgs) GetGetAddedItems() bool {
  return p.GetAddedItems
}

func (p *TIBSDataServiceMultiPutArgs) GetGetReplacedItems() bool {
  return p.GetReplacedItems
}
func (p *TIBSDataServiceMultiPutArgs) IsSetSetData() bool {
  return p.SetData != nil
}

func (p *TIBSDataServiceMultiPutArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TIBSDataServiceMultiPutArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TKey(v)
  p.BigsetID = temp
}
  return nil
}

func (p *TIBSDataServiceMultiPutArgs)  ReadField2(iprot thrift.TProtocol) error {
  p.SetData = &TItemSet{}
  if err := p.SetData.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SetData), err)
  }
  return nil
}

func (p *TIBSDataServiceMultiPutArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.GetAddedItems = v
}
  return nil
}

func (p *TIBSDataServiceMultiPutArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.GetReplacedItems = v
}
  return nil
}

func (p *TIBSDataServiceMultiPutArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("multiPut_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TIBSDataServiceMultiPutArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("bigsetID", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:bigsetID: ", p), err) }
  if err := oprot.WriteI64(int64(p.BigsetID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.bigsetID (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:bigsetID: ", p), err) }
  return err
}

func (p *TIBSDataServiceMultiPutArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("setData", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:setData: ", p), err) }
  if err := p.SetData.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SetData), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:setData: ", p), err) }
  return err
}

func (p *TIBSDataServiceMultiPutArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("getAddedItems", thrift.BOOL, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:getAddedItems: ", p), err) }
  if err := oprot.WriteBool(bool(p.GetAddedItems)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.getAddedItems (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:getAddedItems: ", p), err) }
  return err
}

func (p *TIBSDataServiceMultiPutArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("getReplacedItems", thrift.BOOL, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:getReplacedItems: ", p), err) }
  if err := oprot.WriteBool(bool(p.GetReplacedItems)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.getReplacedItems (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:getReplacedItems: ", p), err) }
  return err
}

func (p *TIBSDataServiceMultiPutArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TIBSDataServiceMultiPutArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TIBSDataServiceMultiPutResult struct {
  Success *TMultiPutItemResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTIBSDataServiceMultiPutResult() *TIBSDataServiceMultiPutResult {
  return &TIBSDataServiceMultiPutResult{}
}

var TIBSDataServiceMultiPutResult_Success_DEFAULT *TMultiPutItemResult_
func (p *TIBSDataServiceMultiPutResult) GetSuccess() *TMultiPutItemResult_ {
  if !p.IsSetSuccess() {
    return TIBSDataServiceMultiPutResult_Success_DEFAULT
  }
return p.Success
}
func (p *TIBSDataServiceMultiPutResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TIBSDataServiceMultiPutResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TIBSDataServiceMultiPutResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TMultiPutItemResult_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TIBSDataServiceMultiPutResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("multiPut_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TIBSDataServiceMultiPutResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TIBSDataServiceMultiPutResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TIBSDataServiceMultiPutResult(%+v)", *p)
}

// Attributes:
//  - BigsetID
type TIBSDataServiceGetTotalCountArgs struct {
  BigsetID TKey `thrift:"bigsetID,1" db:"bigsetID" json:"bigsetID"`
}

func NewTIBSDataServiceGetTotalCountArgs() *TIBSDataServiceGetTotalCountArgs {
  return &TIBSDataServiceGetTotalCountArgs{}
}


func (p *TIBSDataServiceGetTotalCountArgs) GetBigsetID() TKey {
  return p.BigsetID
}
func (p *TIBSDataServiceGetTotalCountArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TIBSDataServiceGetTotalCountArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TKey(v)
  p.BigsetID = temp
}
  return nil
}

func (p *TIBSDataServiceGetTotalCountArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getTotalCount_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TIBSDataServiceGetTotalCountArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("bigsetID", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:bigsetID: ", p), err) }
  if err := oprot.WriteI64(int64(p.BigsetID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.bigsetID (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:bigsetID: ", p), err) }
  return err
}

func (p *TIBSDataServiceGetTotalCountArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TIBSDataServiceGetTotalCountArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TIBSDataServiceGetTotalCountResult struct {
  Success *int64 `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTIBSDataServiceGetTotalCountResult() *TIBSDataServiceGetTotalCountResult {
  return &TIBSDataServiceGetTotalCountResult{}
}

var TIBSDataServiceGetTotalCountResult_Success_DEFAULT int64
func (p *TIBSDataServiceGetTotalCountResult) GetSuccess() int64 {
  if !p.IsSetSuccess() {
    return TIBSDataServiceGetTotalCountResult_Success_DEFAULT
  }
return *p.Success
}
func (p *TIBSDataServiceGetTotalCountResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TIBSDataServiceGetTotalCountResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TIBSDataServiceGetTotalCountResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *TIBSDataServiceGetTotalCountResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getTotalCount_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TIBSDataServiceGetTotalCountResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.I64, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI64(int64(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TIBSDataServiceGetTotalCountResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TIBSDataServiceGetTotalCountResult(%+v)", *p)
}

// Attributes:
//  - BigsetID
type TIBSDataServiceRemoveAllArgs struct {
  BigsetID TKey `thrift:"bigsetID,1" db:"bigsetID" json:"bigsetID"`
}

func NewTIBSDataServiceRemoveAllArgs() *TIBSDataServiceRemoveAllArgs {
  return &TIBSDataServiceRemoveAllArgs{}
}


func (p *TIBSDataServiceRemoveAllArgs) GetBigsetID() TKey {
  return p.BigsetID
}
func (p *TIBSDataServiceRemoveAllArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TIBSDataServiceRemoveAllArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TKey(v)
  p.BigsetID = temp
}
  return nil
}

func (p *TIBSDataServiceRemoveAllArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("removeAll_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TIBSDataServiceRemoveAllArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("bigsetID", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:bigsetID: ", p), err) }
  if err := oprot.WriteI64(int64(p.BigsetID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.bigsetID (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:bigsetID: ", p), err) }
  return err
}

func (p *TIBSDataServiceRemoveAllArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TIBSDataServiceRemoveAllArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TIBSDataServiceRemoveAllResult struct {
  Success *int64 `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTIBSDataServiceRemoveAllResult() *TIBSDataServiceRemoveAllResult {
  return &TIBSDataServiceRemoveAllResult{}
}

var TIBSDataServiceRemoveAllResult_Success_DEFAULT int64
func (p *TIBSDataServiceRemoveAllResult) GetSuccess() int64 {
  if !p.IsSetSuccess() {
    return TIBSDataServiceRemoveAllResult_Success_DEFAULT
  }
return *p.Success
}
func (p *TIBSDataServiceRemoveAllResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TIBSDataServiceRemoveAllResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TIBSDataServiceRemoveAllResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *TIBSDataServiceRemoveAllResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("removeAll_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TIBSDataServiceRemoveAllResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.I64, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI64(int64(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TIBSDataServiceRemoveAllResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TIBSDataServiceRemoveAllResult(%+v)", *p)
}


type BSNotificationPool interface {
  // Parameters:
  //  - RootID
  //  - SplitInfo
  NeedSplit(ctx context.Context, rootID TContainerKey, splitInfo *TNeedSplitInfo) (err error)
  // Parameters:
  //  - RootID
  SplitInfoUpdated(ctx context.Context, rootID TContainerKey) (err error)
  GetJob(ctx context.Context) (r *SplitJob, err error)
}

type BSNotificationPoolClient struct {
  c thrift.TClient
}

func NewBSNotificationPoolClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *BSNotificationPoolClient {
  return &BSNotificationPoolClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewBSNotificationPoolClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *BSNotificationPoolClient {
  return &BSNotificationPoolClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewBSNotificationPoolClient(c thrift.TClient) *BSNotificationPoolClient {
  return &BSNotificationPoolClient{
    c: c,
  }
}

func (p *BSNotificationPoolClient) Client_() thrift.TClient {
  return p.c
}
// Parameters:
//  - RootID
//  - SplitInfo
func (p *BSNotificationPoolClient) NeedSplit(ctx context.Context, rootID TContainerKey, splitInfo *TNeedSplitInfo) (err error) {
  var _args279 BSNotificationPoolNeedSplitArgs
  _args279.RootID = rootID
  _args279.SplitInfo = splitInfo
  var _result280 BSNotificationPoolNeedSplitResult
  if err = p.Client_().Call(ctx, "needSplit", &_args279, &_result280); err != nil {
    return
  }
  return nil
}

// Parameters:
//  - RootID
func (p *BSNotificationPoolClient) SplitInfoUpdated(ctx context.Context, rootID TContainerKey) (err error) {
  var _args281 BSNotificationPoolSplitInfoUpdatedArgs
  _args281.RootID = rootID
  var _result282 BSNotificationPoolSplitInfoUpdatedResult
  if err = p.Client_().Call(ctx, "splitInfoUpdated", &_args281, &_result282); err != nil {
    return
  }
  return nil
}

func (p *BSNotificationPoolClient) GetJob(ctx context.Context) (r *SplitJob, err error) {
  var _args283 BSNotificationPoolGetJobArgs
  var _result284 BSNotificationPoolGetJobResult
  if err = p.Client_().Call(ctx, "getJob", &_args283, &_result284); err != nil {
    return
  }
  return _result284.GetSuccess(), nil
}

type BSNotificationPoolProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler BSNotificationPool
}

func (p *BSNotificationPoolProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *BSNotificationPoolProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *BSNotificationPoolProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewBSNotificationPoolProcessor(handler BSNotificationPool) *BSNotificationPoolProcessor {

  self285 := &BSNotificationPoolProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self285.processorMap["needSplit"] = &bSNotificationPoolProcessorNeedSplit{handler:handler}
  self285.processorMap["splitInfoUpdated"] = &bSNotificationPoolProcessorSplitInfoUpdated{handler:handler}
  self285.processorMap["getJob"] = &bSNotificationPoolProcessorGetJob{handler:handler}
return self285
}

func (p *BSNotificationPoolProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x286 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x286.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush(ctx)
  return false, x286

}

type bSNotificationPoolProcessorNeedSplit struct {
  handler BSNotificationPool
}

func (p *bSNotificationPoolProcessorNeedSplit) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := BSNotificationPoolNeedSplitArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("needSplit", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := BSNotificationPoolNeedSplitResult{}
  var err2 error
  if err2 = p.handler.NeedSplit(ctx, args.RootID, args.SplitInfo); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing needSplit: " + err2.Error())
    oprot.WriteMessageBegin("needSplit", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  if err2 = oprot.WriteMessageBegin("needSplit", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type bSNotificationPoolProcessorSplitInfoUpdated struct {
  handler BSNotificationPool
}

func (p *bSNotificationPoolProcessorSplitInfoUpdated) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := BSNotificationPoolSplitInfoUpdatedArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("splitInfoUpdated", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := BSNotificationPoolSplitInfoUpdatedResult{}
  var err2 error
  if err2 = p.handler.SplitInfoUpdated(ctx, args.RootID); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing splitInfoUpdated: " + err2.Error())
    oprot.WriteMessageBegin("splitInfoUpdated", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  if err2 = oprot.WriteMessageBegin("splitInfoUpdated", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type bSNotificationPoolProcessorGetJob struct {
  handler BSNotificationPool
}

func (p *bSNotificationPoolProcessorGetJob) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := BSNotificationPoolGetJobArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getJob", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := BSNotificationPoolGetJobResult{}
var retval *SplitJob
  var err2 error
  if retval, err2 = p.handler.GetJob(ctx); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getJob: " + err2.Error())
    oprot.WriteMessageBegin("getJob", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getJob", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - RootID
//  - SplitInfo
type BSNotificationPoolNeedSplitArgs struct {
  RootID TContainerKey `thrift:"rootID,1" db:"rootID" json:"rootID"`
  SplitInfo *TNeedSplitInfo `thrift:"splitInfo,2" db:"splitInfo" json:"splitInfo"`
}

func NewBSNotificationPoolNeedSplitArgs() *BSNotificationPoolNeedSplitArgs {
  return &BSNotificationPoolNeedSplitArgs{}
}


func (p *BSNotificationPoolNeedSplitArgs) GetRootID() TContainerKey {
  return p.RootID
}
var BSNotificationPoolNeedSplitArgs_SplitInfo_DEFAULT *TNeedSplitInfo
func (p *BSNotificationPoolNeedSplitArgs) GetSplitInfo() *TNeedSplitInfo {
  if !p.IsSetSplitInfo() {
    return BSNotificationPoolNeedSplitArgs_SplitInfo_DEFAULT
  }
return p.SplitInfo
}
func (p *BSNotificationPoolNeedSplitArgs) IsSetSplitInfo() bool {
  return p.SplitInfo != nil
}

func (p *BSNotificationPoolNeedSplitArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BSNotificationPoolNeedSplitArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TContainerKey(v)
  p.RootID = temp
}
  return nil
}

func (p *BSNotificationPoolNeedSplitArgs)  ReadField2(iprot thrift.TProtocol) error {
  p.SplitInfo = &TNeedSplitInfo{}
  if err := p.SplitInfo.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SplitInfo), err)
  }
  return nil
}

func (p *BSNotificationPoolNeedSplitArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("needSplit_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BSNotificationPoolNeedSplitArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("rootID", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rootID: ", p), err) }
  if err := oprot.WriteI64(int64(p.RootID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.rootID (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rootID: ", p), err) }
  return err
}

func (p *BSNotificationPoolNeedSplitArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("splitInfo", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:splitInfo: ", p), err) }
  if err := p.SplitInfo.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SplitInfo), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:splitInfo: ", p), err) }
  return err
}

func (p *BSNotificationPoolNeedSplitArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BSNotificationPoolNeedSplitArgs(%+v)", *p)
}

type BSNotificationPoolNeedSplitResult struct {
}

func NewBSNotificationPoolNeedSplitResult() *BSNotificationPoolNeedSplitResult {
  return &BSNotificationPoolNeedSplitResult{}
}

func (p *BSNotificationPoolNeedSplitResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BSNotificationPoolNeedSplitResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("needSplit_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BSNotificationPoolNeedSplitResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BSNotificationPoolNeedSplitResult(%+v)", *p)
}

// Attributes:
//  - RootID
type BSNotificationPoolSplitInfoUpdatedArgs struct {
  RootID TContainerKey `thrift:"rootID,1" db:"rootID" json:"rootID"`
}

func NewBSNotificationPoolSplitInfoUpdatedArgs() *BSNotificationPoolSplitInfoUpdatedArgs {
  return &BSNotificationPoolSplitInfoUpdatedArgs{}
}


func (p *BSNotificationPoolSplitInfoUpdatedArgs) GetRootID() TContainerKey {
  return p.RootID
}
func (p *BSNotificationPoolSplitInfoUpdatedArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BSNotificationPoolSplitInfoUpdatedArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TContainerKey(v)
  p.RootID = temp
}
  return nil
}

func (p *BSNotificationPoolSplitInfoUpdatedArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("splitInfoUpdated_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BSNotificationPoolSplitInfoUpdatedArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("rootID", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rootID: ", p), err) }
  if err := oprot.WriteI64(int64(p.RootID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.rootID (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rootID: ", p), err) }
  return err
}

func (p *BSNotificationPoolSplitInfoUpdatedArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BSNotificationPoolSplitInfoUpdatedArgs(%+v)", *p)
}

type BSNotificationPoolSplitInfoUpdatedResult struct {
}

func NewBSNotificationPoolSplitInfoUpdatedResult() *BSNotificationPoolSplitInfoUpdatedResult {
  return &BSNotificationPoolSplitInfoUpdatedResult{}
}

func (p *BSNotificationPoolSplitInfoUpdatedResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BSNotificationPoolSplitInfoUpdatedResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("splitInfoUpdated_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BSNotificationPoolSplitInfoUpdatedResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BSNotificationPoolSplitInfoUpdatedResult(%+v)", *p)
}

type BSNotificationPoolGetJobArgs struct {
}

func NewBSNotificationPoolGetJobArgs() *BSNotificationPoolGetJobArgs {
  return &BSNotificationPoolGetJobArgs{}
}

func (p *BSNotificationPoolGetJobArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BSNotificationPoolGetJobArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getJob_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BSNotificationPoolGetJobArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BSNotificationPoolGetJobArgs(%+v)", *p)
}

// Attributes:
//  - Success
type BSNotificationPoolGetJobResult struct {
  Success *SplitJob `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewBSNotificationPoolGetJobResult() *BSNotificationPoolGetJobResult {
  return &BSNotificationPoolGetJobResult{}
}

var BSNotificationPoolGetJobResult_Success_DEFAULT *SplitJob
func (p *BSNotificationPoolGetJobResult) GetSuccess() *SplitJob {
  if !p.IsSetSuccess() {
    return BSNotificationPoolGetJobResult_Success_DEFAULT
  }
return p.Success
}
func (p *BSNotificationPoolGetJobResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *BSNotificationPoolGetJobResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BSNotificationPoolGetJobResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &SplitJob{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *BSNotificationPoolGetJobResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getJob_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BSNotificationPoolGetJobResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *BSNotificationPoolGetJobResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BSNotificationPoolGetJobResult(%+v)", *p)
}


type TCluserOrdinatorService interface {
  // Parameters:
  //  - Key
  RemoveCache(ctx context.Context, key TContainerKey) (err error)
  // Parameters:
  //  - Key
  //  - Value
  Put(ctx context.Context, key []byte, value []byte) (r int32, err error)
}

type TCluserOrdinatorServiceClient struct {
  c thrift.TClient
}

func NewTCluserOrdinatorServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *TCluserOrdinatorServiceClient {
  return &TCluserOrdinatorServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewTCluserOrdinatorServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *TCluserOrdinatorServiceClient {
  return &TCluserOrdinatorServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewTCluserOrdinatorServiceClient(c thrift.TClient) *TCluserOrdinatorServiceClient {
  return &TCluserOrdinatorServiceClient{
    c: c,
  }
}

func (p *TCluserOrdinatorServiceClient) Client_() thrift.TClient {
  return p.c
}
// Parameters:
//  - Key
func (p *TCluserOrdinatorServiceClient) RemoveCache(ctx context.Context, key TContainerKey) (err error) {
  var _args295 TCluserOrdinatorServiceRemoveCacheArgs
  _args295.Key = key
  if err := p.Client_().Call(ctx, "removeCache", &_args295, nil); err != nil {
    return err
  }
  return nil
}

// Parameters:
//  - Key
//  - Value
func (p *TCluserOrdinatorServiceClient) Put(ctx context.Context, key []byte, value []byte) (r int32, err error) {
  var _args296 TCluserOrdinatorServicePutArgs
  _args296.Key = key
  _args296.Value = value
  var _result297 TCluserOrdinatorServicePutResult
  if err = p.Client_().Call(ctx, "put", &_args296, &_result297); err != nil {
    return
  }
  return _result297.GetSuccess(), nil
}

type TCluserOrdinatorServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler TCluserOrdinatorService
}

func (p *TCluserOrdinatorServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *TCluserOrdinatorServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *TCluserOrdinatorServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewTCluserOrdinatorServiceProcessor(handler TCluserOrdinatorService) *TCluserOrdinatorServiceProcessor {

  self298 := &TCluserOrdinatorServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self298.processorMap["removeCache"] = &tCluserOrdinatorServiceProcessorRemoveCache{handler:handler}
  self298.processorMap["put"] = &tCluserOrdinatorServiceProcessorPut{handler:handler}
return self298
}

func (p *TCluserOrdinatorServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x299 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x299.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush(ctx)
  return false, x299

}

type tCluserOrdinatorServiceProcessorRemoveCache struct {
  handler TCluserOrdinatorService
}

func (p *tCluserOrdinatorServiceProcessorRemoveCache) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TCluserOrdinatorServiceRemoveCacheArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    return false, err
  }

  iprot.ReadMessageEnd()
  var err2 error
  if err2 = p.handler.RemoveCache(ctx, args.Key); err2 != nil {
    return true, err2
  }
  return true, nil
}

type tCluserOrdinatorServiceProcessorPut struct {
  handler TCluserOrdinatorService
}

func (p *tCluserOrdinatorServiceProcessorPut) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TCluserOrdinatorServicePutArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("put", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TCluserOrdinatorServicePutResult{}
var retval int32
  var err2 error
  if retval, err2 = p.handler.Put(ctx, args.Key, args.Value); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing put: " + err2.Error())
    oprot.WriteMessageBegin("put", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("put", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Key
type TCluserOrdinatorServiceRemoveCacheArgs struct {
  Key TContainerKey `thrift:"key,1" db:"key" json:"key"`
}

func NewTCluserOrdinatorServiceRemoveCacheArgs() *TCluserOrdinatorServiceRemoveCacheArgs {
  return &TCluserOrdinatorServiceRemoveCacheArgs{}
}


func (p *TCluserOrdinatorServiceRemoveCacheArgs) GetKey() TContainerKey {
  return p.Key
}
func (p *TCluserOrdinatorServiceRemoveCacheArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TCluserOrdinatorServiceRemoveCacheArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TContainerKey(v)
  p.Key = temp
}
  return nil
}

func (p *TCluserOrdinatorServiceRemoveCacheArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("removeCache_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TCluserOrdinatorServiceRemoveCacheArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("key", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:key: ", p), err) }
  if err := oprot.WriteI64(int64(p.Key)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.key (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:key: ", p), err) }
  return err
}

func (p *TCluserOrdinatorServiceRemoveCacheArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TCluserOrdinatorServiceRemoveCacheArgs(%+v)", *p)
}

// Attributes:
//  - Key
//  - Value
type TCluserOrdinatorServicePutArgs struct {
  Key []byte `thrift:"key,1" db:"key" json:"key"`
  Value []byte `thrift:"value,2" db:"value" json:"value"`
}

func NewTCluserOrdinatorServicePutArgs() *TCluserOrdinatorServicePutArgs {
  return &TCluserOrdinatorServicePutArgs{}
}


func (p *TCluserOrdinatorServicePutArgs) GetKey() []byte {
  return p.Key
}

func (p *TCluserOrdinatorServicePutArgs) GetValue() []byte {
  return p.Value
}
func (p *TCluserOrdinatorServicePutArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TCluserOrdinatorServicePutArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Key = v
}
  return nil
}

func (p *TCluserOrdinatorServicePutArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Value = v
}
  return nil
}

func (p *TCluserOrdinatorServicePutArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("put_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TCluserOrdinatorServicePutArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("key", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:key: ", p), err) }
  if err := oprot.WriteBinary(p.Key); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.key (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:key: ", p), err) }
  return err
}

func (p *TCluserOrdinatorServicePutArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("value", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:value: ", p), err) }
  if err := oprot.WriteBinary(p.Value); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.value (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:value: ", p), err) }
  return err
}

func (p *TCluserOrdinatorServicePutArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TCluserOrdinatorServicePutArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TCluserOrdinatorServicePutResult struct {
  Success *int32 `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTCluserOrdinatorServicePutResult() *TCluserOrdinatorServicePutResult {
  return &TCluserOrdinatorServicePutResult{}
}

var TCluserOrdinatorServicePutResult_Success_DEFAULT int32
func (p *TCluserOrdinatorServicePutResult) GetSuccess() int32 {
  if !p.IsSetSuccess() {
    return TCluserOrdinatorServicePutResult_Success_DEFAULT
  }
return *p.Success
}
func (p *TCluserOrdinatorServicePutResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TCluserOrdinatorServicePutResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TCluserOrdinatorServicePutResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *TCluserOrdinatorServicePutResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("put_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TCluserOrdinatorServicePutResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TCluserOrdinatorServicePutResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TCluserOrdinatorServicePutResult(%+v)", *p)
}


