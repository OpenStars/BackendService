// Autogenerated by Thrift Compiler (0.13.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package idgen

import(
	"bytes"
	"context"
	"reflect"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

// Attributes:
//  - Error
//  - Message
type InvalidOperation struct {
  Error int32 `thrift:"error,1" db:"error" json:"error"`
  Message string `thrift:"message,2" db:"message" json:"message"`
}

func NewInvalidOperation() *InvalidOperation {
  return &InvalidOperation{}
}


func (p *InvalidOperation) GetError() int32 {
  return p.Error
}

func (p *InvalidOperation) GetMessage() string {
  return p.Message
}
func (p *InvalidOperation) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *InvalidOperation)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Error = v
}
  return nil
}

func (p *InvalidOperation)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Message = v
}
  return nil
}

func (p *InvalidOperation) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("InvalidOperation"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *InvalidOperation) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("error", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:error: ", p), err) }
  if err := oprot.WriteI32(int32(p.Error)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.error (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:error: ", p), err) }
  return err
}

func (p *InvalidOperation) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("message", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:message: ", p), err) }
  if err := oprot.WriteString(string(p.Message)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.message (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:message: ", p), err) }
  return err
}

func (p *InvalidOperation) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("InvalidOperation(%+v)", *p)
}

func (p *InvalidOperation) Error() string {
  return p.String()
}

type TGenerator interface {
  // Parameters:
  //  - GenName
  CreateGenerator(ctx context.Context, genName string) (r int32, err error)
  // Parameters:
  //  - GenName
  RemoveGenerator(ctx context.Context, genName string) (r int32, err error)
  // Parameters:
  //  - GenName
  GetCurrentValue(ctx context.Context, genName string) (r int64, err error)
  // Parameters:
  //  - GenName
  GetValue(ctx context.Context, genName string) (r int64, err error)
  // Parameters:
  //  - GenName
  //  - Step
  GetStepValue(ctx context.Context, genName string, step int64) (r int64, err error)
}

type TGeneratorClient struct {
  c thrift.TClient
}

func NewTGeneratorClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *TGeneratorClient {
  return &TGeneratorClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewTGeneratorClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *TGeneratorClient {
  return &TGeneratorClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewTGeneratorClient(c thrift.TClient) *TGeneratorClient {
  return &TGeneratorClient{
    c: c,
  }
}

func (p *TGeneratorClient) Client_() thrift.TClient {
  return p.c
}
// Parameters:
//  - GenName
func (p *TGeneratorClient) CreateGenerator(ctx context.Context, genName string) (r int32, err error) {
  var _args0 TGeneratorCreateGeneratorArgs
  _args0.GenName = genName
  var _result1 TGeneratorCreateGeneratorResult
  if err = p.Client_().Call(ctx, "createGenerator", &_args0, &_result1); err != nil {
    return
  }
  switch {
  case _result1.Ouch!= nil:
    return r, _result1.Ouch
  }

  return _result1.GetSuccess(), nil
}

// Parameters:
//  - GenName
func (p *TGeneratorClient) RemoveGenerator(ctx context.Context, genName string) (r int32, err error) {
  var _args2 TGeneratorRemoveGeneratorArgs
  _args2.GenName = genName
  var _result3 TGeneratorRemoveGeneratorResult
  if err = p.Client_().Call(ctx, "removeGenerator", &_args2, &_result3); err != nil {
    return
  }
  switch {
  case _result3.Ouch!= nil:
    return r, _result3.Ouch
  }

  return _result3.GetSuccess(), nil
}

// Parameters:
//  - GenName
func (p *TGeneratorClient) GetCurrentValue(ctx context.Context, genName string) (r int64, err error) {
  var _args4 TGeneratorGetCurrentValueArgs
  _args4.GenName = genName
  var _result5 TGeneratorGetCurrentValueResult
  if err = p.Client_().Call(ctx, "getCurrentValue", &_args4, &_result5); err != nil {
    return
  }
  switch {
  case _result5.Ouch!= nil:
    return r, _result5.Ouch
  }

  return _result5.GetSuccess(), nil
}

// Parameters:
//  - GenName
func (p *TGeneratorClient) GetValue(ctx context.Context, genName string) (r int64, err error) {
  var _args6 TGeneratorGetValueArgs
  _args6.GenName = genName
  var _result7 TGeneratorGetValueResult
  if err = p.Client_().Call(ctx, "getValue", &_args6, &_result7); err != nil {
    return
  }
  switch {
  case _result7.Ouch!= nil:
    return r, _result7.Ouch
  }

  return _result7.GetSuccess(), nil
}

// Parameters:
//  - GenName
//  - Step
func (p *TGeneratorClient) GetStepValue(ctx context.Context, genName string, step int64) (r int64, err error) {
  var _args8 TGeneratorGetStepValueArgs
  _args8.GenName = genName
  _args8.Step = step
  var _result9 TGeneratorGetStepValueResult
  if err = p.Client_().Call(ctx, "getStepValue", &_args8, &_result9); err != nil {
    return
  }
  switch {
  case _result9.Ouch!= nil:
    return r, _result9.Ouch
  }

  return _result9.GetSuccess(), nil
}

type TGeneratorProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler TGenerator
}

func (p *TGeneratorProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *TGeneratorProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *TGeneratorProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewTGeneratorProcessor(handler TGenerator) *TGeneratorProcessor {

  self10 := &TGeneratorProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self10.processorMap["createGenerator"] = &tGeneratorProcessorCreateGenerator{handler:handler}
  self10.processorMap["removeGenerator"] = &tGeneratorProcessorRemoveGenerator{handler:handler}
  self10.processorMap["getCurrentValue"] = &tGeneratorProcessorGetCurrentValue{handler:handler}
  self10.processorMap["getValue"] = &tGeneratorProcessorGetValue{handler:handler}
  self10.processorMap["getStepValue"] = &tGeneratorProcessorGetStepValue{handler:handler}
return self10
}

func (p *TGeneratorProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x11 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x11.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush(ctx)
  return false, x11

}

type tGeneratorProcessorCreateGenerator struct {
  handler TGenerator
}

func (p *tGeneratorProcessorCreateGenerator) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TGeneratorCreateGeneratorArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("createGenerator", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TGeneratorCreateGeneratorResult{}
var retval int32
  var err2 error
  if retval, err2 = p.handler.CreateGenerator(ctx, args.GenName); err2 != nil {
  switch v := err2.(type) {
    case *InvalidOperation:
  result.Ouch = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing createGenerator: " + err2.Error())
    oprot.WriteMessageBegin("createGenerator", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("createGenerator", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tGeneratorProcessorRemoveGenerator struct {
  handler TGenerator
}

func (p *tGeneratorProcessorRemoveGenerator) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TGeneratorRemoveGeneratorArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("removeGenerator", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TGeneratorRemoveGeneratorResult{}
var retval int32
  var err2 error
  if retval, err2 = p.handler.RemoveGenerator(ctx, args.GenName); err2 != nil {
  switch v := err2.(type) {
    case *InvalidOperation:
  result.Ouch = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing removeGenerator: " + err2.Error())
    oprot.WriteMessageBegin("removeGenerator", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("removeGenerator", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tGeneratorProcessorGetCurrentValue struct {
  handler TGenerator
}

func (p *tGeneratorProcessorGetCurrentValue) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TGeneratorGetCurrentValueArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getCurrentValue", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TGeneratorGetCurrentValueResult{}
var retval int64
  var err2 error
  if retval, err2 = p.handler.GetCurrentValue(ctx, args.GenName); err2 != nil {
  switch v := err2.(type) {
    case *InvalidOperation:
  result.Ouch = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getCurrentValue: " + err2.Error())
    oprot.WriteMessageBegin("getCurrentValue", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("getCurrentValue", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tGeneratorProcessorGetValue struct {
  handler TGenerator
}

func (p *tGeneratorProcessorGetValue) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TGeneratorGetValueArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getValue", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TGeneratorGetValueResult{}
var retval int64
  var err2 error
  if retval, err2 = p.handler.GetValue(ctx, args.GenName); err2 != nil {
  switch v := err2.(type) {
    case *InvalidOperation:
  result.Ouch = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getValue: " + err2.Error())
    oprot.WriteMessageBegin("getValue", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("getValue", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tGeneratorProcessorGetStepValue struct {
  handler TGenerator
}

func (p *tGeneratorProcessorGetStepValue) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TGeneratorGetStepValueArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getStepValue", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TGeneratorGetStepValueResult{}
var retval int64
  var err2 error
  if retval, err2 = p.handler.GetStepValue(ctx, args.GenName, args.Step); err2 != nil {
  switch v := err2.(type) {
    case *InvalidOperation:
  result.Ouch = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getStepValue: " + err2.Error())
    oprot.WriteMessageBegin("getStepValue", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("getStepValue", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - GenName
type TGeneratorCreateGeneratorArgs struct {
  GenName string `thrift:"genName,1" db:"genName" json:"genName"`
}

func NewTGeneratorCreateGeneratorArgs() *TGeneratorCreateGeneratorArgs {
  return &TGeneratorCreateGeneratorArgs{}
}


func (p *TGeneratorCreateGeneratorArgs) GetGenName() string {
  return p.GenName
}
func (p *TGeneratorCreateGeneratorArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TGeneratorCreateGeneratorArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.GenName = v
}
  return nil
}

func (p *TGeneratorCreateGeneratorArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("createGenerator_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TGeneratorCreateGeneratorArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("genName", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:genName: ", p), err) }
  if err := oprot.WriteString(string(p.GenName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.genName (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:genName: ", p), err) }
  return err
}

func (p *TGeneratorCreateGeneratorArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TGeneratorCreateGeneratorArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ouch
type TGeneratorCreateGeneratorResult struct {
  Success *int32 `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ouch *InvalidOperation `thrift:"ouch,1" db:"ouch" json:"ouch,omitempty"`
}

func NewTGeneratorCreateGeneratorResult() *TGeneratorCreateGeneratorResult {
  return &TGeneratorCreateGeneratorResult{}
}

var TGeneratorCreateGeneratorResult_Success_DEFAULT int32
func (p *TGeneratorCreateGeneratorResult) GetSuccess() int32 {
  if !p.IsSetSuccess() {
    return TGeneratorCreateGeneratorResult_Success_DEFAULT
  }
return *p.Success
}
var TGeneratorCreateGeneratorResult_Ouch_DEFAULT *InvalidOperation
func (p *TGeneratorCreateGeneratorResult) GetOuch() *InvalidOperation {
  if !p.IsSetOuch() {
    return TGeneratorCreateGeneratorResult_Ouch_DEFAULT
  }
return p.Ouch
}
func (p *TGeneratorCreateGeneratorResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TGeneratorCreateGeneratorResult) IsSetOuch() bool {
  return p.Ouch != nil
}

func (p *TGeneratorCreateGeneratorResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TGeneratorCreateGeneratorResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *TGeneratorCreateGeneratorResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ouch = &InvalidOperation{}
  if err := p.Ouch.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ouch), err)
  }
  return nil
}

func (p *TGeneratorCreateGeneratorResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("createGenerator_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TGeneratorCreateGeneratorResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TGeneratorCreateGeneratorResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetOuch() {
    if err := oprot.WriteFieldBegin("ouch", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ouch: ", p), err) }
    if err := p.Ouch.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ouch), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ouch: ", p), err) }
  }
  return err
}

func (p *TGeneratorCreateGeneratorResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TGeneratorCreateGeneratorResult(%+v)", *p)
}

// Attributes:
//  - GenName
type TGeneratorRemoveGeneratorArgs struct {
  GenName string `thrift:"genName,1" db:"genName" json:"genName"`
}

func NewTGeneratorRemoveGeneratorArgs() *TGeneratorRemoveGeneratorArgs {
  return &TGeneratorRemoveGeneratorArgs{}
}


func (p *TGeneratorRemoveGeneratorArgs) GetGenName() string {
  return p.GenName
}
func (p *TGeneratorRemoveGeneratorArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TGeneratorRemoveGeneratorArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.GenName = v
}
  return nil
}

func (p *TGeneratorRemoveGeneratorArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("removeGenerator_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TGeneratorRemoveGeneratorArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("genName", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:genName: ", p), err) }
  if err := oprot.WriteString(string(p.GenName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.genName (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:genName: ", p), err) }
  return err
}

func (p *TGeneratorRemoveGeneratorArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TGeneratorRemoveGeneratorArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ouch
type TGeneratorRemoveGeneratorResult struct {
  Success *int32 `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ouch *InvalidOperation `thrift:"ouch,1" db:"ouch" json:"ouch,omitempty"`
}

func NewTGeneratorRemoveGeneratorResult() *TGeneratorRemoveGeneratorResult {
  return &TGeneratorRemoveGeneratorResult{}
}

var TGeneratorRemoveGeneratorResult_Success_DEFAULT int32
func (p *TGeneratorRemoveGeneratorResult) GetSuccess() int32 {
  if !p.IsSetSuccess() {
    return TGeneratorRemoveGeneratorResult_Success_DEFAULT
  }
return *p.Success
}
var TGeneratorRemoveGeneratorResult_Ouch_DEFAULT *InvalidOperation
func (p *TGeneratorRemoveGeneratorResult) GetOuch() *InvalidOperation {
  if !p.IsSetOuch() {
    return TGeneratorRemoveGeneratorResult_Ouch_DEFAULT
  }
return p.Ouch
}
func (p *TGeneratorRemoveGeneratorResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TGeneratorRemoveGeneratorResult) IsSetOuch() bool {
  return p.Ouch != nil
}

func (p *TGeneratorRemoveGeneratorResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TGeneratorRemoveGeneratorResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *TGeneratorRemoveGeneratorResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ouch = &InvalidOperation{}
  if err := p.Ouch.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ouch), err)
  }
  return nil
}

func (p *TGeneratorRemoveGeneratorResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("removeGenerator_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TGeneratorRemoveGeneratorResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TGeneratorRemoveGeneratorResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetOuch() {
    if err := oprot.WriteFieldBegin("ouch", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ouch: ", p), err) }
    if err := p.Ouch.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ouch), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ouch: ", p), err) }
  }
  return err
}

func (p *TGeneratorRemoveGeneratorResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TGeneratorRemoveGeneratorResult(%+v)", *p)
}

// Attributes:
//  - GenName
type TGeneratorGetCurrentValueArgs struct {
  GenName string `thrift:"genName,1" db:"genName" json:"genName"`
}

func NewTGeneratorGetCurrentValueArgs() *TGeneratorGetCurrentValueArgs {
  return &TGeneratorGetCurrentValueArgs{}
}


func (p *TGeneratorGetCurrentValueArgs) GetGenName() string {
  return p.GenName
}
func (p *TGeneratorGetCurrentValueArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TGeneratorGetCurrentValueArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.GenName = v
}
  return nil
}

func (p *TGeneratorGetCurrentValueArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getCurrentValue_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TGeneratorGetCurrentValueArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("genName", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:genName: ", p), err) }
  if err := oprot.WriteString(string(p.GenName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.genName (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:genName: ", p), err) }
  return err
}

func (p *TGeneratorGetCurrentValueArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TGeneratorGetCurrentValueArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ouch
type TGeneratorGetCurrentValueResult struct {
  Success *int64 `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ouch *InvalidOperation `thrift:"ouch,1" db:"ouch" json:"ouch,omitempty"`
}

func NewTGeneratorGetCurrentValueResult() *TGeneratorGetCurrentValueResult {
  return &TGeneratorGetCurrentValueResult{}
}

var TGeneratorGetCurrentValueResult_Success_DEFAULT int64
func (p *TGeneratorGetCurrentValueResult) GetSuccess() int64 {
  if !p.IsSetSuccess() {
    return TGeneratorGetCurrentValueResult_Success_DEFAULT
  }
return *p.Success
}
var TGeneratorGetCurrentValueResult_Ouch_DEFAULT *InvalidOperation
func (p *TGeneratorGetCurrentValueResult) GetOuch() *InvalidOperation {
  if !p.IsSetOuch() {
    return TGeneratorGetCurrentValueResult_Ouch_DEFAULT
  }
return p.Ouch
}
func (p *TGeneratorGetCurrentValueResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TGeneratorGetCurrentValueResult) IsSetOuch() bool {
  return p.Ouch != nil
}

func (p *TGeneratorGetCurrentValueResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TGeneratorGetCurrentValueResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *TGeneratorGetCurrentValueResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ouch = &InvalidOperation{}
  if err := p.Ouch.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ouch), err)
  }
  return nil
}

func (p *TGeneratorGetCurrentValueResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getCurrentValue_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TGeneratorGetCurrentValueResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.I64, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI64(int64(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TGeneratorGetCurrentValueResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetOuch() {
    if err := oprot.WriteFieldBegin("ouch", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ouch: ", p), err) }
    if err := p.Ouch.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ouch), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ouch: ", p), err) }
  }
  return err
}

func (p *TGeneratorGetCurrentValueResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TGeneratorGetCurrentValueResult(%+v)", *p)
}

// Attributes:
//  - GenName
type TGeneratorGetValueArgs struct {
  GenName string `thrift:"genName,1" db:"genName" json:"genName"`
}

func NewTGeneratorGetValueArgs() *TGeneratorGetValueArgs {
  return &TGeneratorGetValueArgs{}
}


func (p *TGeneratorGetValueArgs) GetGenName() string {
  return p.GenName
}
func (p *TGeneratorGetValueArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TGeneratorGetValueArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.GenName = v
}
  return nil
}

func (p *TGeneratorGetValueArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getValue_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TGeneratorGetValueArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("genName", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:genName: ", p), err) }
  if err := oprot.WriteString(string(p.GenName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.genName (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:genName: ", p), err) }
  return err
}

func (p *TGeneratorGetValueArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TGeneratorGetValueArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ouch
type TGeneratorGetValueResult struct {
  Success *int64 `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ouch *InvalidOperation `thrift:"ouch,1" db:"ouch" json:"ouch,omitempty"`
}

func NewTGeneratorGetValueResult() *TGeneratorGetValueResult {
  return &TGeneratorGetValueResult{}
}

var TGeneratorGetValueResult_Success_DEFAULT int64
func (p *TGeneratorGetValueResult) GetSuccess() int64 {
  if !p.IsSetSuccess() {
    return TGeneratorGetValueResult_Success_DEFAULT
  }
return *p.Success
}
var TGeneratorGetValueResult_Ouch_DEFAULT *InvalidOperation
func (p *TGeneratorGetValueResult) GetOuch() *InvalidOperation {
  if !p.IsSetOuch() {
    return TGeneratorGetValueResult_Ouch_DEFAULT
  }
return p.Ouch
}
func (p *TGeneratorGetValueResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TGeneratorGetValueResult) IsSetOuch() bool {
  return p.Ouch != nil
}

func (p *TGeneratorGetValueResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TGeneratorGetValueResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *TGeneratorGetValueResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ouch = &InvalidOperation{}
  if err := p.Ouch.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ouch), err)
  }
  return nil
}

func (p *TGeneratorGetValueResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getValue_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TGeneratorGetValueResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.I64, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI64(int64(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TGeneratorGetValueResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetOuch() {
    if err := oprot.WriteFieldBegin("ouch", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ouch: ", p), err) }
    if err := p.Ouch.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ouch), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ouch: ", p), err) }
  }
  return err
}

func (p *TGeneratorGetValueResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TGeneratorGetValueResult(%+v)", *p)
}

// Attributes:
//  - GenName
//  - Step
type TGeneratorGetStepValueArgs struct {
  GenName string `thrift:"genName,1" db:"genName" json:"genName"`
  Step int64 `thrift:"step,2" db:"step" json:"step"`
}

func NewTGeneratorGetStepValueArgs() *TGeneratorGetStepValueArgs {
  return &TGeneratorGetStepValueArgs{}
}


func (p *TGeneratorGetStepValueArgs) GetGenName() string {
  return p.GenName
}

func (p *TGeneratorGetStepValueArgs) GetStep() int64 {
  return p.Step
}
func (p *TGeneratorGetStepValueArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TGeneratorGetStepValueArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.GenName = v
}
  return nil
}

func (p *TGeneratorGetStepValueArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Step = v
}
  return nil
}

func (p *TGeneratorGetStepValueArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getStepValue_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TGeneratorGetStepValueArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("genName", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:genName: ", p), err) }
  if err := oprot.WriteString(string(p.GenName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.genName (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:genName: ", p), err) }
  return err
}

func (p *TGeneratorGetStepValueArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("step", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:step: ", p), err) }
  if err := oprot.WriteI64(int64(p.Step)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.step (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:step: ", p), err) }
  return err
}

func (p *TGeneratorGetStepValueArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TGeneratorGetStepValueArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ouch
type TGeneratorGetStepValueResult struct {
  Success *int64 `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ouch *InvalidOperation `thrift:"ouch,1" db:"ouch" json:"ouch,omitempty"`
}

func NewTGeneratorGetStepValueResult() *TGeneratorGetStepValueResult {
  return &TGeneratorGetStepValueResult{}
}

var TGeneratorGetStepValueResult_Success_DEFAULT int64
func (p *TGeneratorGetStepValueResult) GetSuccess() int64 {
  if !p.IsSetSuccess() {
    return TGeneratorGetStepValueResult_Success_DEFAULT
  }
return *p.Success
}
var TGeneratorGetStepValueResult_Ouch_DEFAULT *InvalidOperation
func (p *TGeneratorGetStepValueResult) GetOuch() *InvalidOperation {
  if !p.IsSetOuch() {
    return TGeneratorGetStepValueResult_Ouch_DEFAULT
  }
return p.Ouch
}
func (p *TGeneratorGetStepValueResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TGeneratorGetStepValueResult) IsSetOuch() bool {
  return p.Ouch != nil
}

func (p *TGeneratorGetStepValueResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TGeneratorGetStepValueResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *TGeneratorGetStepValueResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ouch = &InvalidOperation{}
  if err := p.Ouch.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ouch), err)
  }
  return nil
}

func (p *TGeneratorGetStepValueResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getStepValue_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TGeneratorGetStepValueResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.I64, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI64(int64(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TGeneratorGetStepValueResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetOuch() {
    if err := oprot.WriteFieldBegin("ouch", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ouch: ", p), err) }
    if err := p.Ouch.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ouch), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ouch: ", p), err) }
  }
  return err
}

func (p *TGeneratorGetStepValueResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TGeneratorGetStepValueResult(%+v)", *p)
}


