// Autogenerated by Thrift Compiler (0.13.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package userinfoservice

import (
	"bytes"
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"reflect"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

type TErrorCode int64

const (
	TErrorCode_EGood        TErrorCode = 0
	TErrorCode_ENotFound    TErrorCode = -1
	TErrorCode_EUnknown     TErrorCode = -2
	TErrorCode_EDataExisted TErrorCode = -3
)

func (p TErrorCode) String() string {
	switch p {
	case TErrorCode_EGood:
		return "EGood"
	case TErrorCode_ENotFound:
		return "ENotFound"
	case TErrorCode_EUnknown:
		return "EUnknown"
	case TErrorCode_EDataExisted:
		return "EDataExisted"
	}
	return "<UNSET>"
}

func TErrorCodeFromString(s string) (TErrorCode, error) {
	switch s {
	case "EGood":
		return TErrorCode_EGood, nil
	case "ENotFound":
		return TErrorCode_ENotFound, nil
	case "EUnknown":
		return TErrorCode_EUnknown, nil
	case "EDataExisted":
		return TErrorCode_EDataExisted, nil
	}
	return TErrorCode(0), fmt.Errorf("not a valid TErrorCode string")
}

func TErrorCodePtr(v TErrorCode) *TErrorCode { return &v }

func (p TErrorCode) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *TErrorCode) UnmarshalText(text []byte) error {
	q, err := TErrorCodeFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

func (p *TErrorCode) Scan(value interface{}) error {
	v, ok := value.(int64)
	if !ok {
		return errors.New("Scan value is not int64")
	}
	*p = TErrorCode(v)
	return nil
}

func (p *TErrorCode) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type TRole int64

const (
	TRole_Enter_News_Content      TRole = 1
	TRole_Create_Hashtag_For_News TRole = 2
	TRole_Choose_Time             TRole = 3
	TRole_Send_News_Aggregate     TRole = 4
)

func (p TRole) String() string {
	switch p {
	case TRole_Enter_News_Content:
		return "Enter_News_Content"
	case TRole_Create_Hashtag_For_News:
		return "Create_Hashtag_For_News"
	case TRole_Choose_Time:
		return "Choose_Time"
	case TRole_Send_News_Aggregate:
		return "Send_News_Aggregate"
	}
	return "<UNSET>"
}

func TRoleFromString(s string) (TRole, error) {
	switch s {
	case "Enter_News_Content":
		return TRole_Enter_News_Content, nil
	case "Create_Hashtag_For_News":
		return TRole_Create_Hashtag_For_News, nil
	case "Choose_Time":
		return TRole_Choose_Time, nil
	case "Send_News_Aggregate":
		return TRole_Send_News_Aggregate, nil
	}
	return TRole(0), fmt.Errorf("not a valid TRole string")
}

func TRolePtr(v TRole) *TRole { return &v }

func (p TRole) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *TRole) UnmarshalText(text []byte) error {
	q, err := TRoleFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

func (p *TRole) Scan(value interface{}) error {
	v, ok := value.(int64)
	if !ok {
		return errors.New("Scan value is not int64")
	}
	*p = TRole(v)
	return nil
}

func (p *TRole) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type TTypePosition int64

const (
	TTypePosition_BOSS   TTypePosition = 1
	TTypePosition_DEPUTY TTypePosition = 2
	TTypePosition_MEMBER TTypePosition = 3
)

func (p TTypePosition) String() string {
	switch p {
	case TTypePosition_BOSS:
		return "BOSS"
	case TTypePosition_DEPUTY:
		return "DEPUTY"
	case TTypePosition_MEMBER:
		return "MEMBER"
	}
	return "<UNSET>"
}

func TTypePositionFromString(s string) (TTypePosition, error) {
	switch s {
	case "BOSS":
		return TTypePosition_BOSS, nil
	case "DEPUTY":
		return TTypePosition_DEPUTY, nil
	case "MEMBER":
		return TTypePosition_MEMBER, nil
	}
	return TTypePosition(0), fmt.Errorf("not a valid TTypePosition string")
}

func TTypePositionPtr(v TTypePosition) *TTypePosition { return &v }

func (p TTypePosition) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *TTypePosition) UnmarshalText(text []byte) error {
	q, err := TTypePositionFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

func (p *TTypePosition) Scan(value interface{}) error {
	v, ok := value.(int64)
	if !ok {
		return errors.New("Scan value is not int64")
	}
	*p = TTypePosition(v)
	return nil
}

func (p *TTypePosition) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type TTierID int64

const (
	TTierID_TIER_1            TTierID = 1
	TTierID_TIER_2            TTierID = 2
	TTierID_TIER_3            TTierID = 3
	TTierID_Area_Organization TTierID = 4
	TTierID_TTTS              TTierID = 90
	TTierID_QBTS              TTierID = 99
	TTierID_QTHT              TTierID = 100
)

func (p TTierID) String() string {
	switch p {
	case TTierID_TIER_1:
		return "TIER_1"
	case TTierID_TIER_2:
		return "TIER_2"
	case TTierID_TIER_3:
		return "TIER_3"
	case TTierID_Area_Organization:
		return "Area_Organization"
	case TTierID_TTTS:
		return "TTTS"
	case TTierID_QBTS:
		return "QBTS"
	case TTierID_QTHT:
		return "QTHT"
	}
	return "<UNSET>"
}

func TTierIDFromString(s string) (TTierID, error) {
	switch s {
	case "TIER_1":
		return TTierID_TIER_1, nil
	case "TIER_2":
		return TTierID_TIER_2, nil
	case "TIER_3":
		return TTierID_TIER_3, nil
	case "Area_Organization":
		return TTierID_Area_Organization, nil
	case "TTTS":
		return TTierID_TTTS, nil
	case "QBTS":
		return TTierID_QBTS, nil
	case "QTHT":
		return TTierID_QTHT, nil
	}
	return TTierID(0), fmt.Errorf("not a valid TTierID string")
}

func TTierIDPtr(v TTierID) *TTierID { return &v }

func (p TTierID) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *TTierID) UnmarshalText(text []byte) error {
	q, err := TTierIDFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

func (p *TTierID) Scan(value interface{}) error {
	v, ok := value.(int64)
	if !ok {
		return errors.New("Scan value is not int64")
	}
	*p = TTierID(v)
	return nil
}

func (p *TTierID) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type TStatus int64

const (
	TStatus_ACTIVE  TStatus = 1
	TStatus_BANNED  TStatus = 2
	TStatus_DELETED TStatus = 3
)

func (p TStatus) String() string {
	switch p {
	case TStatus_ACTIVE:
		return "ACTIVE"
	case TStatus_BANNED:
		return "BANNED"
	case TStatus_DELETED:
		return "DELETED"
	}
	return "<UNSET>"
}

func TStatusFromString(s string) (TStatus, error) {
	switch s {
	case "ACTIVE":
		return TStatus_ACTIVE, nil
	case "BANNED":
		return TStatus_BANNED, nil
	case "DELETED":
		return TStatus_DELETED, nil
	}
	return TStatus(0), fmt.Errorf("not a valid TStatus string")
}

func TStatusPtr(v TStatus) *TStatus { return &v }

func (p TStatus) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *TStatus) UnmarshalText(text []byte) error {
	q, err := TStatusFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

func (p *TStatus) Scan(value interface{}) error {
	v, ok := value.(int64)
	if !ok {
		return errors.New("Scan value is not int64")
	}
	*p = TStatus(v)
	return nil
}

func (p *TStatus) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type TUID int64

func TUIDPtr(v TUID) *TUID { return &v }

type TTIME int64

func TTIMEPtr(v TTIME) *TTIME { return &v }

type TROLEID int64

func TROLEIDPtr(v TROLEID) *TROLEID { return &v }

type TUnitID int64

func TUnitIDPtr(v TUnitID) *TUnitID { return &v }

type TOID int64

func TOIDPtr(v TOID) *TOID { return &v }

type TData *TUserInfo

func TDataPtr(v TData) *TData { return &v }

// Attributes:
//  - UserName
//  - DisplayName
//  - TierID
//  - Roles
//  - CreationTime
//  - Position
//  - OrganID
//  - ExtData
//  - Status
//  - Pubkey
//  - Avatar
//  - RankID
//  - Email
//  - Phone
type TUserInfo struct {
	UserName     string            `thrift:"userName,1" db:"userName" json:"userName"`
	DisplayName  string            `thrift:"displayName,2" db:"displayName" json:"displayName"`
	TierID       TTierID           `thrift:"tierID,3" db:"tierID" json:"tierID"`
	Roles        []TRole           `thrift:"roles,4" db:"roles" json:"roles"`
	CreationTime TTIME             `thrift:"creationTime,5" db:"creationTime" json:"creationTime"`
	Position     TTypePosition     `thrift:"position,6" db:"position" json:"position"`
	OrganID      TOID              `thrift:"organID,7" db:"organID" json:"organID"`
	ExtData      map[string]string `thrift:"extData,8" db:"extData" json:"extData"`
	Status       TStatus           `thrift:"status,9" db:"status" json:"status"`
	Pubkey       string            `thrift:"pubkey,10" db:"pubkey" json:"pubkey"`
	Avatar       string            `thrift:"avatar,11" db:"avatar" json:"avatar"`
	RankID       int64             `thrift:"rankID,12" db:"rankID" json:"rankID"`
	Email        string            `thrift:"email,13" db:"email" json:"email"`
	Phone        string            `thrift:"phone,14" db:"phone" json:"phone"`
}

func NewTUserInfo() *TUserInfo {
	return &TUserInfo{}
}

func (p *TUserInfo) GetUserName() string {
	return p.UserName
}

func (p *TUserInfo) GetDisplayName() string {
	return p.DisplayName
}

func (p *TUserInfo) GetTierID() TTierID {
	return p.TierID
}

func (p *TUserInfo) GetRoles() []TRole {
	return p.Roles
}

func (p *TUserInfo) GetCreationTime() TTIME {
	return p.CreationTime
}

func (p *TUserInfo) GetPosition() TTypePosition {
	return p.Position
}

func (p *TUserInfo) GetOrganID() TOID {
	return p.OrganID
}

func (p *TUserInfo) GetExtData() map[string]string {
	return p.ExtData
}

func (p *TUserInfo) GetStatus() TStatus {
	return p.Status
}

func (p *TUserInfo) GetPubkey() string {
	return p.Pubkey
}

func (p *TUserInfo) GetAvatar() string {
	return p.Avatar
}

func (p *TUserInfo) GetRankID() int64 {
	return p.RankID
}

func (p *TUserInfo) GetEmail() string {
	return p.Email
}

func (p *TUserInfo) GetPhone() string {
	return p.Phone
}
func (p *TUserInfo) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField5(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 6:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField6(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 7:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField7(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 8:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField8(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 9:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField9(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 10:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField10(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 11:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField11(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 12:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField12(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 13:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField13(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 14:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField14(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TUserInfo) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.UserName = v
	}
	return nil
}

func (p *TUserInfo) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.DisplayName = v
	}
	return nil
}

func (p *TUserInfo) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		temp := TTierID(v)
		p.TierID = temp
	}
	return nil
}

func (p *TUserInfo) ReadField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]TRole, 0, size)
	p.Roles = tSlice
	for i := 0; i < size; i++ {
		var _elem0 TRole
		if v, err := iprot.ReadI32(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			temp := TRole(v)
			_elem0 = temp
		}
		p.Roles = append(p.Roles, _elem0)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TUserInfo) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		temp := TTIME(v)
		p.CreationTime = temp
	}
	return nil
}

func (p *TUserInfo) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		temp := TTypePosition(v)
		p.Position = temp
	}
	return nil
}

func (p *TUserInfo) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		temp := TOID(v)
		p.OrganID = temp
	}
	return nil
}

func (p *TUserInfo) ReadField8(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]string, size)
	p.ExtData = tMap
	for i := 0; i < size; i++ {
		var _key1 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key1 = v
		}
		var _val2 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val2 = v
		}
		p.ExtData[_key1] = _val2
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *TUserInfo) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		temp := TStatus(v)
		p.Status = temp
	}
	return nil
}

func (p *TUserInfo) ReadField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		p.Pubkey = v
	}
	return nil
}

func (p *TUserInfo) ReadField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 11: ", err)
	} else {
		p.Avatar = v
	}
	return nil
}

func (p *TUserInfo) ReadField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 12: ", err)
	} else {
		p.RankID = v
	}
	return nil
}

func (p *TUserInfo) ReadField13(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 13: ", err)
	} else {
		p.Email = v
	}
	return nil
}

func (p *TUserInfo) ReadField14(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 14: ", err)
	} else {
		p.Phone = v
	}
	return nil
}

func (p *TUserInfo) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TUserInfo"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
		if err := p.writeField6(oprot); err != nil {
			return err
		}
		if err := p.writeField7(oprot); err != nil {
			return err
		}
		if err := p.writeField8(oprot); err != nil {
			return err
		}
		if err := p.writeField9(oprot); err != nil {
			return err
		}
		if err := p.writeField10(oprot); err != nil {
			return err
		}
		if err := p.writeField11(oprot); err != nil {
			return err
		}
		if err := p.writeField12(oprot); err != nil {
			return err
		}
		if err := p.writeField13(oprot); err != nil {
			return err
		}
		if err := p.writeField14(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TUserInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("userName", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userName: ", p), err)
	}
	if err := oprot.WriteString(string(p.UserName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.userName (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userName: ", p), err)
	}
	return err
}

func (p *TUserInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("displayName", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:displayName: ", p), err)
	}
	if err := oprot.WriteString(string(p.DisplayName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.displayName (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:displayName: ", p), err)
	}
	return err
}

func (p *TUserInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tierID", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:tierID: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.TierID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.tierID (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:tierID: ", p), err)
	}
	return err
}

func (p *TUserInfo) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("roles", thrift.LIST, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:roles: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.I32, len(p.Roles)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Roles {
		if err := oprot.WriteI32(int32(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:roles: ", p), err)
	}
	return err
}

func (p *TUserInfo) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("creationTime", thrift.I64, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:creationTime: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.CreationTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.creationTime (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:creationTime: ", p), err)
	}
	return err
}

func (p *TUserInfo) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("position", thrift.I32, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:position: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Position)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.position (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:position: ", p), err)
	}
	return err
}

func (p *TUserInfo) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("organID", thrift.I64, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:organID: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.OrganID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.organID (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:organID: ", p), err)
	}
	return err
}

func (p *TUserInfo) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("extData", thrift.MAP, 8); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:extData: ", p), err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.ExtData)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.ExtData {
		if err := oprot.WriteString(string(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 8:extData: ", p), err)
	}
	return err
}

func (p *TUserInfo) writeField9(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("status", thrift.I32, 9); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:status: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Status)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.status (9) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 9:status: ", p), err)
	}
	return err
}

func (p *TUserInfo) writeField10(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("pubkey", thrift.STRING, 10); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:pubkey: ", p), err)
	}
	if err := oprot.WriteString(string(p.Pubkey)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.pubkey (10) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 10:pubkey: ", p), err)
	}
	return err
}

func (p *TUserInfo) writeField11(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("avatar", thrift.STRING, 11); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:avatar: ", p), err)
	}
	if err := oprot.WriteString(string(p.Avatar)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.avatar (11) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 11:avatar: ", p), err)
	}
	return err
}

func (p *TUserInfo) writeField12(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("rankID", thrift.I64, 12); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:rankID: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.RankID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.rankID (12) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 12:rankID: ", p), err)
	}
	return err
}

func (p *TUserInfo) writeField13(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("email", thrift.STRING, 13); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:email: ", p), err)
	}
	if err := oprot.WriteString(string(p.Email)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.email (13) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 13:email: ", p), err)
	}
	return err
}

func (p *TUserInfo) writeField14(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("phone", thrift.STRING, 14); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:phone: ", p), err)
	}
	if err := oprot.WriteString(string(p.Phone)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.phone (14) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 14:phone: ", p), err)
	}
	return err
}

func (p *TUserInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TUserInfo(%+v)", *p)
}

// Attributes:
//  - ErrorCode
//  - Data
type TDataResult_ struct {
	ErrorCode TErrorCode `thrift:"errorCode,1" db:"errorCode" json:"errorCode"`
	Data      *TUserInfo `thrift:"data,2" db:"data" json:"data,omitempty"`
}

func NewTDataResult_() *TDataResult_ {
	return &TDataResult_{}
}

func (p *TDataResult_) GetErrorCode() TErrorCode {
	return p.ErrorCode
}

var TDataResult__Data_DEFAULT *TUserInfo

func (p *TDataResult_) GetData() *TUserInfo {
	if !p.IsSetData() {
		return TDataResult__Data_DEFAULT
	}
	return p.Data
}
func (p *TDataResult_) IsSetData() bool {
	return p.Data != nil
}

func (p *TDataResult_) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TDataResult_) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := TErrorCode(v)
		p.ErrorCode = temp
	}
	return nil
}

func (p *TDataResult_) ReadField2(iprot thrift.TProtocol) error {
	p.Data = &TUserInfo{}
	if err := p.Data.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Data), err)
	}
	return nil
}

func (p *TDataResult_) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TDataResult"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TDataResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("errorCode", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:errorCode: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ErrorCode)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.errorCode (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:errorCode: ", p), err)
	}
	return err
}

func (p *TDataResult_) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetData() {
		if err := oprot.WriteFieldBegin("data", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:data: ", p), err)
		}
		if err := p.Data.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Data), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:data: ", p), err)
		}
	}
	return err
}

func (p *TDataResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TDataResult_(%+v)", *p)
}

type TDataServiceR interface {
	// Parameters:
	//  - Key
	GetData(ctx context.Context, key TUID) (r *TDataResult_, err error)
}

type TDataServiceRClient struct {
	c thrift.TClient
}

func NewTDataServiceRClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *TDataServiceRClient {
	return &TDataServiceRClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewTDataServiceRClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *TDataServiceRClient {
	return &TDataServiceRClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewTDataServiceRClient(c thrift.TClient) *TDataServiceRClient {
	return &TDataServiceRClient{
		c: c,
	}
}

func (p *TDataServiceRClient) Client_() thrift.TClient {
	return p.c
}

// Parameters:
//  - Key
func (p *TDataServiceRClient) GetData(ctx context.Context, key TUID) (r *TDataResult_, err error) {
	var _args3 TDataServiceRGetDataArgs
	_args3.Key = key
	var _result4 TDataServiceRGetDataResult
	if err = p.Client_().Call(ctx, "getData", &_args3, &_result4); err != nil {
		return
	}
	return _result4.GetSuccess(), nil
}

type TDataServiceRProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      TDataServiceR
}

func (p *TDataServiceRProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *TDataServiceRProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *TDataServiceRProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewTDataServiceRProcessor(handler TDataServiceR) *TDataServiceRProcessor {

	self5 := &TDataServiceRProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self5.processorMap["getData"] = &tDataServiceRProcessorGetData{handler: handler}
	return self5
}

func (p *TDataServiceRProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x6 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x6.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush(ctx)
	return false, x6

}

type tDataServiceRProcessorGetData struct {
	handler TDataServiceR
}

func (p *tDataServiceRProcessorGetData) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TDataServiceRGetDataArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getData", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TDataServiceRGetDataResult{}
	var retval *TDataResult_
	var err2 error
	if retval, err2 = p.handler.GetData(ctx, args.Key); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getData: "+err2.Error())
		oprot.WriteMessageBegin("getData", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getData", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Key
type TDataServiceRGetDataArgs struct {
	Key TUID `thrift:"key,1" db:"key" json:"key"`
}

func NewTDataServiceRGetDataArgs() *TDataServiceRGetDataArgs {
	return &TDataServiceRGetDataArgs{}
}

func (p *TDataServiceRGetDataArgs) GetKey() TUID {
	return p.Key
}
func (p *TDataServiceRGetDataArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TDataServiceRGetDataArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := TUID(v)
		p.Key = temp
	}
	return nil
}

func (p *TDataServiceRGetDataArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getData_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TDataServiceRGetDataArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("key", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:key: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.Key)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.key (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:key: ", p), err)
	}
	return err
}

func (p *TDataServiceRGetDataArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TDataServiceRGetDataArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TDataServiceRGetDataResult struct {
	Success *TDataResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTDataServiceRGetDataResult() *TDataServiceRGetDataResult {
	return &TDataServiceRGetDataResult{}
}

var TDataServiceRGetDataResult_Success_DEFAULT *TDataResult_

func (p *TDataServiceRGetDataResult) GetSuccess() *TDataResult_ {
	if !p.IsSetSuccess() {
		return TDataServiceRGetDataResult_Success_DEFAULT
	}
	return p.Success
}
func (p *TDataServiceRGetDataResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TDataServiceRGetDataResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TDataServiceRGetDataResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &TDataResult_{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *TDataServiceRGetDataResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getData_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TDataServiceRGetDataResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TDataServiceRGetDataResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TDataServiceRGetDataResult(%+v)", *p)
}

type TDataService interface {
	// Parameters:
	//  - Key
	GetData(ctx context.Context, key TUID) (r *TDataResult_, err error)
	// Parameters:
	//  - Keys
	GetMultiData(ctx context.Context, keys []int64) (r map[TUID]*TUserInfo, err error)
	// Parameters:
	//  - Key
	//  - Data
	PutData(ctx context.Context, key TUID, data *TUserInfo) (r TErrorCode, err error)
}

type TDataServiceClient struct {
	c thrift.TClient
}

func NewTDataServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *TDataServiceClient {
	return &TDataServiceClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewTDataServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *TDataServiceClient {
	return &TDataServiceClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewTDataServiceClient(c thrift.TClient) *TDataServiceClient {
	return &TDataServiceClient{
		c: c,
	}
}

func (p *TDataServiceClient) Client_() thrift.TClient {
	return p.c
}

// Parameters:
//  - Key
func (p *TDataServiceClient) GetData(ctx context.Context, key TUID) (r *TDataResult_, err error) {
	var _args8 TDataServiceGetDataArgs
	_args8.Key = key
	var _result9 TDataServiceGetDataResult
	if err = p.Client_().Call(ctx, "getData", &_args8, &_result9); err != nil {
		return
	}
	return _result9.GetSuccess(), nil
}

// Parameters:
//  - Keys
func (p *TDataServiceClient) GetMultiData(ctx context.Context, keys []int64) (r map[TUID]*TUserInfo, err error) {
	var _args10 TDataServiceGetMultiDataArgs
	_args10.Keys = keys
	var _result11 TDataServiceGetMultiDataResult
	if err = p.Client_().Call(ctx, "getMultiData", &_args10, &_result11); err != nil {
		return
	}
	return _result11.GetSuccess(), nil
}

// Parameters:
//  - Key
//  - Data
func (p *TDataServiceClient) PutData(ctx context.Context, key TUID, data *TUserInfo) (r TErrorCode, err error) {
	var _args12 TDataServicePutDataArgs
	_args12.Key = key
	_args12.Data = data
	var _result13 TDataServicePutDataResult
	if err = p.Client_().Call(ctx, "putData", &_args12, &_result13); err != nil {
		return
	}
	return _result13.GetSuccess(), nil
}

type TDataServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      TDataService
}

func (p *TDataServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *TDataServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *TDataServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewTDataServiceProcessor(handler TDataService) *TDataServiceProcessor {

	self14 := &TDataServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self14.processorMap["getData"] = &tDataServiceProcessorGetData{handler: handler}
	self14.processorMap["getMultiData"] = &tDataServiceProcessorGetMultiData{handler: handler}
	self14.processorMap["putData"] = &tDataServiceProcessorPutData{handler: handler}
	return self14
}

func (p *TDataServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x15 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x15.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush(ctx)
	return false, x15

}

type tDataServiceProcessorGetData struct {
	handler TDataService
}

func (p *tDataServiceProcessorGetData) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TDataServiceGetDataArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getData", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TDataServiceGetDataResult{}
	var retval *TDataResult_
	var err2 error
	if retval, err2 = p.handler.GetData(ctx, args.Key); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getData: "+err2.Error())
		oprot.WriteMessageBegin("getData", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getData", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type tDataServiceProcessorGetMultiData struct {
	handler TDataService
}

func (p *tDataServiceProcessorGetMultiData) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TDataServiceGetMultiDataArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getMultiData", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TDataServiceGetMultiDataResult{}
	var retval map[TUID]*TUserInfo
	var err2 error
	if retval, err2 = p.handler.GetMultiData(ctx, args.Keys); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getMultiData: "+err2.Error())
		oprot.WriteMessageBegin("getMultiData", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getMultiData", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type tDataServiceProcessorPutData struct {
	handler TDataService
}

func (p *tDataServiceProcessorPutData) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TDataServicePutDataArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("putData", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TDataServicePutDataResult{}
	var retval TErrorCode
	var err2 error
	if retval, err2 = p.handler.PutData(ctx, args.Key, args.Data); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing putData: "+err2.Error())
		oprot.WriteMessageBegin("putData", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("putData", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Key
type TDataServiceGetDataArgs struct {
	Key TUID `thrift:"key,1" db:"key" json:"key"`
}

func NewTDataServiceGetDataArgs() *TDataServiceGetDataArgs {
	return &TDataServiceGetDataArgs{}
}

func (p *TDataServiceGetDataArgs) GetKey() TUID {
	return p.Key
}
func (p *TDataServiceGetDataArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TDataServiceGetDataArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := TUID(v)
		p.Key = temp
	}
	return nil
}

func (p *TDataServiceGetDataArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getData_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TDataServiceGetDataArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("key", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:key: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.Key)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.key (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:key: ", p), err)
	}
	return err
}

func (p *TDataServiceGetDataArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TDataServiceGetDataArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TDataServiceGetDataResult struct {
	Success *TDataResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTDataServiceGetDataResult() *TDataServiceGetDataResult {
	return &TDataServiceGetDataResult{}
}

var TDataServiceGetDataResult_Success_DEFAULT *TDataResult_

func (p *TDataServiceGetDataResult) GetSuccess() *TDataResult_ {
	if !p.IsSetSuccess() {
		return TDataServiceGetDataResult_Success_DEFAULT
	}
	return p.Success
}
func (p *TDataServiceGetDataResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TDataServiceGetDataResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TDataServiceGetDataResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &TDataResult_{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *TDataServiceGetDataResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getData_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TDataServiceGetDataResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TDataServiceGetDataResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TDataServiceGetDataResult(%+v)", *p)
}

// Attributes:
//  - Keys
type TDataServiceGetMultiDataArgs struct {
	Keys []int64 `thrift:"keys,1" db:"keys" json:"keys"`
}

func NewTDataServiceGetMultiDataArgs() *TDataServiceGetMultiDataArgs {
	return &TDataServiceGetMultiDataArgs{}
}

func (p *TDataServiceGetMultiDataArgs) GetKeys() []int64 {
	return p.Keys
}
func (p *TDataServiceGetMultiDataArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TDataServiceGetMultiDataArgs) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]int64, 0, size)
	p.Keys = tSlice
	for i := 0; i < size; i++ {
		var _elem16 int64
		if v, err := iprot.ReadI64(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem16 = v
		}
		p.Keys = append(p.Keys, _elem16)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TDataServiceGetMultiDataArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getMultiData_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TDataServiceGetMultiDataArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("keys", thrift.LIST, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:keys: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.I64, len(p.Keys)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Keys {
		if err := oprot.WriteI64(int64(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:keys: ", p), err)
	}
	return err
}

func (p *TDataServiceGetMultiDataArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TDataServiceGetMultiDataArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TDataServiceGetMultiDataResult struct {
	Success map[TUID]*TUserInfo `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTDataServiceGetMultiDataResult() *TDataServiceGetMultiDataResult {
	return &TDataServiceGetMultiDataResult{}
}

var TDataServiceGetMultiDataResult_Success_DEFAULT map[TUID]*TUserInfo

func (p *TDataServiceGetMultiDataResult) GetSuccess() map[TUID]*TUserInfo {
	return p.Success
}
func (p *TDataServiceGetMultiDataResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TDataServiceGetMultiDataResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TDataServiceGetMultiDataResult) ReadField0(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[TUID]*TUserInfo, size)
	p.Success = tMap
	for i := 0; i < size; i++ {
		var _key17 TUID
		if v, err := iprot.ReadI64(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			temp := TUID(v)
			_key17 = temp
		}
		_val18 := &TUserInfo{}
		if err := _val18.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _val18), err)
		}
		p.Success[_key17] = _val18
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *TDataServiceGetMultiDataResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getMultiData_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TDataServiceGetMultiDataResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.MAP, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteMapBegin(thrift.I64, thrift.STRUCT, len(p.Success)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.Success {
			if err := oprot.WriteI64(int64(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TDataServiceGetMultiDataResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TDataServiceGetMultiDataResult(%+v)", *p)
}

// Attributes:
//  - Key
//  - Data
type TDataServicePutDataArgs struct {
	Key  TUID       `thrift:"key,1" db:"key" json:"key"`
	Data *TUserInfo `thrift:"data,2" db:"data" json:"data"`
}

func NewTDataServicePutDataArgs() *TDataServicePutDataArgs {
	return &TDataServicePutDataArgs{}
}

func (p *TDataServicePutDataArgs) GetKey() TUID {
	return p.Key
}

var TDataServicePutDataArgs_Data_DEFAULT *TUserInfo

func (p *TDataServicePutDataArgs) GetData() *TUserInfo {
	if !p.IsSetData() {
		return TDataServicePutDataArgs_Data_DEFAULT
	}
	return p.Data
}
func (p *TDataServicePutDataArgs) IsSetData() bool {
	return p.Data != nil
}

func (p *TDataServicePutDataArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TDataServicePutDataArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := TUID(v)
		p.Key = temp
	}
	return nil
}

func (p *TDataServicePutDataArgs) ReadField2(iprot thrift.TProtocol) error {
	p.Data = &TUserInfo{}
	if err := p.Data.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Data), err)
	}
	return nil
}

func (p *TDataServicePutDataArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("putData_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TDataServicePutDataArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("key", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:key: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.Key)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.key (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:key: ", p), err)
	}
	return err
}

func (p *TDataServicePutDataArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("data", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:data: ", p), err)
	}
	if err := p.Data.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Data), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:data: ", p), err)
	}
	return err
}

func (p *TDataServicePutDataArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TDataServicePutDataArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TDataServicePutDataResult struct {
	Success *TErrorCode `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTDataServicePutDataResult() *TDataServicePutDataResult {
	return &TDataServicePutDataResult{}
}

var TDataServicePutDataResult_Success_DEFAULT TErrorCode

func (p *TDataServicePutDataResult) GetSuccess() TErrorCode {
	if !p.IsSetSuccess() {
		return TDataServicePutDataResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *TDataServicePutDataResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TDataServicePutDataResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TDataServicePutDataResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		temp := TErrorCode(v)
		p.Success = &temp
	}
	return nil
}

func (p *TDataServicePutDataResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("putData_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TDataServicePutDataResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TDataServicePutDataResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TDataServicePutDataResult(%+v)", *p)
}

type TUserInfoService interface {
	TDataService
}

type TUserInfoServiceClient struct {
	*TDataServiceClient
}

func NewTUserInfoServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *TUserInfoServiceClient {
	return &TUserInfoServiceClient{TDataServiceClient: NewTDataServiceClientFactory(t, f)}
}

func NewTUserInfoServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *TUserInfoServiceClient {
	return &TUserInfoServiceClient{TDataServiceClient: NewTDataServiceClientProtocol(t, iprot, oprot)}
}

func NewTUserInfoServiceClient(c thrift.TClient) *TUserInfoServiceClient {
	return &TUserInfoServiceClient{
		TDataServiceClient: NewTDataServiceClient(c),
	}
}

type TUserInfoServiceProcessor struct {
	*TDataServiceProcessor
}

func NewTUserInfoServiceProcessor(handler TUserInfoService) *TUserInfoServiceProcessor {
	self33 := &TUserInfoServiceProcessor{NewTDataServiceProcessor(handler)}
	return self33
}

// HELPER FUNCTIONS AND STRUCTURES
