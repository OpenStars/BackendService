// Autogenerated by Thrift Compiler (0.13.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package Int2Zset

import(
	"bytes"
	"context"
	"reflect"
	"database/sql/driver"
	"errors"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

type TErrorCode int64
const (
  TErrorCode_EGood TErrorCode = 0
  TErrorCode_ENotFound TErrorCode = -1
  TErrorCode_EUnknown TErrorCode = -2
  TErrorCode_EDataExisted TErrorCode = -3
  TErrorCode_EIterExceed TErrorCode = -4
  TErrorCode_EEmpty TErrorCode = -5
)

func (p TErrorCode) String() string {
  switch p {
  case TErrorCode_EGood: return "EGood"
  case TErrorCode_ENotFound: return "ENotFound"
  case TErrorCode_EUnknown: return "EUnknown"
  case TErrorCode_EDataExisted: return "EDataExisted"
  case TErrorCode_EIterExceed: return "EIterExceed"
  case TErrorCode_EEmpty: return "EEmpty"
  }
  return "<UNSET>"
}

func TErrorCodeFromString(s string) (TErrorCode, error) {
  switch s {
  case "EGood": return TErrorCode_EGood, nil 
  case "ENotFound": return TErrorCode_ENotFound, nil 
  case "EUnknown": return TErrorCode_EUnknown, nil 
  case "EDataExisted": return TErrorCode_EDataExisted, nil 
  case "EIterExceed": return TErrorCode_EIterExceed, nil 
  case "EEmpty": return TErrorCode_EEmpty, nil 
  }
  return TErrorCode(0), fmt.Errorf("not a valid TErrorCode string")
}


func TErrorCodePtr(v TErrorCode) *TErrorCode { return &v }

func (p TErrorCode) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *TErrorCode) UnmarshalText(text []byte) error {
q, err := TErrorCodeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *TErrorCode) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = TErrorCode(v)
return nil
}

func (p * TErrorCode) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
// Attributes:
//  - SetID
type TItemSet struct {
  SetID int64 `thrift:"set_id,1" db:"set_id" json:"set_id"`
}

func NewTItemSet() *TItemSet {
  return &TItemSet{}
}


func (p *TItemSet) GetSetID() int64 {
  return p.SetID
}
func (p *TItemSet) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TItemSet)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.SetID = v
}
  return nil
}

func (p *TItemSet) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TItemSet"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TItemSet) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("set_id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:set_id: ", p), err) }
  if err := oprot.WriteI64(int64(p.SetID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.set_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:set_id: ", p), err) }
  return err
}

func (p *TItemSet) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TItemSet(%+v)", *p)
}

// Attributes:
//  - Key
//  - Value
//  - Score
type TItem struct {
  Key string `thrift:"key,1" db:"key" json:"key"`
  Value []byte `thrift:"value,2" db:"value" json:"value"`
  Score int64 `thrift:"score,3" db:"score" json:"score"`
}

func NewTItem() *TItem {
  return &TItem{}
}


func (p *TItem) GetKey() string {
  return p.Key
}

func (p *TItem) GetValue() []byte {
  return p.Value
}

func (p *TItem) GetScore() int64 {
  return p.Score
}
func (p *TItem) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TItem)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Key = v
}
  return nil
}

func (p *TItem)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Value = v
}
  return nil
}

func (p *TItem)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Score = v
}
  return nil
}

func (p *TItem) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TItem"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TItem) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("key", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:key: ", p), err) }
  if err := oprot.WriteString(string(p.Key)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.key (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:key: ", p), err) }
  return err
}

func (p *TItem) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("value", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:value: ", p), err) }
  if err := oprot.WriteBinary(p.Value); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.value (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:value: ", p), err) }
  return err
}

func (p *TItem) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("score", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:score: ", p), err) }
  if err := oprot.WriteI64(int64(p.Score)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.score (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:score: ", p), err) }
  return err
}

func (p *TItem) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TItem(%+v)", *p)
}

// Attributes:
//  - Data
type TZset struct {
  Data []*TItem `thrift:"data,1" db:"data" json:"data"`
}

func NewTZset() *TZset {
  return &TZset{}
}


func (p *TZset) GetData() []*TItem {
  return p.Data
}
func (p *TZset) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TZset)  ReadField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TItem, 0, size)
  p.Data =  tSlice
  for i := 0; i < size; i ++ {
    _elem0 := &TItem{}
    if err := _elem0.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem0), err)
    }
    p.Data = append(p.Data, _elem0)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TZset) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TZset"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TZset) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("data", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:data: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Data)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Data {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:data: ", p), err) }
  return err
}

func (p *TZset) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TZset(%+v)", *p)
}

// Attributes:
//  - Code
//  - Data
type TBoolResult_ struct {
  Code TErrorCode `thrift:"code,1" db:"code" json:"code"`
  Data bool `thrift:"data,2" db:"data" json:"data"`
}

func NewTBoolResult_() *TBoolResult_ {
  return &TBoolResult_{}
}


func (p *TBoolResult_) GetCode() TErrorCode {
  return p.Code
}

func (p *TBoolResult_) GetData() bool {
  return p.Data
}
func (p *TBoolResult_) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TBoolResult_)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TErrorCode(v)
  p.Code = temp
}
  return nil
}

func (p *TBoolResult_)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Data = v
}
  return nil
}

func (p *TBoolResult_) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TBoolResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TBoolResult_) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *TBoolResult_) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("data", thrift.BOOL, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:data: ", p), err) }
  if err := oprot.WriteBool(bool(p.Data)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.data (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:data: ", p), err) }
  return err
}

func (p *TBoolResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TBoolResult_(%+v)", *p)
}

// Attributes:
//  - Code
//  - Data
//  - Total
type TListItemSetResult_ struct {
  Code TErrorCode `thrift:"code,1" db:"code" json:"code"`
  Data []*TItemSet `thrift:"data,2" db:"data" json:"data"`
  Total int64 `thrift:"total,3" db:"total" json:"total"`
}

func NewTListItemSetResult_() *TListItemSetResult_ {
  return &TListItemSetResult_{}
}


func (p *TListItemSetResult_) GetCode() TErrorCode {
  return p.Code
}

func (p *TListItemSetResult_) GetData() []*TItemSet {
  return p.Data
}

func (p *TListItemSetResult_) GetTotal() int64 {
  return p.Total
}
func (p *TListItemSetResult_) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TListItemSetResult_)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TErrorCode(v)
  p.Code = temp
}
  return nil
}

func (p *TListItemSetResult_)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TItemSet, 0, size)
  p.Data =  tSlice
  for i := 0; i < size; i ++ {
    _elem1 := &TItemSet{}
    if err := _elem1.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem1), err)
    }
    p.Data = append(p.Data, _elem1)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TListItemSetResult_)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Total = v
}
  return nil
}

func (p *TListItemSetResult_) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TListItemSetResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TListItemSetResult_) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *TListItemSetResult_) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("data", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:data: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Data)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Data {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:data: ", p), err) }
  return err
}

func (p *TListItemSetResult_) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("total", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:total: ", p), err) }
  if err := oprot.WriteI64(int64(p.Total)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.total (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:total: ", p), err) }
  return err
}

func (p *TListItemSetResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TListItemSetResult_(%+v)", *p)
}

// Attributes:
//  - Code
//  - Data
//  - Total
type TListItemResult_ struct {
  Code TErrorCode `thrift:"code,1" db:"code" json:"code"`
  Data []*TItem `thrift:"data,2" db:"data" json:"data"`
  Total int64 `thrift:"total,3" db:"total" json:"total"`
}

func NewTListItemResult_() *TListItemResult_ {
  return &TListItemResult_{}
}


func (p *TListItemResult_) GetCode() TErrorCode {
  return p.Code
}

func (p *TListItemResult_) GetData() []*TItem {
  return p.Data
}

func (p *TListItemResult_) GetTotal() int64 {
  return p.Total
}
func (p *TListItemResult_) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TListItemResult_)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TErrorCode(v)
  p.Code = temp
}
  return nil
}

func (p *TListItemResult_)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TItem, 0, size)
  p.Data =  tSlice
  for i := 0; i < size; i ++ {
    _elem2 := &TItem{}
    if err := _elem2.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem2), err)
    }
    p.Data = append(p.Data, _elem2)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TListItemResult_)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Total = v
}
  return nil
}

func (p *TListItemResult_) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TListItemResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TListItemResult_) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *TListItemResult_) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("data", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:data: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Data)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Data {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:data: ", p), err) }
  return err
}

func (p *TListItemResult_) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("total", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:total: ", p), err) }
  if err := oprot.WriteI64(int64(p.Total)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.total (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:total: ", p), err) }
  return err
}

func (p *TListItemResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TListItemResult_(%+v)", *p)
}

type TDataService interface {}

type TDataServiceClient struct {
  c thrift.TClient
}

func NewTDataServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *TDataServiceClient {
  return &TDataServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewTDataServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *TDataServiceClient {
  return &TDataServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewTDataServiceClient(c thrift.TClient) *TDataServiceClient {
  return &TDataServiceClient{
    c: c,
  }
}

func (p *TDataServiceClient) Client_() thrift.TClient {
  return p.c
}
type TDataServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler TDataService
}

func (p *TDataServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *TDataServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *TDataServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewTDataServiceProcessor(handler TDataService) *TDataServiceProcessor {

  self3 := &TDataServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
return self3
}

func (p *TDataServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x4 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x4.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush(ctx)
  return false, x4

}


// HELPER FUNCTIONS AND STRUCTURES


type Int2ZsetService interface {
TDataService

  // Parameters:
  //  - SetID
  //  - Item
  //  - MaxItem
  AddItem(ctx context.Context, set_id int64, item *TItem, max_item int64) (r *TBoolResult_, err error)
  // Parameters:
  //  - Items
  //  - MaxItem
  AddListItems(ctx context.Context, items []*TItemSet, max_item int64) (r *TBoolResult_, err error)
  // Parameters:
  //  - SetID
  //  - ItemKey
  RemoveItem(ctx context.Context, set_id int64, item_key string) (r *TBoolResult_, err error)
  // Parameters:
  //  - Items
  RemoveListItems(ctx context.Context, items []*TItemSet) (r *TListItemSetResult_, err error)
  // Parameters:
  //  - SetID
  //  - Offset
  //  - Limit
  //  - IsDesc
  ListItems(ctx context.Context, set_id int64, offset int32, limit int32, is_desc bool) (r *TListItemResult_, err error)
}

type Int2ZsetServiceClient struct {
  *TDataServiceClient
}

func NewInt2ZsetServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *Int2ZsetServiceClient {
  return &Int2ZsetServiceClient{TDataServiceClient: NewTDataServiceClientFactory(t, f)}}

func NewInt2ZsetServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *Int2ZsetServiceClient {
  return &Int2ZsetServiceClient{TDataServiceClient: NewTDataServiceClientProtocol(t, iprot, oprot)}
}

func NewInt2ZsetServiceClient(c thrift.TClient) *Int2ZsetServiceClient {
  return &Int2ZsetServiceClient{
    TDataServiceClient: NewTDataServiceClient(c),
  }
}

// Parameters:
//  - SetID
//  - Item
//  - MaxItem
func (p *Int2ZsetServiceClient) AddItem(ctx context.Context, set_id int64, item *TItem, max_item int64) (r *TBoolResult_, err error) {
  var _args5 Int2ZsetServiceAddItemArgs
  _args5.SetID = set_id
  _args5.Item = item
  _args5.MaxItem = max_item
  var _result6 Int2ZsetServiceAddItemResult
  if err = p.Client_().Call(ctx, "addItem", &_args5, &_result6); err != nil {
    return
  }
  return _result6.GetSuccess(), nil
}

// Parameters:
//  - Items
//  - MaxItem
func (p *Int2ZsetServiceClient) AddListItems(ctx context.Context, items []*TItemSet, max_item int64) (r *TBoolResult_, err error) {
  var _args7 Int2ZsetServiceAddListItemsArgs
  _args7.Items = items
  _args7.MaxItem = max_item
  var _result8 Int2ZsetServiceAddListItemsResult
  if err = p.Client_().Call(ctx, "addListItems", &_args7, &_result8); err != nil {
    return
  }
  return _result8.GetSuccess(), nil
}

// Parameters:
//  - SetID
//  - ItemKey
func (p *Int2ZsetServiceClient) RemoveItem(ctx context.Context, set_id int64, item_key string) (r *TBoolResult_, err error) {
  var _args9 Int2ZsetServiceRemoveItemArgs
  _args9.SetID = set_id
  _args9.ItemKey = item_key
  var _result10 Int2ZsetServiceRemoveItemResult
  if err = p.Client_().Call(ctx, "removeItem", &_args9, &_result10); err != nil {
    return
  }
  return _result10.GetSuccess(), nil
}

// Parameters:
//  - Items
func (p *Int2ZsetServiceClient) RemoveListItems(ctx context.Context, items []*TItemSet) (r *TListItemSetResult_, err error) {
  var _args11 Int2ZsetServiceRemoveListItemsArgs
  _args11.Items = items
  var _result12 Int2ZsetServiceRemoveListItemsResult
  if err = p.Client_().Call(ctx, "removeListItems", &_args11, &_result12); err != nil {
    return
  }
  return _result12.GetSuccess(), nil
}

// Parameters:
//  - SetID
//  - Offset
//  - Limit
//  - IsDesc
func (p *Int2ZsetServiceClient) ListItems(ctx context.Context, set_id int64, offset int32, limit int32, is_desc bool) (r *TListItemResult_, err error) {
  var _args13 Int2ZsetServiceListItemsArgs
  _args13.SetID = set_id
  _args13.Offset = offset
  _args13.Limit = limit
  _args13.IsDesc = is_desc
  var _result14 Int2ZsetServiceListItemsResult
  if err = p.Client_().Call(ctx, "listItems", &_args13, &_result14); err != nil {
    return
  }
  return _result14.GetSuccess(), nil
}

type Int2ZsetServiceProcessor struct {
  *TDataServiceProcessor
}

func NewInt2ZsetServiceProcessor(handler Int2ZsetService) *Int2ZsetServiceProcessor {
  self15 := &Int2ZsetServiceProcessor{NewTDataServiceProcessor(handler)}
  self15.AddToProcessorMap("addItem", &int2ZsetServiceProcessorAddItem{handler:handler})
  self15.AddToProcessorMap("addListItems", &int2ZsetServiceProcessorAddListItems{handler:handler})
  self15.AddToProcessorMap("removeItem", &int2ZsetServiceProcessorRemoveItem{handler:handler})
  self15.AddToProcessorMap("removeListItems", &int2ZsetServiceProcessorRemoveListItems{handler:handler})
  self15.AddToProcessorMap("listItems", &int2ZsetServiceProcessorListItems{handler:handler})
  return self15
}

type int2ZsetServiceProcessorAddItem struct {
  handler Int2ZsetService
}

func (p *int2ZsetServiceProcessorAddItem) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := Int2ZsetServiceAddItemArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("addItem", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := Int2ZsetServiceAddItemResult{}
var retval *TBoolResult_
  var err2 error
  if retval, err2 = p.handler.AddItem(ctx, args.SetID, args.Item, args.MaxItem); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing addItem: " + err2.Error())
    oprot.WriteMessageBegin("addItem", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("addItem", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type int2ZsetServiceProcessorAddListItems struct {
  handler Int2ZsetService
}

func (p *int2ZsetServiceProcessorAddListItems) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := Int2ZsetServiceAddListItemsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("addListItems", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := Int2ZsetServiceAddListItemsResult{}
var retval *TBoolResult_
  var err2 error
  if retval, err2 = p.handler.AddListItems(ctx, args.Items, args.MaxItem); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing addListItems: " + err2.Error())
    oprot.WriteMessageBegin("addListItems", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("addListItems", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type int2ZsetServiceProcessorRemoveItem struct {
  handler Int2ZsetService
}

func (p *int2ZsetServiceProcessorRemoveItem) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := Int2ZsetServiceRemoveItemArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("removeItem", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := Int2ZsetServiceRemoveItemResult{}
var retval *TBoolResult_
  var err2 error
  if retval, err2 = p.handler.RemoveItem(ctx, args.SetID, args.ItemKey); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing removeItem: " + err2.Error())
    oprot.WriteMessageBegin("removeItem", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("removeItem", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type int2ZsetServiceProcessorRemoveListItems struct {
  handler Int2ZsetService
}

func (p *int2ZsetServiceProcessorRemoveListItems) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := Int2ZsetServiceRemoveListItemsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("removeListItems", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := Int2ZsetServiceRemoveListItemsResult{}
var retval *TListItemSetResult_
  var err2 error
  if retval, err2 = p.handler.RemoveListItems(ctx, args.Items); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing removeListItems: " + err2.Error())
    oprot.WriteMessageBegin("removeListItems", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("removeListItems", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type int2ZsetServiceProcessorListItems struct {
  handler Int2ZsetService
}

func (p *int2ZsetServiceProcessorListItems) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := Int2ZsetServiceListItemsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("listItems", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := Int2ZsetServiceListItemsResult{}
var retval *TListItemResult_
  var err2 error
  if retval, err2 = p.handler.ListItems(ctx, args.SetID, args.Offset, args.Limit, args.IsDesc); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing listItems: " + err2.Error())
    oprot.WriteMessageBegin("listItems", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("listItems", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - SetID
//  - Item
//  - MaxItem
type Int2ZsetServiceAddItemArgs struct {
  SetID int64 `thrift:"set_id,1" db:"set_id" json:"set_id"`
  Item *TItem `thrift:"item,2" db:"item" json:"item"`
  MaxItem int64 `thrift:"max_item,3" db:"max_item" json:"max_item"`
}

func NewInt2ZsetServiceAddItemArgs() *Int2ZsetServiceAddItemArgs {
  return &Int2ZsetServiceAddItemArgs{}
}


func (p *Int2ZsetServiceAddItemArgs) GetSetID() int64 {
  return p.SetID
}
var Int2ZsetServiceAddItemArgs_Item_DEFAULT *TItem
func (p *Int2ZsetServiceAddItemArgs) GetItem() *TItem {
  if !p.IsSetItem() {
    return Int2ZsetServiceAddItemArgs_Item_DEFAULT
  }
return p.Item
}

func (p *Int2ZsetServiceAddItemArgs) GetMaxItem() int64 {
  return p.MaxItem
}
func (p *Int2ZsetServiceAddItemArgs) IsSetItem() bool {
  return p.Item != nil
}

func (p *Int2ZsetServiceAddItemArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Int2ZsetServiceAddItemArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.SetID = v
}
  return nil
}

func (p *Int2ZsetServiceAddItemArgs)  ReadField2(iprot thrift.TProtocol) error {
  p.Item = &TItem{}
  if err := p.Item.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Item), err)
  }
  return nil
}

func (p *Int2ZsetServiceAddItemArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.MaxItem = v
}
  return nil
}

func (p *Int2ZsetServiceAddItemArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("addItem_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Int2ZsetServiceAddItemArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("set_id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:set_id: ", p), err) }
  if err := oprot.WriteI64(int64(p.SetID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.set_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:set_id: ", p), err) }
  return err
}

func (p *Int2ZsetServiceAddItemArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("item", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:item: ", p), err) }
  if err := p.Item.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Item), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:item: ", p), err) }
  return err
}

func (p *Int2ZsetServiceAddItemArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("max_item", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:max_item: ", p), err) }
  if err := oprot.WriteI64(int64(p.MaxItem)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.max_item (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:max_item: ", p), err) }
  return err
}

func (p *Int2ZsetServiceAddItemArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Int2ZsetServiceAddItemArgs(%+v)", *p)
}

// Attributes:
//  - Success
type Int2ZsetServiceAddItemResult struct {
  Success *TBoolResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewInt2ZsetServiceAddItemResult() *Int2ZsetServiceAddItemResult {
  return &Int2ZsetServiceAddItemResult{}
}

var Int2ZsetServiceAddItemResult_Success_DEFAULT *TBoolResult_
func (p *Int2ZsetServiceAddItemResult) GetSuccess() *TBoolResult_ {
  if !p.IsSetSuccess() {
    return Int2ZsetServiceAddItemResult_Success_DEFAULT
  }
return p.Success
}
func (p *Int2ZsetServiceAddItemResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *Int2ZsetServiceAddItemResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Int2ZsetServiceAddItemResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TBoolResult_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *Int2ZsetServiceAddItemResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("addItem_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Int2ZsetServiceAddItemResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *Int2ZsetServiceAddItemResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Int2ZsetServiceAddItemResult(%+v)", *p)
}

// Attributes:
//  - Items
//  - MaxItem
type Int2ZsetServiceAddListItemsArgs struct {
  Items []*TItemSet `thrift:"items,1" db:"items" json:"items"`
  MaxItem int64 `thrift:"max_item,2" db:"max_item" json:"max_item"`
}

func NewInt2ZsetServiceAddListItemsArgs() *Int2ZsetServiceAddListItemsArgs {
  return &Int2ZsetServiceAddListItemsArgs{}
}


func (p *Int2ZsetServiceAddListItemsArgs) GetItems() []*TItemSet {
  return p.Items
}

func (p *Int2ZsetServiceAddListItemsArgs) GetMaxItem() int64 {
  return p.MaxItem
}
func (p *Int2ZsetServiceAddListItemsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Int2ZsetServiceAddListItemsArgs)  ReadField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TItemSet, 0, size)
  p.Items =  tSlice
  for i := 0; i < size; i ++ {
    _elem16 := &TItemSet{}
    if err := _elem16.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem16), err)
    }
    p.Items = append(p.Items, _elem16)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *Int2ZsetServiceAddListItemsArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.MaxItem = v
}
  return nil
}

func (p *Int2ZsetServiceAddListItemsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("addListItems_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Int2ZsetServiceAddListItemsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("items", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:items: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Items)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Items {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:items: ", p), err) }
  return err
}

func (p *Int2ZsetServiceAddListItemsArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("max_item", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:max_item: ", p), err) }
  if err := oprot.WriteI64(int64(p.MaxItem)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.max_item (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:max_item: ", p), err) }
  return err
}

func (p *Int2ZsetServiceAddListItemsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Int2ZsetServiceAddListItemsArgs(%+v)", *p)
}

// Attributes:
//  - Success
type Int2ZsetServiceAddListItemsResult struct {
  Success *TBoolResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewInt2ZsetServiceAddListItemsResult() *Int2ZsetServiceAddListItemsResult {
  return &Int2ZsetServiceAddListItemsResult{}
}

var Int2ZsetServiceAddListItemsResult_Success_DEFAULT *TBoolResult_
func (p *Int2ZsetServiceAddListItemsResult) GetSuccess() *TBoolResult_ {
  if !p.IsSetSuccess() {
    return Int2ZsetServiceAddListItemsResult_Success_DEFAULT
  }
return p.Success
}
func (p *Int2ZsetServiceAddListItemsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *Int2ZsetServiceAddListItemsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Int2ZsetServiceAddListItemsResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TBoolResult_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *Int2ZsetServiceAddListItemsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("addListItems_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Int2ZsetServiceAddListItemsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *Int2ZsetServiceAddListItemsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Int2ZsetServiceAddListItemsResult(%+v)", *p)
}

// Attributes:
//  - SetID
//  - ItemKey
type Int2ZsetServiceRemoveItemArgs struct {
  SetID int64 `thrift:"set_id,1" db:"set_id" json:"set_id"`
  ItemKey string `thrift:"item_key,2" db:"item_key" json:"item_key"`
}

func NewInt2ZsetServiceRemoveItemArgs() *Int2ZsetServiceRemoveItemArgs {
  return &Int2ZsetServiceRemoveItemArgs{}
}


func (p *Int2ZsetServiceRemoveItemArgs) GetSetID() int64 {
  return p.SetID
}

func (p *Int2ZsetServiceRemoveItemArgs) GetItemKey() string {
  return p.ItemKey
}
func (p *Int2ZsetServiceRemoveItemArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Int2ZsetServiceRemoveItemArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.SetID = v
}
  return nil
}

func (p *Int2ZsetServiceRemoveItemArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ItemKey = v
}
  return nil
}

func (p *Int2ZsetServiceRemoveItemArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("removeItem_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Int2ZsetServiceRemoveItemArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("set_id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:set_id: ", p), err) }
  if err := oprot.WriteI64(int64(p.SetID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.set_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:set_id: ", p), err) }
  return err
}

func (p *Int2ZsetServiceRemoveItemArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("item_key", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:item_key: ", p), err) }
  if err := oprot.WriteString(string(p.ItemKey)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.item_key (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:item_key: ", p), err) }
  return err
}

func (p *Int2ZsetServiceRemoveItemArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Int2ZsetServiceRemoveItemArgs(%+v)", *p)
}

// Attributes:
//  - Success
type Int2ZsetServiceRemoveItemResult struct {
  Success *TBoolResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewInt2ZsetServiceRemoveItemResult() *Int2ZsetServiceRemoveItemResult {
  return &Int2ZsetServiceRemoveItemResult{}
}

var Int2ZsetServiceRemoveItemResult_Success_DEFAULT *TBoolResult_
func (p *Int2ZsetServiceRemoveItemResult) GetSuccess() *TBoolResult_ {
  if !p.IsSetSuccess() {
    return Int2ZsetServiceRemoveItemResult_Success_DEFAULT
  }
return p.Success
}
func (p *Int2ZsetServiceRemoveItemResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *Int2ZsetServiceRemoveItemResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Int2ZsetServiceRemoveItemResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TBoolResult_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *Int2ZsetServiceRemoveItemResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("removeItem_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Int2ZsetServiceRemoveItemResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *Int2ZsetServiceRemoveItemResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Int2ZsetServiceRemoveItemResult(%+v)", *p)
}

// Attributes:
//  - Items
type Int2ZsetServiceRemoveListItemsArgs struct {
  Items []*TItemSet `thrift:"items,1" db:"items" json:"items"`
}

func NewInt2ZsetServiceRemoveListItemsArgs() *Int2ZsetServiceRemoveListItemsArgs {
  return &Int2ZsetServiceRemoveListItemsArgs{}
}


func (p *Int2ZsetServiceRemoveListItemsArgs) GetItems() []*TItemSet {
  return p.Items
}
func (p *Int2ZsetServiceRemoveListItemsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Int2ZsetServiceRemoveListItemsArgs)  ReadField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TItemSet, 0, size)
  p.Items =  tSlice
  for i := 0; i < size; i ++ {
    _elem17 := &TItemSet{}
    if err := _elem17.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem17), err)
    }
    p.Items = append(p.Items, _elem17)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *Int2ZsetServiceRemoveListItemsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("removeListItems_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Int2ZsetServiceRemoveListItemsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("items", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:items: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Items)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Items {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:items: ", p), err) }
  return err
}

func (p *Int2ZsetServiceRemoveListItemsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Int2ZsetServiceRemoveListItemsArgs(%+v)", *p)
}

// Attributes:
//  - Success
type Int2ZsetServiceRemoveListItemsResult struct {
  Success *TListItemSetResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewInt2ZsetServiceRemoveListItemsResult() *Int2ZsetServiceRemoveListItemsResult {
  return &Int2ZsetServiceRemoveListItemsResult{}
}

var Int2ZsetServiceRemoveListItemsResult_Success_DEFAULT *TListItemSetResult_
func (p *Int2ZsetServiceRemoveListItemsResult) GetSuccess() *TListItemSetResult_ {
  if !p.IsSetSuccess() {
    return Int2ZsetServiceRemoveListItemsResult_Success_DEFAULT
  }
return p.Success
}
func (p *Int2ZsetServiceRemoveListItemsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *Int2ZsetServiceRemoveListItemsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Int2ZsetServiceRemoveListItemsResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TListItemSetResult_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *Int2ZsetServiceRemoveListItemsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("removeListItems_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Int2ZsetServiceRemoveListItemsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *Int2ZsetServiceRemoveListItemsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Int2ZsetServiceRemoveListItemsResult(%+v)", *p)
}

// Attributes:
//  - SetID
//  - Offset
//  - Limit
//  - IsDesc
type Int2ZsetServiceListItemsArgs struct {
  SetID int64 `thrift:"set_id,1" db:"set_id" json:"set_id"`
  Offset int32 `thrift:"offset,2" db:"offset" json:"offset"`
  Limit int32 `thrift:"limit,3" db:"limit" json:"limit"`
  IsDesc bool `thrift:"is_desc,4" db:"is_desc" json:"is_desc"`
}

func NewInt2ZsetServiceListItemsArgs() *Int2ZsetServiceListItemsArgs {
  return &Int2ZsetServiceListItemsArgs{}
}


func (p *Int2ZsetServiceListItemsArgs) GetSetID() int64 {
  return p.SetID
}

func (p *Int2ZsetServiceListItemsArgs) GetOffset() int32 {
  return p.Offset
}

func (p *Int2ZsetServiceListItemsArgs) GetLimit() int32 {
  return p.Limit
}

func (p *Int2ZsetServiceListItemsArgs) GetIsDesc() bool {
  return p.IsDesc
}
func (p *Int2ZsetServiceListItemsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Int2ZsetServiceListItemsArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.SetID = v
}
  return nil
}

func (p *Int2ZsetServiceListItemsArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Offset = v
}
  return nil
}

func (p *Int2ZsetServiceListItemsArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Limit = v
}
  return nil
}

func (p *Int2ZsetServiceListItemsArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.IsDesc = v
}
  return nil
}

func (p *Int2ZsetServiceListItemsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("listItems_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Int2ZsetServiceListItemsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("set_id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:set_id: ", p), err) }
  if err := oprot.WriteI64(int64(p.SetID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.set_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:set_id: ", p), err) }
  return err
}

func (p *Int2ZsetServiceListItemsArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("offset", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:offset: ", p), err) }
  if err := oprot.WriteI32(int32(p.Offset)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.offset (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:offset: ", p), err) }
  return err
}

func (p *Int2ZsetServiceListItemsArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("limit", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:limit: ", p), err) }
  if err := oprot.WriteI32(int32(p.Limit)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.limit (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:limit: ", p), err) }
  return err
}

func (p *Int2ZsetServiceListItemsArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("is_desc", thrift.BOOL, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:is_desc: ", p), err) }
  if err := oprot.WriteBool(bool(p.IsDesc)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.is_desc (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:is_desc: ", p), err) }
  return err
}

func (p *Int2ZsetServiceListItemsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Int2ZsetServiceListItemsArgs(%+v)", *p)
}

// Attributes:
//  - Success
type Int2ZsetServiceListItemsResult struct {
  Success *TListItemResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewInt2ZsetServiceListItemsResult() *Int2ZsetServiceListItemsResult {
  return &Int2ZsetServiceListItemsResult{}
}

var Int2ZsetServiceListItemsResult_Success_DEFAULT *TListItemResult_
func (p *Int2ZsetServiceListItemsResult) GetSuccess() *TListItemResult_ {
  if !p.IsSetSuccess() {
    return Int2ZsetServiceListItemsResult_Success_DEFAULT
  }
return p.Success
}
func (p *Int2ZsetServiceListItemsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *Int2ZsetServiceListItemsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Int2ZsetServiceListItemsResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TListItemResult_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *Int2ZsetServiceListItemsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("listItems_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Int2ZsetServiceListItemsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *Int2ZsetServiceListItemsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Int2ZsetServiceListItemsResult(%+v)", *p)
}


