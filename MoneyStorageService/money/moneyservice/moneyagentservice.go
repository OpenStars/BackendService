// Autogenerated by Thrift Compiler (0.13.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package moneyservice

import (
	"bytes"
	"context"
	"fmt"
	"github.com/OpenStars/BackendService/MoneyStorageService/money/mshared"
	"github.com/OpenStars/BackendService/MoneyStorageService/money/shared"
	"github.com/apache/thrift/lib/go/thrift"
	"reflect"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

var _ = mshared.GoUnusedProtection__
var _ = shared.GoUnusedProtection__

// Attributes:
//  - Primary
//  - Secondary
//  - Third
//  - CreditLimit
//  - HardCreditLimit
type TPurses struct {
	Primary         *mshared.TMONEY           `thrift:"primary,1" db:"primary" json:"primary,omitempty"`
	Secondary       *mshared.TMONEY           `thrift:"secondary,2" db:"secondary" json:"secondary,omitempty"`
	Third           map[string]mshared.TMONEY `thrift:"third,3" db:"third" json:"third,omitempty"`
	CreditLimit     *mshared.TMONEY           `thrift:"creditLimit,4" db:"creditLimit" json:"creditLimit,omitempty"`
	HardCreditLimit *mshared.TMONEY           `thrift:"hardCreditLimit,5" db:"hardCreditLimit" json:"hardCreditLimit,omitempty"`
}

func NewTPurses() *TPurses {
	return &TPurses{}
}

var TPurses_Primary_DEFAULT mshared.TMONEY

func (p *TPurses) GetPrimary() mshared.TMONEY {
	if !p.IsSetPrimary() {
		return TPurses_Primary_DEFAULT
	}
	return *p.Primary
}

var TPurses_Secondary_DEFAULT mshared.TMONEY

func (p *TPurses) GetSecondary() mshared.TMONEY {
	if !p.IsSetSecondary() {
		return TPurses_Secondary_DEFAULT
	}
	return *p.Secondary
}

var TPurses_Third_DEFAULT map[string]mshared.TMONEY

func (p *TPurses) GetThird() map[string]mshared.TMONEY {
	return p.Third
}

var TPurses_CreditLimit_DEFAULT mshared.TMONEY

func (p *TPurses) GetCreditLimit() mshared.TMONEY {
	if !p.IsSetCreditLimit() {
		return TPurses_CreditLimit_DEFAULT
	}
	return *p.CreditLimit
}

var TPurses_HardCreditLimit_DEFAULT mshared.TMONEY

func (p *TPurses) GetHardCreditLimit() mshared.TMONEY {
	if !p.IsSetHardCreditLimit() {
		return TPurses_HardCreditLimit_DEFAULT
	}
	return *p.HardCreditLimit
}
func (p *TPurses) IsSetPrimary() bool {
	return p.Primary != nil
}

func (p *TPurses) IsSetSecondary() bool {
	return p.Secondary != nil
}

func (p *TPurses) IsSetThird() bool {
	return p.Third != nil
}

func (p *TPurses) IsSetCreditLimit() bool {
	return p.CreditLimit != nil
}

func (p *TPurses) IsSetHardCreditLimit() bool {
	return p.HardCreditLimit != nil
}

func (p *TPurses) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField5(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TPurses) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := mshared.TMONEY(v)
		p.Primary = &temp
	}
	return nil
}

func (p *TPurses) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := mshared.TMONEY(v)
		p.Secondary = &temp
	}
	return nil
}

func (p *TPurses) ReadField3(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]mshared.TMONEY, size)
	p.Third = tMap
	for i := 0; i < size; i++ {
		var _key0 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key0 = v
		}
		var _val1 mshared.TMONEY
		if v, err := iprot.ReadI64(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			temp := mshared.TMONEY(v)
			_val1 = temp
		}
		p.Third[_key0] = _val1
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *TPurses) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		temp := mshared.TMONEY(v)
		p.CreditLimit = &temp
	}
	return nil
}

func (p *TPurses) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		temp := mshared.TMONEY(v)
		p.HardCreditLimit = &temp
	}
	return nil
}

func (p *TPurses) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TPurses"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TPurses) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetPrimary() {
		if err := oprot.WriteFieldBegin("primary", thrift.I64, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:primary: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.Primary)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.primary (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:primary: ", p), err)
		}
	}
	return err
}

func (p *TPurses) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetSecondary() {
		if err := oprot.WriteFieldBegin("secondary", thrift.I64, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:secondary: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.Secondary)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.secondary (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:secondary: ", p), err)
		}
	}
	return err
}

func (p *TPurses) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetThird() {
		if err := oprot.WriteFieldBegin("third", thrift.MAP, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:third: ", p), err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.I64, len(p.Third)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.Third {
			if err := oprot.WriteString(string(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := oprot.WriteI64(int64(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:third: ", p), err)
		}
	}
	return err
}

func (p *TPurses) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetCreditLimit() {
		if err := oprot.WriteFieldBegin("creditLimit", thrift.I64, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:creditLimit: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.CreditLimit)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.creditLimit (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:creditLimit: ", p), err)
		}
	}
	return err
}

func (p *TPurses) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetHardCreditLimit() {
		if err := oprot.WriteFieldBegin("hardCreditLimit", thrift.I64, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:hardCreditLimit: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.HardCreditLimit)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.hardCreditLimit (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:hardCreditLimit: ", p), err)
		}
	}
	return err
}

func (p *TPurses) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TPurses(%+v)", *p)
}

// Attributes:
//  - Sender
//  - Receiver
//  - Amount
//  - Description
//  - CreationTime
//  - LastUpdate
//  - Type
//  - Status
//  - SourceType
//  - TargetType
//  - Result_
//  - TransId
//  - Balance
type TTransaction struct {
	Sender       *shared.TIntProfile          `thrift:"sender,1" db:"sender" json:"sender,omitempty"`
	Receiver     *shared.TIntProfile          `thrift:"receiver,2" db:"receiver" json:"receiver,omitempty"`
	Amount       *mshared.TMONEY              `thrift:"amount,3" db:"amount" json:"amount,omitempty"`
	Description  *string                      `thrift:"description,4" db:"description" json:"description,omitempty"`
	CreationTime *mshared.TTIME               `thrift:"creationTime,5" db:"creationTime" json:"creationTime,omitempty"`
	LastUpdate   *mshared.TTIME               `thrift:"lastUpdate,6" db:"lastUpdate" json:"lastUpdate,omitempty"`
	Type         *mshared.TTransactionType    `thrift:"type,7" db:"type" json:"type,omitempty"`
	Status       *mshared.TTransactionStatus  `thrift:"status,8" db:"status" json:"status,omitempty"`
	SourceType   *mshared.TPurseType          `thrift:"sourceType,9" db:"sourceType" json:"sourceType,omitempty"`
	TargetType   *mshared.TPurseType          `thrift:"targetType,10" db:"targetType" json:"targetType,omitempty"`
	Result_      *mshared.TTransactionResult_ `thrift:"result,11" db:"result" json:"result,omitempty"`
	TransId      *mshared.TTRANSID            `thrift:"transId,12" db:"transId" json:"transId,omitempty"`
	Balance      *TPurses                     `thrift:"balance,13" db:"balance" json:"balance,omitempty"`
}

func NewTTransaction() *TTransaction {
	return &TTransaction{}
}

var TTransaction_Sender_DEFAULT *shared.TIntProfile

func (p *TTransaction) GetSender() *shared.TIntProfile {
	if !p.IsSetSender() {
		return TTransaction_Sender_DEFAULT
	}
	return p.Sender
}

var TTransaction_Receiver_DEFAULT *shared.TIntProfile

func (p *TTransaction) GetReceiver() *shared.TIntProfile {
	if !p.IsSetReceiver() {
		return TTransaction_Receiver_DEFAULT
	}
	return p.Receiver
}

var TTransaction_Amount_DEFAULT mshared.TMONEY

func (p *TTransaction) GetAmount() mshared.TMONEY {
	if !p.IsSetAmount() {
		return TTransaction_Amount_DEFAULT
	}
	return *p.Amount
}

var TTransaction_Description_DEFAULT string

func (p *TTransaction) GetDescription() string {
	if !p.IsSetDescription() {
		return TTransaction_Description_DEFAULT
	}
	return *p.Description
}

var TTransaction_CreationTime_DEFAULT mshared.TTIME

func (p *TTransaction) GetCreationTime() mshared.TTIME {
	if !p.IsSetCreationTime() {
		return TTransaction_CreationTime_DEFAULT
	}
	return *p.CreationTime
}

var TTransaction_LastUpdate_DEFAULT mshared.TTIME

func (p *TTransaction) GetLastUpdate() mshared.TTIME {
	if !p.IsSetLastUpdate() {
		return TTransaction_LastUpdate_DEFAULT
	}
	return *p.LastUpdate
}

var TTransaction_Type_DEFAULT mshared.TTransactionType

func (p *TTransaction) GetType() mshared.TTransactionType {
	if !p.IsSetType() {
		return TTransaction_Type_DEFAULT
	}
	return *p.Type
}

var TTransaction_Status_DEFAULT mshared.TTransactionStatus

func (p *TTransaction) GetStatus() mshared.TTransactionStatus {
	if !p.IsSetStatus() {
		return TTransaction_Status_DEFAULT
	}
	return *p.Status
}

var TTransaction_SourceType_DEFAULT mshared.TPurseType

func (p *TTransaction) GetSourceType() mshared.TPurseType {
	if !p.IsSetSourceType() {
		return TTransaction_SourceType_DEFAULT
	}
	return *p.SourceType
}

var TTransaction_TargetType_DEFAULT mshared.TPurseType

func (p *TTransaction) GetTargetType() mshared.TPurseType {
	if !p.IsSetTargetType() {
		return TTransaction_TargetType_DEFAULT
	}
	return *p.TargetType
}

var TTransaction_Result__DEFAULT *mshared.TTransactionResult_

func (p *TTransaction) GetResult_() *mshared.TTransactionResult_ {
	if !p.IsSetResult_() {
		return TTransaction_Result__DEFAULT
	}
	return p.Result_
}

var TTransaction_TransId_DEFAULT mshared.TTRANSID

func (p *TTransaction) GetTransId() mshared.TTRANSID {
	if !p.IsSetTransId() {
		return TTransaction_TransId_DEFAULT
	}
	return *p.TransId
}

var TTransaction_Balance_DEFAULT *TPurses

func (p *TTransaction) GetBalance() *TPurses {
	if !p.IsSetBalance() {
		return TTransaction_Balance_DEFAULT
	}
	return p.Balance
}
func (p *TTransaction) IsSetSender() bool {
	return p.Sender != nil
}

func (p *TTransaction) IsSetReceiver() bool {
	return p.Receiver != nil
}

func (p *TTransaction) IsSetAmount() bool {
	return p.Amount != nil
}

func (p *TTransaction) IsSetDescription() bool {
	return p.Description != nil
}

func (p *TTransaction) IsSetCreationTime() bool {
	return p.CreationTime != nil
}

func (p *TTransaction) IsSetLastUpdate() bool {
	return p.LastUpdate != nil
}

func (p *TTransaction) IsSetType() bool {
	return p.Type != nil
}

func (p *TTransaction) IsSetStatus() bool {
	return p.Status != nil
}

func (p *TTransaction) IsSetSourceType() bool {
	return p.SourceType != nil
}

func (p *TTransaction) IsSetTargetType() bool {
	return p.TargetType != nil
}

func (p *TTransaction) IsSetResult_() bool {
	return p.Result_ != nil
}

func (p *TTransaction) IsSetTransId() bool {
	return p.TransId != nil
}

func (p *TTransaction) IsSetBalance() bool {
	return p.Balance != nil
}

func (p *TTransaction) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField5(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 6:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField6(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 7:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField7(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 8:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField8(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 9:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField9(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 10:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField10(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 11:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField11(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 12:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField12(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 13:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField13(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TTransaction) ReadField1(iprot thrift.TProtocol) error {
	p.Sender = &shared.TIntProfile{}
	if err := p.Sender.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Sender), err)
	}
	return nil
}

func (p *TTransaction) ReadField2(iprot thrift.TProtocol) error {
	p.Receiver = &shared.TIntProfile{}
	if err := p.Receiver.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Receiver), err)
	}
	return nil
}

func (p *TTransaction) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		temp := mshared.TMONEY(v)
		p.Amount = &temp
	}
	return nil
}

func (p *TTransaction) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Description = &v
	}
	return nil
}

func (p *TTransaction) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		temp := mshared.TTIME(v)
		p.CreationTime = &temp
	}
	return nil
}

func (p *TTransaction) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		temp := mshared.TTIME(v)
		p.LastUpdate = &temp
	}
	return nil
}

func (p *TTransaction) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		temp := mshared.TTransactionType(v)
		p.Type = &temp
	}
	return nil
}

func (p *TTransaction) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		temp := mshared.TTransactionStatus(v)
		p.Status = &temp
	}
	return nil
}

func (p *TTransaction) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		temp := mshared.TPurseType(v)
		p.SourceType = &temp
	}
	return nil
}

func (p *TTransaction) ReadField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		temp := mshared.TPurseType(v)
		p.TargetType = &temp
	}
	return nil
}

func (p *TTransaction) ReadField11(iprot thrift.TProtocol) error {
	p.Result_ = &mshared.TTransactionResult_{}
	if err := p.Result_.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Result_), err)
	}
	return nil
}

func (p *TTransaction) ReadField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 12: ", err)
	} else {
		temp := mshared.TTRANSID(v)
		p.TransId = &temp
	}
	return nil
}

func (p *TTransaction) ReadField13(iprot thrift.TProtocol) error {
	p.Balance = &TPurses{}
	if err := p.Balance.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Balance), err)
	}
	return nil
}

func (p *TTransaction) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TTransaction"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
		if err := p.writeField6(oprot); err != nil {
			return err
		}
		if err := p.writeField7(oprot); err != nil {
			return err
		}
		if err := p.writeField8(oprot); err != nil {
			return err
		}
		if err := p.writeField9(oprot); err != nil {
			return err
		}
		if err := p.writeField10(oprot); err != nil {
			return err
		}
		if err := p.writeField11(oprot); err != nil {
			return err
		}
		if err := p.writeField12(oprot); err != nil {
			return err
		}
		if err := p.writeField13(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TTransaction) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetSender() {
		if err := oprot.WriteFieldBegin("sender", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:sender: ", p), err)
		}
		if err := p.Sender.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Sender), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:sender: ", p), err)
		}
	}
	return err
}

func (p *TTransaction) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetReceiver() {
		if err := oprot.WriteFieldBegin("receiver", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:receiver: ", p), err)
		}
		if err := p.Receiver.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Receiver), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:receiver: ", p), err)
		}
	}
	return err
}

func (p *TTransaction) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetAmount() {
		if err := oprot.WriteFieldBegin("amount", thrift.I64, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:amount: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.Amount)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.amount (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:amount: ", p), err)
		}
	}
	return err
}

func (p *TTransaction) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetDescription() {
		if err := oprot.WriteFieldBegin("description", thrift.STRING, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:description: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Description)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.description (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:description: ", p), err)
		}
	}
	return err
}

func (p *TTransaction) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetCreationTime() {
		if err := oprot.WriteFieldBegin("creationTime", thrift.I64, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:creationTime: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.CreationTime)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.creationTime (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:creationTime: ", p), err)
		}
	}
	return err
}

func (p *TTransaction) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetLastUpdate() {
		if err := oprot.WriteFieldBegin("lastUpdate", thrift.I64, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:lastUpdate: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.LastUpdate)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.lastUpdate (6) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:lastUpdate: ", p), err)
		}
	}
	return err
}

func (p *TTransaction) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetType() {
		if err := oprot.WriteFieldBegin("type", thrift.I32, 7); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:type: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Type)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.type (7) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 7:type: ", p), err)
		}
	}
	return err
}

func (p *TTransaction) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetStatus() {
		if err := oprot.WriteFieldBegin("status", thrift.I32, 8); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:status: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Status)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.status (8) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 8:status: ", p), err)
		}
	}
	return err
}

func (p *TTransaction) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetSourceType() {
		if err := oprot.WriteFieldBegin("sourceType", thrift.I32, 9); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:sourceType: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.SourceType)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.sourceType (9) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 9:sourceType: ", p), err)
		}
	}
	return err
}

func (p *TTransaction) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetTargetType() {
		if err := oprot.WriteFieldBegin("targetType", thrift.I32, 10); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:targetType: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.TargetType)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.targetType (10) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 10:targetType: ", p), err)
		}
	}
	return err
}

func (p *TTransaction) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetResult_() {
		if err := oprot.WriteFieldBegin("result", thrift.STRUCT, 11); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:result: ", p), err)
		}
		if err := p.Result_.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Result_), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 11:result: ", p), err)
		}
	}
	return err
}

func (p *TTransaction) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetTransId() {
		if err := oprot.WriteFieldBegin("transId", thrift.I64, 12); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:transId: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.TransId)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.transId (12) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 12:transId: ", p), err)
		}
	}
	return err
}

func (p *TTransaction) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetBalance() {
		if err := oprot.WriteFieldBegin("balance", thrift.STRUCT, 13); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:balance: ", p), err)
		}
		if err := p.Balance.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Balance), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 13:balance: ", p), err)
		}
	}
	return err
}

func (p *TTransaction) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TTransaction(%+v)", *p)
}

type TMoneyAgentService interface {
	// Parameters:
	//  - UID
	//  - UType
	//  - CreditLimit
	//  - HardCreditLimit
	CreateMoneyAccountFor(ctx context.Context, uID int64, uType int32, creditLimit mshared.TMONEY, hardCreditLimit mshared.TMONEY) (r bool, err error)
	// Parameters:
	//  - UID
	//  - UType
	//  - CreditLimit
	//  - HardCreditLimit
	UpdateCreditLimit(ctx context.Context, uID int64, uType int32, creditLimit mshared.TMONEY, hardCreditLimit mshared.TMONEY) (r bool, err error)
	// Parameters:
	//  - UID
	//  - UType
	//  - PurseType
	//  - Amount
	CanTakeMoney(ctx context.Context, uID int64, uType int32, purseType mshared.TPurseType, amount mshared.TMONEY) (r *mshared.TTakeMoneyResult_, err error)
	// Parameters:
	//  - UID
	//  - UType
	GetMoney(ctx context.Context, uID int64, uType int32) (r *TPurses, err error)
	// Parameters:
	//  - UID
	//  - Amount
	//  - PurseType
	//  - UType
	//  - Description
	AddMoney(ctx context.Context, uID int64, amount mshared.TMONEY, purseType mshared.TPurseType, uType int32, description string) (r mshared.TTRANSID, err error)
	// Parameters:
	//  - UID
	//  - MoneyType
	//  - Amount
	//  - PurseType
	//  - UType
	//  - Description
	AddMoneyExt(ctx context.Context, uID int64, moneyType string, amount mshared.TMONEY, purseType mshared.TPurseType, uType int32, description string) (r mshared.TTRANSID, err error)
	// Parameters:
	//  - FromUser
	//  - FromPurse
	//  - FromUType
	//  - ToUser
	//  - ToPurse
	//  - ToUType
	//  - Amount
	//  - Description
	TransferMoney(ctx context.Context, fromUser int64, fromPurse mshared.TPurseType, fromUType int32, toUser int64, toPurse mshared.TPurseType, toUType int32, amount mshared.TMONEY, description string) (r mshared.TTRANSID, err error)
	// Parameters:
	//  - FromUser
	//  - FromPurse
	//  - FromUType
	//  - FromMoneyTypeExt
	//  - ToUser
	//  - ToPurse
	//  - ToUType
	//  - ToMoneyTypeExt
	//  - Amount
	//  - Description
	TransferMoneyExt(ctx context.Context, fromUser int64, fromPurse mshared.TPurseType, fromUType int32, fromMoneyTypeExt string, toUser int64, toPurse mshared.TPurseType, toUType int32, toMoneyTypeExt string, amount mshared.TMONEY, description string) (r mshared.TTRANSID, err error)
	// Parameters:
	//  - UID
	//  - UType
	//  - FromTime
	//  - ToTime
	GetTransactionsByRange(ctx context.Context, uID int64, uType int32, fromTime mshared.TTIME, toTime mshared.TTIME) (r []*TTransaction, err error)
	// Parameters:
	//  - UID
	//  - UType
	//  - FromTime
	//  - Count
	GetTransactionsBySlice(ctx context.Context, uID int64, uType int32, fromTime mshared.TTIME, count int32) (r []*TTransaction, err error)
	// Parameters:
	//  - UID
	//  - UType
	//  - Pos
	//  - Count
	GetTransactionsByCount(ctx context.Context, uID int64, uType int32, pos int32, count int32) (r []*TTransaction, err error)
	// Parameters:
	//  - UID
	//  - UType
	//  - Pos
	//  - Count
	GetTransactionsByCountR(ctx context.Context, uID int64, uType int32, pos int32, count int32) (r []*TTransaction, err error)
	// Parameters:
	//  - TransactionId
	GetTransactionResult_(ctx context.Context, transactionId mshared.TTRANSID) (r *mshared.TTransactionResult_, err error)
}

type TMoneyAgentServiceClient struct {
	c thrift.TClient
}

func NewTMoneyAgentServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *TMoneyAgentServiceClient {
	return &TMoneyAgentServiceClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewTMoneyAgentServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *TMoneyAgentServiceClient {
	return &TMoneyAgentServiceClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewTMoneyAgentServiceClient(c thrift.TClient) *TMoneyAgentServiceClient {
	return &TMoneyAgentServiceClient{
		c: c,
	}
}

func (p *TMoneyAgentServiceClient) Client_() thrift.TClient {
	return p.c
}

// Parameters:
//  - UID
//  - UType
//  - CreditLimit
//  - HardCreditLimit
func (p *TMoneyAgentServiceClient) CreateMoneyAccountFor(ctx context.Context, uID int64, uType int32, creditLimit mshared.TMONEY, hardCreditLimit mshared.TMONEY) (r bool, err error) {
	var _args2 TMoneyAgentServiceCreateMoneyAccountForArgs
	_args2.UID = uID
	_args2.UType = uType
	_args2.CreditLimit = creditLimit
	_args2.HardCreditLimit = hardCreditLimit
	var _result3 TMoneyAgentServiceCreateMoneyAccountForResult
	if err = p.Client_().Call(ctx, "createMoneyAccountFor", &_args2, &_result3); err != nil {
		return
	}
	return _result3.GetSuccess(), nil
}

// Parameters:
//  - UID
//  - UType
//  - CreditLimit
//  - HardCreditLimit
func (p *TMoneyAgentServiceClient) UpdateCreditLimit(ctx context.Context, uID int64, uType int32, creditLimit mshared.TMONEY, hardCreditLimit mshared.TMONEY) (r bool, err error) {
	var _args4 TMoneyAgentServiceUpdateCreditLimitArgs
	_args4.UID = uID
	_args4.UType = uType
	_args4.CreditLimit = creditLimit
	_args4.HardCreditLimit = hardCreditLimit
	var _result5 TMoneyAgentServiceUpdateCreditLimitResult
	if err = p.Client_().Call(ctx, "updateCreditLimit", &_args4, &_result5); err != nil {
		return
	}
	return _result5.GetSuccess(), nil
}

// Parameters:
//  - UID
//  - UType
//  - PurseType
//  - Amount
func (p *TMoneyAgentServiceClient) CanTakeMoney(ctx context.Context, uID int64, uType int32, purseType mshared.TPurseType, amount mshared.TMONEY) (r *mshared.TTakeMoneyResult_, err error) {
	var _args6 TMoneyAgentServiceCanTakeMoneyArgs
	_args6.UID = uID
	_args6.UType = uType
	_args6.PurseType = purseType
	_args6.Amount = amount
	var _result7 TMoneyAgentServiceCanTakeMoneyResult
	if err = p.Client_().Call(ctx, "canTakeMoney", &_args6, &_result7); err != nil {
		return
	}
	return _result7.GetSuccess(), nil
}

// Parameters:
//  - UID
//  - UType
func (p *TMoneyAgentServiceClient) GetMoney(ctx context.Context, uID int64, uType int32) (r *TPurses, err error) {
	var _args8 TMoneyAgentServiceGetMoneyArgs
	_args8.UID = uID
	_args8.UType = uType
	var _result9 TMoneyAgentServiceGetMoneyResult
	if err = p.Client_().Call(ctx, "getMoney", &_args8, &_result9); err != nil {
		return
	}
	return _result9.GetSuccess(), nil
}

// Parameters:
//  - UID
//  - Amount
//  - PurseType
//  - UType
//  - Description
func (p *TMoneyAgentServiceClient) AddMoney(ctx context.Context, uID int64, amount mshared.TMONEY, purseType mshared.TPurseType, uType int32, description string) (r mshared.TTRANSID, err error) {
	var _args10 TMoneyAgentServiceAddMoneyArgs
	_args10.UID = uID
	_args10.Amount = amount
	_args10.PurseType = purseType
	_args10.UType = uType
	_args10.Description = description
	var _result11 TMoneyAgentServiceAddMoneyResult
	if err = p.Client_().Call(ctx, "addMoney", &_args10, &_result11); err != nil {
		return
	}
	return _result11.GetSuccess(), nil
}

// Parameters:
//  - UID
//  - MoneyType
//  - Amount
//  - PurseType
//  - UType
//  - Description
func (p *TMoneyAgentServiceClient) AddMoneyExt(ctx context.Context, uID int64, moneyType string, amount mshared.TMONEY, purseType mshared.TPurseType, uType int32, description string) (r mshared.TTRANSID, err error) {
	var _args12 TMoneyAgentServiceAddMoneyExtArgs
	_args12.UID = uID
	_args12.MoneyType = moneyType
	_args12.Amount = amount
	_args12.PurseType = purseType
	_args12.UType = uType
	_args12.Description = description
	var _result13 TMoneyAgentServiceAddMoneyExtResult
	if err = p.Client_().Call(ctx, "addMoneyExt", &_args12, &_result13); err != nil {
		return
	}
	return _result13.GetSuccess(), nil
}

// Parameters:
//  - FromUser
//  - FromPurse
//  - FromUType
//  - ToUser
//  - ToPurse
//  - ToUType
//  - Amount
//  - Description
func (p *TMoneyAgentServiceClient) TransferMoney(ctx context.Context, fromUser int64, fromPurse mshared.TPurseType, fromUType int32, toUser int64, toPurse mshared.TPurseType, toUType int32, amount mshared.TMONEY, description string) (r mshared.TTRANSID, err error) {
	var _args14 TMoneyAgentServiceTransferMoneyArgs
	_args14.FromUser = fromUser
	_args14.FromPurse = fromPurse
	_args14.FromUType = fromUType
	_args14.ToUser = toUser
	_args14.ToPurse = toPurse
	_args14.ToUType = toUType
	_args14.Amount = amount
	_args14.Description = description
	var _result15 TMoneyAgentServiceTransferMoneyResult
	if err = p.Client_().Call(ctx, "transferMoney", &_args14, &_result15); err != nil {
		return
	}
	return _result15.GetSuccess(), nil
}

// Parameters:
//  - FromUser
//  - FromPurse
//  - FromUType
//  - FromMoneyTypeExt
//  - ToUser
//  - ToPurse
//  - ToUType
//  - ToMoneyTypeExt
//  - Amount
//  - Description
func (p *TMoneyAgentServiceClient) TransferMoneyExt(ctx context.Context, fromUser int64, fromPurse mshared.TPurseType, fromUType int32, fromMoneyTypeExt string, toUser int64, toPurse mshared.TPurseType, toUType int32, toMoneyTypeExt string, amount mshared.TMONEY, description string) (r mshared.TTRANSID, err error) {
	var _args16 TMoneyAgentServiceTransferMoneyExtArgs
	_args16.FromUser = fromUser
	_args16.FromPurse = fromPurse
	_args16.FromUType = fromUType
	_args16.FromMoneyTypeExt = fromMoneyTypeExt
	_args16.ToUser = toUser
	_args16.ToPurse = toPurse
	_args16.ToUType = toUType
	_args16.ToMoneyTypeExt = toMoneyTypeExt
	_args16.Amount = amount
	_args16.Description = description
	var _result17 TMoneyAgentServiceTransferMoneyExtResult
	if err = p.Client_().Call(ctx, "transferMoneyExt", &_args16, &_result17); err != nil {
		return
	}
	return _result17.GetSuccess(), nil
}

// Parameters:
//  - UID
//  - UType
//  - FromTime
//  - ToTime
func (p *TMoneyAgentServiceClient) GetTransactionsByRange(ctx context.Context, uID int64, uType int32, fromTime mshared.TTIME, toTime mshared.TTIME) (r []*TTransaction, err error) {
	var _args18 TMoneyAgentServiceGetTransactionsByRangeArgs
	_args18.UID = uID
	_args18.UType = uType
	_args18.FromTime = fromTime
	_args18.ToTime = toTime
	var _result19 TMoneyAgentServiceGetTransactionsByRangeResult
	if err = p.Client_().Call(ctx, "getTransactionsByRange", &_args18, &_result19); err != nil {
		return
	}
	return _result19.GetSuccess(), nil
}

// Parameters:
//  - UID
//  - UType
//  - FromTime
//  - Count
func (p *TMoneyAgentServiceClient) GetTransactionsBySlice(ctx context.Context, uID int64, uType int32, fromTime mshared.TTIME, count int32) (r []*TTransaction, err error) {
	var _args20 TMoneyAgentServiceGetTransactionsBySliceArgs
	_args20.UID = uID
	_args20.UType = uType
	_args20.FromTime = fromTime
	_args20.Count = count
	var _result21 TMoneyAgentServiceGetTransactionsBySliceResult
	if err = p.Client_().Call(ctx, "getTransactionsBySlice", &_args20, &_result21); err != nil {
		return
	}
	return _result21.GetSuccess(), nil
}

// Parameters:
//  - UID
//  - UType
//  - Pos
//  - Count
func (p *TMoneyAgentServiceClient) GetTransactionsByCount(ctx context.Context, uID int64, uType int32, pos int32, count int32) (r []*TTransaction, err error) {
	var _args22 TMoneyAgentServiceGetTransactionsByCountArgs
	_args22.UID = uID
	_args22.UType = uType
	_args22.Pos = pos
	_args22.Count = count
	var _result23 TMoneyAgentServiceGetTransactionsByCountResult
	if err = p.Client_().Call(ctx, "getTransactionsByCount", &_args22, &_result23); err != nil {
		return
	}
	return _result23.GetSuccess(), nil
}

// Parameters:
//  - UID
//  - UType
//  - Pos
//  - Count
func (p *TMoneyAgentServiceClient) GetTransactionsByCountR(ctx context.Context, uID int64, uType int32, pos int32, count int32) (r []*TTransaction, err error) {
	var _args24 TMoneyAgentServiceGetTransactionsByCountRArgs
	_args24.UID = uID
	_args24.UType = uType
	_args24.Pos = pos
	_args24.Count = count
	var _result25 TMoneyAgentServiceGetTransactionsByCountRResult
	if err = p.Client_().Call(ctx, "getTransactionsByCountR", &_args24, &_result25); err != nil {
		return
	}
	return _result25.GetSuccess(), nil
}

// Parameters:
//  - TransactionId
func (p *TMoneyAgentServiceClient) GetTransactionResult_(ctx context.Context, transactionId mshared.TTRANSID) (r *mshared.TTransactionResult_, err error) {
	var _args26 TMoneyAgentServiceGetTransactionResultArgs
	_args26.TransactionId = transactionId
	var _result27 TMoneyAgentServiceGetTransactionResultResult
	if err = p.Client_().Call(ctx, "getTransactionResult", &_args26, &_result27); err != nil {
		return
	}
	return _result27.GetSuccess(), nil
}

type TMoneyAgentServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      TMoneyAgentService
}

func (p *TMoneyAgentServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *TMoneyAgentServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *TMoneyAgentServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewTMoneyAgentServiceProcessor(handler TMoneyAgentService) *TMoneyAgentServiceProcessor {

	self28 := &TMoneyAgentServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self28.processorMap["createMoneyAccountFor"] = &tMoneyAgentServiceProcessorCreateMoneyAccountFor{handler: handler}
	self28.processorMap["updateCreditLimit"] = &tMoneyAgentServiceProcessorUpdateCreditLimit{handler: handler}
	self28.processorMap["canTakeMoney"] = &tMoneyAgentServiceProcessorCanTakeMoney{handler: handler}
	self28.processorMap["getMoney"] = &tMoneyAgentServiceProcessorGetMoney{handler: handler}
	self28.processorMap["addMoney"] = &tMoneyAgentServiceProcessorAddMoney{handler: handler}
	self28.processorMap["addMoneyExt"] = &tMoneyAgentServiceProcessorAddMoneyExt{handler: handler}
	self28.processorMap["transferMoney"] = &tMoneyAgentServiceProcessorTransferMoney{handler: handler}
	self28.processorMap["transferMoneyExt"] = &tMoneyAgentServiceProcessorTransferMoneyExt{handler: handler}
	self28.processorMap["getTransactionsByRange"] = &tMoneyAgentServiceProcessorGetTransactionsByRange{handler: handler}
	self28.processorMap["getTransactionsBySlice"] = &tMoneyAgentServiceProcessorGetTransactionsBySlice{handler: handler}
	self28.processorMap["getTransactionsByCount"] = &tMoneyAgentServiceProcessorGetTransactionsByCount{handler: handler}
	self28.processorMap["getTransactionsByCountR"] = &tMoneyAgentServiceProcessorGetTransactionsByCountR{handler: handler}
	self28.processorMap["getTransactionResult"] = &tMoneyAgentServiceProcessorGetTransactionResult_{handler: handler}
	return self28
}

func (p *TMoneyAgentServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x29 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x29.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush(ctx)
	return false, x29

}

type tMoneyAgentServiceProcessorCreateMoneyAccountFor struct {
	handler TMoneyAgentService
}

func (p *tMoneyAgentServiceProcessorCreateMoneyAccountFor) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TMoneyAgentServiceCreateMoneyAccountForArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("createMoneyAccountFor", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TMoneyAgentServiceCreateMoneyAccountForResult{}
	var retval bool
	var err2 error
	if retval, err2 = p.handler.CreateMoneyAccountFor(ctx, args.UID, args.UType, args.CreditLimit, args.HardCreditLimit); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing createMoneyAccountFor: "+err2.Error())
		oprot.WriteMessageBegin("createMoneyAccountFor", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("createMoneyAccountFor", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type tMoneyAgentServiceProcessorUpdateCreditLimit struct {
	handler TMoneyAgentService
}

func (p *tMoneyAgentServiceProcessorUpdateCreditLimit) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TMoneyAgentServiceUpdateCreditLimitArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("updateCreditLimit", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TMoneyAgentServiceUpdateCreditLimitResult{}
	var retval bool
	var err2 error
	if retval, err2 = p.handler.UpdateCreditLimit(ctx, args.UID, args.UType, args.CreditLimit, args.HardCreditLimit); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateCreditLimit: "+err2.Error())
		oprot.WriteMessageBegin("updateCreditLimit", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("updateCreditLimit", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type tMoneyAgentServiceProcessorCanTakeMoney struct {
	handler TMoneyAgentService
}

func (p *tMoneyAgentServiceProcessorCanTakeMoney) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TMoneyAgentServiceCanTakeMoneyArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("canTakeMoney", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TMoneyAgentServiceCanTakeMoneyResult{}
	var retval *mshared.TTakeMoneyResult_
	var err2 error
	if retval, err2 = p.handler.CanTakeMoney(ctx, args.UID, args.UType, args.PurseType, args.Amount); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing canTakeMoney: "+err2.Error())
		oprot.WriteMessageBegin("canTakeMoney", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("canTakeMoney", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type tMoneyAgentServiceProcessorGetMoney struct {
	handler TMoneyAgentService
}

func (p *tMoneyAgentServiceProcessorGetMoney) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TMoneyAgentServiceGetMoneyArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getMoney", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TMoneyAgentServiceGetMoneyResult{}
	var retval *TPurses
	var err2 error
	if retval, err2 = p.handler.GetMoney(ctx, args.UID, args.UType); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getMoney: "+err2.Error())
		oprot.WriteMessageBegin("getMoney", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getMoney", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type tMoneyAgentServiceProcessorAddMoney struct {
	handler TMoneyAgentService
}

func (p *tMoneyAgentServiceProcessorAddMoney) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TMoneyAgentServiceAddMoneyArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("addMoney", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TMoneyAgentServiceAddMoneyResult{}
	var retval mshared.TTRANSID
	var err2 error
	if retval, err2 = p.handler.AddMoney(ctx, args.UID, args.Amount, args.PurseType, args.UType, args.Description); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing addMoney: "+err2.Error())
		oprot.WriteMessageBegin("addMoney", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("addMoney", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type tMoneyAgentServiceProcessorAddMoneyExt struct {
	handler TMoneyAgentService
}

func (p *tMoneyAgentServiceProcessorAddMoneyExt) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TMoneyAgentServiceAddMoneyExtArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("addMoneyExt", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TMoneyAgentServiceAddMoneyExtResult{}
	var retval mshared.TTRANSID
	var err2 error
	if retval, err2 = p.handler.AddMoneyExt(ctx, args.UID, args.MoneyType, args.Amount, args.PurseType, args.UType, args.Description); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing addMoneyExt: "+err2.Error())
		oprot.WriteMessageBegin("addMoneyExt", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("addMoneyExt", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type tMoneyAgentServiceProcessorTransferMoney struct {
	handler TMoneyAgentService
}

func (p *tMoneyAgentServiceProcessorTransferMoney) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TMoneyAgentServiceTransferMoneyArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("transferMoney", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TMoneyAgentServiceTransferMoneyResult{}
	var retval mshared.TTRANSID
	var err2 error
	if retval, err2 = p.handler.TransferMoney(ctx, args.FromUser, args.FromPurse, args.FromUType, args.ToUser, args.ToPurse, args.ToUType, args.Amount, args.Description); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing transferMoney: "+err2.Error())
		oprot.WriteMessageBegin("transferMoney", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("transferMoney", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type tMoneyAgentServiceProcessorTransferMoneyExt struct {
	handler TMoneyAgentService
}

func (p *tMoneyAgentServiceProcessorTransferMoneyExt) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TMoneyAgentServiceTransferMoneyExtArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("transferMoneyExt", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TMoneyAgentServiceTransferMoneyExtResult{}
	var retval mshared.TTRANSID
	var err2 error
	if retval, err2 = p.handler.TransferMoneyExt(ctx, args.FromUser, args.FromPurse, args.FromUType, args.FromMoneyTypeExt, args.ToUser, args.ToPurse, args.ToUType, args.ToMoneyTypeExt, args.Amount, args.Description); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing transferMoneyExt: "+err2.Error())
		oprot.WriteMessageBegin("transferMoneyExt", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("transferMoneyExt", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type tMoneyAgentServiceProcessorGetTransactionsByRange struct {
	handler TMoneyAgentService
}

func (p *tMoneyAgentServiceProcessorGetTransactionsByRange) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TMoneyAgentServiceGetTransactionsByRangeArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getTransactionsByRange", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TMoneyAgentServiceGetTransactionsByRangeResult{}
	var retval []*TTransaction
	var err2 error
	if retval, err2 = p.handler.GetTransactionsByRange(ctx, args.UID, args.UType, args.FromTime, args.ToTime); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getTransactionsByRange: "+err2.Error())
		oprot.WriteMessageBegin("getTransactionsByRange", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getTransactionsByRange", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type tMoneyAgentServiceProcessorGetTransactionsBySlice struct {
	handler TMoneyAgentService
}

func (p *tMoneyAgentServiceProcessorGetTransactionsBySlice) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TMoneyAgentServiceGetTransactionsBySliceArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getTransactionsBySlice", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TMoneyAgentServiceGetTransactionsBySliceResult{}
	var retval []*TTransaction
	var err2 error
	if retval, err2 = p.handler.GetTransactionsBySlice(ctx, args.UID, args.UType, args.FromTime, args.Count); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getTransactionsBySlice: "+err2.Error())
		oprot.WriteMessageBegin("getTransactionsBySlice", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getTransactionsBySlice", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type tMoneyAgentServiceProcessorGetTransactionsByCount struct {
	handler TMoneyAgentService
}

func (p *tMoneyAgentServiceProcessorGetTransactionsByCount) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TMoneyAgentServiceGetTransactionsByCountArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getTransactionsByCount", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TMoneyAgentServiceGetTransactionsByCountResult{}
	var retval []*TTransaction
	var err2 error
	if retval, err2 = p.handler.GetTransactionsByCount(ctx, args.UID, args.UType, args.Pos, args.Count); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getTransactionsByCount: "+err2.Error())
		oprot.WriteMessageBegin("getTransactionsByCount", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getTransactionsByCount", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type tMoneyAgentServiceProcessorGetTransactionsByCountR struct {
	handler TMoneyAgentService
}

func (p *tMoneyAgentServiceProcessorGetTransactionsByCountR) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TMoneyAgentServiceGetTransactionsByCountRArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getTransactionsByCountR", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TMoneyAgentServiceGetTransactionsByCountRResult{}
	var retval []*TTransaction
	var err2 error
	if retval, err2 = p.handler.GetTransactionsByCountR(ctx, args.UID, args.UType, args.Pos, args.Count); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getTransactionsByCountR: "+err2.Error())
		oprot.WriteMessageBegin("getTransactionsByCountR", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getTransactionsByCountR", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type tMoneyAgentServiceProcessorGetTransactionResult_ struct {
	handler TMoneyAgentService
}

func (p *tMoneyAgentServiceProcessorGetTransactionResult_) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TMoneyAgentServiceGetTransactionResultArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getTransactionResult", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TMoneyAgentServiceGetTransactionResultResult{}
	var retval *mshared.TTransactionResult_
	var err2 error
	if retval, err2 = p.handler.GetTransactionResult_(ctx, args.TransactionId); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getTransactionResult: "+err2.Error())
		oprot.WriteMessageBegin("getTransactionResult", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getTransactionResult", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - UID
//  - UType
//  - CreditLimit
//  - HardCreditLimit
type TMoneyAgentServiceCreateMoneyAccountForArgs struct {
	UID             int64          `thrift:"uID,1" db:"uID" json:"uID"`
	UType           int32          `thrift:"uType,2" db:"uType" json:"uType"`
	CreditLimit     mshared.TMONEY `thrift:"creditLimit,3" db:"creditLimit" json:"creditLimit"`
	HardCreditLimit mshared.TMONEY `thrift:"hardCreditLimit,4" db:"hardCreditLimit" json:"hardCreditLimit"`
}

func NewTMoneyAgentServiceCreateMoneyAccountForArgs() *TMoneyAgentServiceCreateMoneyAccountForArgs {
	return &TMoneyAgentServiceCreateMoneyAccountForArgs{}
}

func (p *TMoneyAgentServiceCreateMoneyAccountForArgs) GetUID() int64 {
	return p.UID
}

func (p *TMoneyAgentServiceCreateMoneyAccountForArgs) GetUType() int32 {
	return p.UType
}

func (p *TMoneyAgentServiceCreateMoneyAccountForArgs) GetCreditLimit() mshared.TMONEY {
	return p.CreditLimit
}

func (p *TMoneyAgentServiceCreateMoneyAccountForArgs) GetHardCreditLimit() mshared.TMONEY {
	return p.HardCreditLimit
}
func (p *TMoneyAgentServiceCreateMoneyAccountForArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TMoneyAgentServiceCreateMoneyAccountForArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.UID = v
	}
	return nil
}

func (p *TMoneyAgentServiceCreateMoneyAccountForArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.UType = v
	}
	return nil
}

func (p *TMoneyAgentServiceCreateMoneyAccountForArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		temp := mshared.TMONEY(v)
		p.CreditLimit = temp
	}
	return nil
}

func (p *TMoneyAgentServiceCreateMoneyAccountForArgs) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		temp := mshared.TMONEY(v)
		p.HardCreditLimit = temp
	}
	return nil
}

func (p *TMoneyAgentServiceCreateMoneyAccountForArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("createMoneyAccountFor_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TMoneyAgentServiceCreateMoneyAccountForArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("uID", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:uID: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.UID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.uID (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:uID: ", p), err)
	}
	return err
}

func (p *TMoneyAgentServiceCreateMoneyAccountForArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("uType", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:uType: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.UType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.uType (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:uType: ", p), err)
	}
	return err
}

func (p *TMoneyAgentServiceCreateMoneyAccountForArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("creditLimit", thrift.I64, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:creditLimit: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.CreditLimit)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.creditLimit (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:creditLimit: ", p), err)
	}
	return err
}

func (p *TMoneyAgentServiceCreateMoneyAccountForArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("hardCreditLimit", thrift.I64, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:hardCreditLimit: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.HardCreditLimit)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.hardCreditLimit (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:hardCreditLimit: ", p), err)
	}
	return err
}

func (p *TMoneyAgentServiceCreateMoneyAccountForArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TMoneyAgentServiceCreateMoneyAccountForArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TMoneyAgentServiceCreateMoneyAccountForResult struct {
	Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTMoneyAgentServiceCreateMoneyAccountForResult() *TMoneyAgentServiceCreateMoneyAccountForResult {
	return &TMoneyAgentServiceCreateMoneyAccountForResult{}
}

var TMoneyAgentServiceCreateMoneyAccountForResult_Success_DEFAULT bool

func (p *TMoneyAgentServiceCreateMoneyAccountForResult) GetSuccess() bool {
	if !p.IsSetSuccess() {
		return TMoneyAgentServiceCreateMoneyAccountForResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *TMoneyAgentServiceCreateMoneyAccountForResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TMoneyAgentServiceCreateMoneyAccountForResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TMoneyAgentServiceCreateMoneyAccountForResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *TMoneyAgentServiceCreateMoneyAccountForResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("createMoneyAccountFor_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TMoneyAgentServiceCreateMoneyAccountForResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TMoneyAgentServiceCreateMoneyAccountForResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TMoneyAgentServiceCreateMoneyAccountForResult(%+v)", *p)
}

// Attributes:
//  - UID
//  - UType
//  - CreditLimit
//  - HardCreditLimit
type TMoneyAgentServiceUpdateCreditLimitArgs struct {
	UID             int64          `thrift:"uID,1" db:"uID" json:"uID"`
	UType           int32          `thrift:"uType,2" db:"uType" json:"uType"`
	CreditLimit     mshared.TMONEY `thrift:"creditLimit,3" db:"creditLimit" json:"creditLimit"`
	HardCreditLimit mshared.TMONEY `thrift:"hardCreditLimit,4" db:"hardCreditLimit" json:"hardCreditLimit"`
}

func NewTMoneyAgentServiceUpdateCreditLimitArgs() *TMoneyAgentServiceUpdateCreditLimitArgs {
	return &TMoneyAgentServiceUpdateCreditLimitArgs{}
}

func (p *TMoneyAgentServiceUpdateCreditLimitArgs) GetUID() int64 {
	return p.UID
}

func (p *TMoneyAgentServiceUpdateCreditLimitArgs) GetUType() int32 {
	return p.UType
}

func (p *TMoneyAgentServiceUpdateCreditLimitArgs) GetCreditLimit() mshared.TMONEY {
	return p.CreditLimit
}

func (p *TMoneyAgentServiceUpdateCreditLimitArgs) GetHardCreditLimit() mshared.TMONEY {
	return p.HardCreditLimit
}
func (p *TMoneyAgentServiceUpdateCreditLimitArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TMoneyAgentServiceUpdateCreditLimitArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.UID = v
	}
	return nil
}

func (p *TMoneyAgentServiceUpdateCreditLimitArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.UType = v
	}
	return nil
}

func (p *TMoneyAgentServiceUpdateCreditLimitArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		temp := mshared.TMONEY(v)
		p.CreditLimit = temp
	}
	return nil
}

func (p *TMoneyAgentServiceUpdateCreditLimitArgs) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		temp := mshared.TMONEY(v)
		p.HardCreditLimit = temp
	}
	return nil
}

func (p *TMoneyAgentServiceUpdateCreditLimitArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("updateCreditLimit_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TMoneyAgentServiceUpdateCreditLimitArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("uID", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:uID: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.UID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.uID (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:uID: ", p), err)
	}
	return err
}

func (p *TMoneyAgentServiceUpdateCreditLimitArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("uType", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:uType: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.UType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.uType (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:uType: ", p), err)
	}
	return err
}

func (p *TMoneyAgentServiceUpdateCreditLimitArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("creditLimit", thrift.I64, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:creditLimit: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.CreditLimit)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.creditLimit (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:creditLimit: ", p), err)
	}
	return err
}

func (p *TMoneyAgentServiceUpdateCreditLimitArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("hardCreditLimit", thrift.I64, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:hardCreditLimit: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.HardCreditLimit)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.hardCreditLimit (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:hardCreditLimit: ", p), err)
	}
	return err
}

func (p *TMoneyAgentServiceUpdateCreditLimitArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TMoneyAgentServiceUpdateCreditLimitArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TMoneyAgentServiceUpdateCreditLimitResult struct {
	Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTMoneyAgentServiceUpdateCreditLimitResult() *TMoneyAgentServiceUpdateCreditLimitResult {
	return &TMoneyAgentServiceUpdateCreditLimitResult{}
}

var TMoneyAgentServiceUpdateCreditLimitResult_Success_DEFAULT bool

func (p *TMoneyAgentServiceUpdateCreditLimitResult) GetSuccess() bool {
	if !p.IsSetSuccess() {
		return TMoneyAgentServiceUpdateCreditLimitResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *TMoneyAgentServiceUpdateCreditLimitResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TMoneyAgentServiceUpdateCreditLimitResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TMoneyAgentServiceUpdateCreditLimitResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *TMoneyAgentServiceUpdateCreditLimitResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("updateCreditLimit_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TMoneyAgentServiceUpdateCreditLimitResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TMoneyAgentServiceUpdateCreditLimitResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TMoneyAgentServiceUpdateCreditLimitResult(%+v)", *p)
}

// Attributes:
//  - UID
//  - UType
//  - PurseType
//  - Amount
type TMoneyAgentServiceCanTakeMoneyArgs struct {
	UID       int64              `thrift:"uID,1" db:"uID" json:"uID"`
	UType     int32              `thrift:"uType,2" db:"uType" json:"uType"`
	PurseType mshared.TPurseType `thrift:"purseType,3" db:"purseType" json:"purseType"`
	Amount    mshared.TMONEY     `thrift:"amount,4" db:"amount" json:"amount"`
}

func NewTMoneyAgentServiceCanTakeMoneyArgs() *TMoneyAgentServiceCanTakeMoneyArgs {
	return &TMoneyAgentServiceCanTakeMoneyArgs{}
}

func (p *TMoneyAgentServiceCanTakeMoneyArgs) GetUID() int64 {
	return p.UID
}

func (p *TMoneyAgentServiceCanTakeMoneyArgs) GetUType() int32 {
	return p.UType
}

func (p *TMoneyAgentServiceCanTakeMoneyArgs) GetPurseType() mshared.TPurseType {
	return p.PurseType
}

func (p *TMoneyAgentServiceCanTakeMoneyArgs) GetAmount() mshared.TMONEY {
	return p.Amount
}
func (p *TMoneyAgentServiceCanTakeMoneyArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TMoneyAgentServiceCanTakeMoneyArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.UID = v
	}
	return nil
}

func (p *TMoneyAgentServiceCanTakeMoneyArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.UType = v
	}
	return nil
}

func (p *TMoneyAgentServiceCanTakeMoneyArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		temp := mshared.TPurseType(v)
		p.PurseType = temp
	}
	return nil
}

func (p *TMoneyAgentServiceCanTakeMoneyArgs) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		temp := mshared.TMONEY(v)
		p.Amount = temp
	}
	return nil
}

func (p *TMoneyAgentServiceCanTakeMoneyArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("canTakeMoney_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TMoneyAgentServiceCanTakeMoneyArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("uID", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:uID: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.UID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.uID (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:uID: ", p), err)
	}
	return err
}

func (p *TMoneyAgentServiceCanTakeMoneyArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("uType", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:uType: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.UType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.uType (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:uType: ", p), err)
	}
	return err
}

func (p *TMoneyAgentServiceCanTakeMoneyArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("purseType", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:purseType: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.PurseType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.purseType (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:purseType: ", p), err)
	}
	return err
}

func (p *TMoneyAgentServiceCanTakeMoneyArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("amount", thrift.I64, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:amount: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.Amount)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.amount (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:amount: ", p), err)
	}
	return err
}

func (p *TMoneyAgentServiceCanTakeMoneyArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TMoneyAgentServiceCanTakeMoneyArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TMoneyAgentServiceCanTakeMoneyResult struct {
	Success *mshared.TTakeMoneyResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTMoneyAgentServiceCanTakeMoneyResult() *TMoneyAgentServiceCanTakeMoneyResult {
	return &TMoneyAgentServiceCanTakeMoneyResult{}
}

var TMoneyAgentServiceCanTakeMoneyResult_Success_DEFAULT *mshared.TTakeMoneyResult_

func (p *TMoneyAgentServiceCanTakeMoneyResult) GetSuccess() *mshared.TTakeMoneyResult_ {
	if !p.IsSetSuccess() {
		return TMoneyAgentServiceCanTakeMoneyResult_Success_DEFAULT
	}
	return p.Success
}
func (p *TMoneyAgentServiceCanTakeMoneyResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TMoneyAgentServiceCanTakeMoneyResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TMoneyAgentServiceCanTakeMoneyResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &mshared.TTakeMoneyResult_{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *TMoneyAgentServiceCanTakeMoneyResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("canTakeMoney_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TMoneyAgentServiceCanTakeMoneyResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TMoneyAgentServiceCanTakeMoneyResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TMoneyAgentServiceCanTakeMoneyResult(%+v)", *p)
}

// Attributes:
//  - UID
//  - UType
type TMoneyAgentServiceGetMoneyArgs struct {
	UID   int64 `thrift:"uID,1" db:"uID" json:"uID"`
	UType int32 `thrift:"uType,2" db:"uType" json:"uType"`
}

func NewTMoneyAgentServiceGetMoneyArgs() *TMoneyAgentServiceGetMoneyArgs {
	return &TMoneyAgentServiceGetMoneyArgs{}
}

func (p *TMoneyAgentServiceGetMoneyArgs) GetUID() int64 {
	return p.UID
}

func (p *TMoneyAgentServiceGetMoneyArgs) GetUType() int32 {
	return p.UType
}
func (p *TMoneyAgentServiceGetMoneyArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TMoneyAgentServiceGetMoneyArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.UID = v
	}
	return nil
}

func (p *TMoneyAgentServiceGetMoneyArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.UType = v
	}
	return nil
}

func (p *TMoneyAgentServiceGetMoneyArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getMoney_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TMoneyAgentServiceGetMoneyArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("uID", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:uID: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.UID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.uID (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:uID: ", p), err)
	}
	return err
}

func (p *TMoneyAgentServiceGetMoneyArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("uType", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:uType: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.UType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.uType (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:uType: ", p), err)
	}
	return err
}

func (p *TMoneyAgentServiceGetMoneyArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TMoneyAgentServiceGetMoneyArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TMoneyAgentServiceGetMoneyResult struct {
	Success *TPurses `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTMoneyAgentServiceGetMoneyResult() *TMoneyAgentServiceGetMoneyResult {
	return &TMoneyAgentServiceGetMoneyResult{}
}

var TMoneyAgentServiceGetMoneyResult_Success_DEFAULT *TPurses

func (p *TMoneyAgentServiceGetMoneyResult) GetSuccess() *TPurses {
	if !p.IsSetSuccess() {
		return TMoneyAgentServiceGetMoneyResult_Success_DEFAULT
	}
	return p.Success
}
func (p *TMoneyAgentServiceGetMoneyResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TMoneyAgentServiceGetMoneyResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TMoneyAgentServiceGetMoneyResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &TPurses{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *TMoneyAgentServiceGetMoneyResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getMoney_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TMoneyAgentServiceGetMoneyResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TMoneyAgentServiceGetMoneyResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TMoneyAgentServiceGetMoneyResult(%+v)", *p)
}

// Attributes:
//  - UID
//  - Amount
//  - PurseType
//  - UType
//  - Description
type TMoneyAgentServiceAddMoneyArgs struct {
	UID         int64              `thrift:"uID,1" db:"uID" json:"uID"`
	Amount      mshared.TMONEY     `thrift:"amount,2" db:"amount" json:"amount"`
	PurseType   mshared.TPurseType `thrift:"purseType,3" db:"purseType" json:"purseType"`
	UType       int32              `thrift:"uType,4" db:"uType" json:"uType"`
	Description string             `thrift:"description,5" db:"description" json:"description"`
}

func NewTMoneyAgentServiceAddMoneyArgs() *TMoneyAgentServiceAddMoneyArgs {
	return &TMoneyAgentServiceAddMoneyArgs{}
}

func (p *TMoneyAgentServiceAddMoneyArgs) GetUID() int64 {
	return p.UID
}

func (p *TMoneyAgentServiceAddMoneyArgs) GetAmount() mshared.TMONEY {
	return p.Amount
}

func (p *TMoneyAgentServiceAddMoneyArgs) GetPurseType() mshared.TPurseType {
	return p.PurseType
}

func (p *TMoneyAgentServiceAddMoneyArgs) GetUType() int32 {
	return p.UType
}

func (p *TMoneyAgentServiceAddMoneyArgs) GetDescription() string {
	return p.Description
}
func (p *TMoneyAgentServiceAddMoneyArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField5(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TMoneyAgentServiceAddMoneyArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.UID = v
	}
	return nil
}

func (p *TMoneyAgentServiceAddMoneyArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := mshared.TMONEY(v)
		p.Amount = temp
	}
	return nil
}

func (p *TMoneyAgentServiceAddMoneyArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		temp := mshared.TPurseType(v)
		p.PurseType = temp
	}
	return nil
}

func (p *TMoneyAgentServiceAddMoneyArgs) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.UType = v
	}
	return nil
}

func (p *TMoneyAgentServiceAddMoneyArgs) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Description = v
	}
	return nil
}

func (p *TMoneyAgentServiceAddMoneyArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("addMoney_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TMoneyAgentServiceAddMoneyArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("uID", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:uID: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.UID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.uID (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:uID: ", p), err)
	}
	return err
}

func (p *TMoneyAgentServiceAddMoneyArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("amount", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:amount: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.Amount)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.amount (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:amount: ", p), err)
	}
	return err
}

func (p *TMoneyAgentServiceAddMoneyArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("purseType", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:purseType: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.PurseType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.purseType (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:purseType: ", p), err)
	}
	return err
}

func (p *TMoneyAgentServiceAddMoneyArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("uType", thrift.I32, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:uType: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.UType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.uType (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:uType: ", p), err)
	}
	return err
}

func (p *TMoneyAgentServiceAddMoneyArgs) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("description", thrift.STRING, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:description: ", p), err)
	}
	if err := oprot.WriteString(string(p.Description)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.description (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:description: ", p), err)
	}
	return err
}

func (p *TMoneyAgentServiceAddMoneyArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TMoneyAgentServiceAddMoneyArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TMoneyAgentServiceAddMoneyResult struct {
	Success *mshared.TTRANSID `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTMoneyAgentServiceAddMoneyResult() *TMoneyAgentServiceAddMoneyResult {
	return &TMoneyAgentServiceAddMoneyResult{}
}

var TMoneyAgentServiceAddMoneyResult_Success_DEFAULT mshared.TTRANSID

func (p *TMoneyAgentServiceAddMoneyResult) GetSuccess() mshared.TTRANSID {
	if !p.IsSetSuccess() {
		return TMoneyAgentServiceAddMoneyResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *TMoneyAgentServiceAddMoneyResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TMoneyAgentServiceAddMoneyResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TMoneyAgentServiceAddMoneyResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		temp := mshared.TTRANSID(v)
		p.Success = &temp
	}
	return nil
}

func (p *TMoneyAgentServiceAddMoneyResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("addMoney_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TMoneyAgentServiceAddMoneyResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.I64, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TMoneyAgentServiceAddMoneyResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TMoneyAgentServiceAddMoneyResult(%+v)", *p)
}

// Attributes:
//  - UID
//  - MoneyType
//  - Amount
//  - PurseType
//  - UType
//  - Description
type TMoneyAgentServiceAddMoneyExtArgs struct {
	UID         int64              `thrift:"uID,1" db:"uID" json:"uID"`
	MoneyType   string             `thrift:"moneyType,2" db:"moneyType" json:"moneyType"`
	Amount      mshared.TMONEY     `thrift:"amount,3" db:"amount" json:"amount"`
	PurseType   mshared.TPurseType `thrift:"purseType,4" db:"purseType" json:"purseType"`
	UType       int32              `thrift:"uType,5" db:"uType" json:"uType"`
	Description string             `thrift:"description,6" db:"description" json:"description"`
}

func NewTMoneyAgentServiceAddMoneyExtArgs() *TMoneyAgentServiceAddMoneyExtArgs {
	return &TMoneyAgentServiceAddMoneyExtArgs{}
}

func (p *TMoneyAgentServiceAddMoneyExtArgs) GetUID() int64 {
	return p.UID
}

func (p *TMoneyAgentServiceAddMoneyExtArgs) GetMoneyType() string {
	return p.MoneyType
}

func (p *TMoneyAgentServiceAddMoneyExtArgs) GetAmount() mshared.TMONEY {
	return p.Amount
}

func (p *TMoneyAgentServiceAddMoneyExtArgs) GetPurseType() mshared.TPurseType {
	return p.PurseType
}

func (p *TMoneyAgentServiceAddMoneyExtArgs) GetUType() int32 {
	return p.UType
}

func (p *TMoneyAgentServiceAddMoneyExtArgs) GetDescription() string {
	return p.Description
}
func (p *TMoneyAgentServiceAddMoneyExtArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField5(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField6(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TMoneyAgentServiceAddMoneyExtArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.UID = v
	}
	return nil
}

func (p *TMoneyAgentServiceAddMoneyExtArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.MoneyType = v
	}
	return nil
}

func (p *TMoneyAgentServiceAddMoneyExtArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		temp := mshared.TMONEY(v)
		p.Amount = temp
	}
	return nil
}

func (p *TMoneyAgentServiceAddMoneyExtArgs) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		temp := mshared.TPurseType(v)
		p.PurseType = temp
	}
	return nil
}

func (p *TMoneyAgentServiceAddMoneyExtArgs) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.UType = v
	}
	return nil
}

func (p *TMoneyAgentServiceAddMoneyExtArgs) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.Description = v
	}
	return nil
}

func (p *TMoneyAgentServiceAddMoneyExtArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("addMoneyExt_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
		if err := p.writeField6(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TMoneyAgentServiceAddMoneyExtArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("uID", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:uID: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.UID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.uID (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:uID: ", p), err)
	}
	return err
}

func (p *TMoneyAgentServiceAddMoneyExtArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("moneyType", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:moneyType: ", p), err)
	}
	if err := oprot.WriteString(string(p.MoneyType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.moneyType (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:moneyType: ", p), err)
	}
	return err
}

func (p *TMoneyAgentServiceAddMoneyExtArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("amount", thrift.I64, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:amount: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.Amount)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.amount (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:amount: ", p), err)
	}
	return err
}

func (p *TMoneyAgentServiceAddMoneyExtArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("purseType", thrift.I32, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:purseType: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.PurseType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.purseType (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:purseType: ", p), err)
	}
	return err
}

func (p *TMoneyAgentServiceAddMoneyExtArgs) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("uType", thrift.I32, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:uType: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.UType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.uType (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:uType: ", p), err)
	}
	return err
}

func (p *TMoneyAgentServiceAddMoneyExtArgs) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("description", thrift.STRING, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:description: ", p), err)
	}
	if err := oprot.WriteString(string(p.Description)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.description (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:description: ", p), err)
	}
	return err
}

func (p *TMoneyAgentServiceAddMoneyExtArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TMoneyAgentServiceAddMoneyExtArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TMoneyAgentServiceAddMoneyExtResult struct {
	Success *mshared.TTRANSID `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTMoneyAgentServiceAddMoneyExtResult() *TMoneyAgentServiceAddMoneyExtResult {
	return &TMoneyAgentServiceAddMoneyExtResult{}
}

var TMoneyAgentServiceAddMoneyExtResult_Success_DEFAULT mshared.TTRANSID

func (p *TMoneyAgentServiceAddMoneyExtResult) GetSuccess() mshared.TTRANSID {
	if !p.IsSetSuccess() {
		return TMoneyAgentServiceAddMoneyExtResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *TMoneyAgentServiceAddMoneyExtResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TMoneyAgentServiceAddMoneyExtResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TMoneyAgentServiceAddMoneyExtResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		temp := mshared.TTRANSID(v)
		p.Success = &temp
	}
	return nil
}

func (p *TMoneyAgentServiceAddMoneyExtResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("addMoneyExt_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TMoneyAgentServiceAddMoneyExtResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.I64, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TMoneyAgentServiceAddMoneyExtResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TMoneyAgentServiceAddMoneyExtResult(%+v)", *p)
}

// Attributes:
//  - FromUser
//  - FromPurse
//  - FromUType
//  - ToUser
//  - ToPurse
//  - ToUType
//  - Amount
//  - Description
type TMoneyAgentServiceTransferMoneyArgs struct {
	FromUser    int64              `thrift:"fromUser,1" db:"fromUser" json:"fromUser"`
	FromPurse   mshared.TPurseType `thrift:"fromPurse,2" db:"fromPurse" json:"fromPurse"`
	FromUType   int32              `thrift:"fromUType,3" db:"fromUType" json:"fromUType"`
	ToUser      int64              `thrift:"toUser,4" db:"toUser" json:"toUser"`
	ToPurse     mshared.TPurseType `thrift:"toPurse,5" db:"toPurse" json:"toPurse"`
	ToUType     int32              `thrift:"toUType,6" db:"toUType" json:"toUType"`
	Amount      mshared.TMONEY     `thrift:"amount,7" db:"amount" json:"amount"`
	Description string             `thrift:"description,8" db:"description" json:"description"`
}

func NewTMoneyAgentServiceTransferMoneyArgs() *TMoneyAgentServiceTransferMoneyArgs {
	return &TMoneyAgentServiceTransferMoneyArgs{}
}

func (p *TMoneyAgentServiceTransferMoneyArgs) GetFromUser() int64 {
	return p.FromUser
}

func (p *TMoneyAgentServiceTransferMoneyArgs) GetFromPurse() mshared.TPurseType {
	return p.FromPurse
}

func (p *TMoneyAgentServiceTransferMoneyArgs) GetFromUType() int32 {
	return p.FromUType
}

func (p *TMoneyAgentServiceTransferMoneyArgs) GetToUser() int64 {
	return p.ToUser
}

func (p *TMoneyAgentServiceTransferMoneyArgs) GetToPurse() mshared.TPurseType {
	return p.ToPurse
}

func (p *TMoneyAgentServiceTransferMoneyArgs) GetToUType() int32 {
	return p.ToUType
}

func (p *TMoneyAgentServiceTransferMoneyArgs) GetAmount() mshared.TMONEY {
	return p.Amount
}

func (p *TMoneyAgentServiceTransferMoneyArgs) GetDescription() string {
	return p.Description
}
func (p *TMoneyAgentServiceTransferMoneyArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField5(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 6:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField6(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 7:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField7(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField8(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TMoneyAgentServiceTransferMoneyArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.FromUser = v
	}
	return nil
}

func (p *TMoneyAgentServiceTransferMoneyArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := mshared.TPurseType(v)
		p.FromPurse = temp
	}
	return nil
}

func (p *TMoneyAgentServiceTransferMoneyArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.FromUType = v
	}
	return nil
}

func (p *TMoneyAgentServiceTransferMoneyArgs) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.ToUser = v
	}
	return nil
}

func (p *TMoneyAgentServiceTransferMoneyArgs) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		temp := mshared.TPurseType(v)
		p.ToPurse = temp
	}
	return nil
}

func (p *TMoneyAgentServiceTransferMoneyArgs) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.ToUType = v
	}
	return nil
}

func (p *TMoneyAgentServiceTransferMoneyArgs) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		temp := mshared.TMONEY(v)
		p.Amount = temp
	}
	return nil
}

func (p *TMoneyAgentServiceTransferMoneyArgs) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.Description = v
	}
	return nil
}

func (p *TMoneyAgentServiceTransferMoneyArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("transferMoney_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
		if err := p.writeField6(oprot); err != nil {
			return err
		}
		if err := p.writeField7(oprot); err != nil {
			return err
		}
		if err := p.writeField8(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TMoneyAgentServiceTransferMoneyArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("fromUser", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:fromUser: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.FromUser)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.fromUser (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:fromUser: ", p), err)
	}
	return err
}

func (p *TMoneyAgentServiceTransferMoneyArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("fromPurse", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:fromPurse: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.FromPurse)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.fromPurse (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:fromPurse: ", p), err)
	}
	return err
}

func (p *TMoneyAgentServiceTransferMoneyArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("fromUType", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:fromUType: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.FromUType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.fromUType (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:fromUType: ", p), err)
	}
	return err
}

func (p *TMoneyAgentServiceTransferMoneyArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("toUser", thrift.I64, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:toUser: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.ToUser)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.toUser (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:toUser: ", p), err)
	}
	return err
}

func (p *TMoneyAgentServiceTransferMoneyArgs) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("toPurse", thrift.I32, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:toPurse: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ToPurse)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.toPurse (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:toPurse: ", p), err)
	}
	return err
}

func (p *TMoneyAgentServiceTransferMoneyArgs) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("toUType", thrift.I32, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:toUType: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ToUType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.toUType (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:toUType: ", p), err)
	}
	return err
}

func (p *TMoneyAgentServiceTransferMoneyArgs) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("amount", thrift.I64, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:amount: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.Amount)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.amount (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:amount: ", p), err)
	}
	return err
}

func (p *TMoneyAgentServiceTransferMoneyArgs) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("description", thrift.STRING, 8); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:description: ", p), err)
	}
	if err := oprot.WriteString(string(p.Description)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.description (8) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 8:description: ", p), err)
	}
	return err
}

func (p *TMoneyAgentServiceTransferMoneyArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TMoneyAgentServiceTransferMoneyArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TMoneyAgentServiceTransferMoneyResult struct {
	Success *mshared.TTRANSID `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTMoneyAgentServiceTransferMoneyResult() *TMoneyAgentServiceTransferMoneyResult {
	return &TMoneyAgentServiceTransferMoneyResult{}
}

var TMoneyAgentServiceTransferMoneyResult_Success_DEFAULT mshared.TTRANSID

func (p *TMoneyAgentServiceTransferMoneyResult) GetSuccess() mshared.TTRANSID {
	if !p.IsSetSuccess() {
		return TMoneyAgentServiceTransferMoneyResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *TMoneyAgentServiceTransferMoneyResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TMoneyAgentServiceTransferMoneyResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TMoneyAgentServiceTransferMoneyResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		temp := mshared.TTRANSID(v)
		p.Success = &temp
	}
	return nil
}

func (p *TMoneyAgentServiceTransferMoneyResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("transferMoney_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TMoneyAgentServiceTransferMoneyResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.I64, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TMoneyAgentServiceTransferMoneyResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TMoneyAgentServiceTransferMoneyResult(%+v)", *p)
}

// Attributes:
//  - FromUser
//  - FromPurse
//  - FromUType
//  - FromMoneyTypeExt
//  - ToUser
//  - ToPurse
//  - ToUType
//  - ToMoneyTypeExt
//  - Amount
//  - Description
type TMoneyAgentServiceTransferMoneyExtArgs struct {
	FromUser         int64              `thrift:"fromUser,1" db:"fromUser" json:"fromUser"`
	FromPurse        mshared.TPurseType `thrift:"fromPurse,2" db:"fromPurse" json:"fromPurse"`
	FromUType        int32              `thrift:"fromUType,3" db:"fromUType" json:"fromUType"`
	FromMoneyTypeExt string             `thrift:"fromMoneyTypeExt,4" db:"fromMoneyTypeExt" json:"fromMoneyTypeExt"`
	ToUser           int64              `thrift:"toUser,5" db:"toUser" json:"toUser"`
	ToPurse          mshared.TPurseType `thrift:"toPurse,6" db:"toPurse" json:"toPurse"`
	ToUType          int32              `thrift:"toUType,7" db:"toUType" json:"toUType"`
	ToMoneyTypeExt   string             `thrift:"toMoneyTypeExt,8" db:"toMoneyTypeExt" json:"toMoneyTypeExt"`
	Amount           mshared.TMONEY     `thrift:"amount,9" db:"amount" json:"amount"`
	Description      string             `thrift:"description,10" db:"description" json:"description"`
}

func NewTMoneyAgentServiceTransferMoneyExtArgs() *TMoneyAgentServiceTransferMoneyExtArgs {
	return &TMoneyAgentServiceTransferMoneyExtArgs{}
}

func (p *TMoneyAgentServiceTransferMoneyExtArgs) GetFromUser() int64 {
	return p.FromUser
}

func (p *TMoneyAgentServiceTransferMoneyExtArgs) GetFromPurse() mshared.TPurseType {
	return p.FromPurse
}

func (p *TMoneyAgentServiceTransferMoneyExtArgs) GetFromUType() int32 {
	return p.FromUType
}

func (p *TMoneyAgentServiceTransferMoneyExtArgs) GetFromMoneyTypeExt() string {
	return p.FromMoneyTypeExt
}

func (p *TMoneyAgentServiceTransferMoneyExtArgs) GetToUser() int64 {
	return p.ToUser
}

func (p *TMoneyAgentServiceTransferMoneyExtArgs) GetToPurse() mshared.TPurseType {
	return p.ToPurse
}

func (p *TMoneyAgentServiceTransferMoneyExtArgs) GetToUType() int32 {
	return p.ToUType
}

func (p *TMoneyAgentServiceTransferMoneyExtArgs) GetToMoneyTypeExt() string {
	return p.ToMoneyTypeExt
}

func (p *TMoneyAgentServiceTransferMoneyExtArgs) GetAmount() mshared.TMONEY {
	return p.Amount
}

func (p *TMoneyAgentServiceTransferMoneyExtArgs) GetDescription() string {
	return p.Description
}
func (p *TMoneyAgentServiceTransferMoneyExtArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField5(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 6:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField6(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 7:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField7(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField8(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 9:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField9(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 10:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField10(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TMoneyAgentServiceTransferMoneyExtArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.FromUser = v
	}
	return nil
}

func (p *TMoneyAgentServiceTransferMoneyExtArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := mshared.TPurseType(v)
		p.FromPurse = temp
	}
	return nil
}

func (p *TMoneyAgentServiceTransferMoneyExtArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.FromUType = v
	}
	return nil
}

func (p *TMoneyAgentServiceTransferMoneyExtArgs) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.FromMoneyTypeExt = v
	}
	return nil
}

func (p *TMoneyAgentServiceTransferMoneyExtArgs) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.ToUser = v
	}
	return nil
}

func (p *TMoneyAgentServiceTransferMoneyExtArgs) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		temp := mshared.TPurseType(v)
		p.ToPurse = temp
	}
	return nil
}

func (p *TMoneyAgentServiceTransferMoneyExtArgs) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.ToUType = v
	}
	return nil
}

func (p *TMoneyAgentServiceTransferMoneyExtArgs) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.ToMoneyTypeExt = v
	}
	return nil
}

func (p *TMoneyAgentServiceTransferMoneyExtArgs) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		temp := mshared.TMONEY(v)
		p.Amount = temp
	}
	return nil
}

func (p *TMoneyAgentServiceTransferMoneyExtArgs) ReadField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		p.Description = v
	}
	return nil
}

func (p *TMoneyAgentServiceTransferMoneyExtArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("transferMoneyExt_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
		if err := p.writeField6(oprot); err != nil {
			return err
		}
		if err := p.writeField7(oprot); err != nil {
			return err
		}
		if err := p.writeField8(oprot); err != nil {
			return err
		}
		if err := p.writeField9(oprot); err != nil {
			return err
		}
		if err := p.writeField10(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TMoneyAgentServiceTransferMoneyExtArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("fromUser", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:fromUser: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.FromUser)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.fromUser (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:fromUser: ", p), err)
	}
	return err
}

func (p *TMoneyAgentServiceTransferMoneyExtArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("fromPurse", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:fromPurse: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.FromPurse)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.fromPurse (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:fromPurse: ", p), err)
	}
	return err
}

func (p *TMoneyAgentServiceTransferMoneyExtArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("fromUType", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:fromUType: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.FromUType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.fromUType (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:fromUType: ", p), err)
	}
	return err
}

func (p *TMoneyAgentServiceTransferMoneyExtArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("fromMoneyTypeExt", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:fromMoneyTypeExt: ", p), err)
	}
	if err := oprot.WriteString(string(p.FromMoneyTypeExt)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.fromMoneyTypeExt (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:fromMoneyTypeExt: ", p), err)
	}
	return err
}

func (p *TMoneyAgentServiceTransferMoneyExtArgs) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("toUser", thrift.I64, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:toUser: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.ToUser)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.toUser (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:toUser: ", p), err)
	}
	return err
}

func (p *TMoneyAgentServiceTransferMoneyExtArgs) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("toPurse", thrift.I32, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:toPurse: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ToPurse)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.toPurse (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:toPurse: ", p), err)
	}
	return err
}

func (p *TMoneyAgentServiceTransferMoneyExtArgs) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("toUType", thrift.I32, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:toUType: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ToUType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.toUType (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:toUType: ", p), err)
	}
	return err
}

func (p *TMoneyAgentServiceTransferMoneyExtArgs) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("toMoneyTypeExt", thrift.STRING, 8); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:toMoneyTypeExt: ", p), err)
	}
	if err := oprot.WriteString(string(p.ToMoneyTypeExt)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.toMoneyTypeExt (8) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 8:toMoneyTypeExt: ", p), err)
	}
	return err
}

func (p *TMoneyAgentServiceTransferMoneyExtArgs) writeField9(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("amount", thrift.I64, 9); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:amount: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.Amount)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.amount (9) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 9:amount: ", p), err)
	}
	return err
}

func (p *TMoneyAgentServiceTransferMoneyExtArgs) writeField10(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("description", thrift.STRING, 10); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:description: ", p), err)
	}
	if err := oprot.WriteString(string(p.Description)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.description (10) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 10:description: ", p), err)
	}
	return err
}

func (p *TMoneyAgentServiceTransferMoneyExtArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TMoneyAgentServiceTransferMoneyExtArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TMoneyAgentServiceTransferMoneyExtResult struct {
	Success *mshared.TTRANSID `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTMoneyAgentServiceTransferMoneyExtResult() *TMoneyAgentServiceTransferMoneyExtResult {
	return &TMoneyAgentServiceTransferMoneyExtResult{}
}

var TMoneyAgentServiceTransferMoneyExtResult_Success_DEFAULT mshared.TTRANSID

func (p *TMoneyAgentServiceTransferMoneyExtResult) GetSuccess() mshared.TTRANSID {
	if !p.IsSetSuccess() {
		return TMoneyAgentServiceTransferMoneyExtResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *TMoneyAgentServiceTransferMoneyExtResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TMoneyAgentServiceTransferMoneyExtResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TMoneyAgentServiceTransferMoneyExtResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		temp := mshared.TTRANSID(v)
		p.Success = &temp
	}
	return nil
}

func (p *TMoneyAgentServiceTransferMoneyExtResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("transferMoneyExt_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TMoneyAgentServiceTransferMoneyExtResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.I64, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TMoneyAgentServiceTransferMoneyExtResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TMoneyAgentServiceTransferMoneyExtResult(%+v)", *p)
}

// Attributes:
//  - UID
//  - UType
//  - FromTime
//  - ToTime
type TMoneyAgentServiceGetTransactionsByRangeArgs struct {
	UID      int64         `thrift:"uID,1" db:"uID" json:"uID"`
	UType    int32         `thrift:"uType,2" db:"uType" json:"uType"`
	FromTime mshared.TTIME `thrift:"fromTime,3" db:"fromTime" json:"fromTime"`
	ToTime   mshared.TTIME `thrift:"toTime,4" db:"toTime" json:"toTime"`
}

func NewTMoneyAgentServiceGetTransactionsByRangeArgs() *TMoneyAgentServiceGetTransactionsByRangeArgs {
	return &TMoneyAgentServiceGetTransactionsByRangeArgs{}
}

func (p *TMoneyAgentServiceGetTransactionsByRangeArgs) GetUID() int64 {
	return p.UID
}

func (p *TMoneyAgentServiceGetTransactionsByRangeArgs) GetUType() int32 {
	return p.UType
}

func (p *TMoneyAgentServiceGetTransactionsByRangeArgs) GetFromTime() mshared.TTIME {
	return p.FromTime
}

func (p *TMoneyAgentServiceGetTransactionsByRangeArgs) GetToTime() mshared.TTIME {
	return p.ToTime
}
func (p *TMoneyAgentServiceGetTransactionsByRangeArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TMoneyAgentServiceGetTransactionsByRangeArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.UID = v
	}
	return nil
}

func (p *TMoneyAgentServiceGetTransactionsByRangeArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.UType = v
	}
	return nil
}

func (p *TMoneyAgentServiceGetTransactionsByRangeArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		temp := mshared.TTIME(v)
		p.FromTime = temp
	}
	return nil
}

func (p *TMoneyAgentServiceGetTransactionsByRangeArgs) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		temp := mshared.TTIME(v)
		p.ToTime = temp
	}
	return nil
}

func (p *TMoneyAgentServiceGetTransactionsByRangeArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getTransactionsByRange_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TMoneyAgentServiceGetTransactionsByRangeArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("uID", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:uID: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.UID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.uID (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:uID: ", p), err)
	}
	return err
}

func (p *TMoneyAgentServiceGetTransactionsByRangeArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("uType", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:uType: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.UType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.uType (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:uType: ", p), err)
	}
	return err
}

func (p *TMoneyAgentServiceGetTransactionsByRangeArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("fromTime", thrift.I64, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:fromTime: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.FromTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.fromTime (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:fromTime: ", p), err)
	}
	return err
}

func (p *TMoneyAgentServiceGetTransactionsByRangeArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("toTime", thrift.I64, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:toTime: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.ToTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.toTime (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:toTime: ", p), err)
	}
	return err
}

func (p *TMoneyAgentServiceGetTransactionsByRangeArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TMoneyAgentServiceGetTransactionsByRangeArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TMoneyAgentServiceGetTransactionsByRangeResult struct {
	Success []*TTransaction `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTMoneyAgentServiceGetTransactionsByRangeResult() *TMoneyAgentServiceGetTransactionsByRangeResult {
	return &TMoneyAgentServiceGetTransactionsByRangeResult{}
}

var TMoneyAgentServiceGetTransactionsByRangeResult_Success_DEFAULT []*TTransaction

func (p *TMoneyAgentServiceGetTransactionsByRangeResult) GetSuccess() []*TTransaction {
	return p.Success
}
func (p *TMoneyAgentServiceGetTransactionsByRangeResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TMoneyAgentServiceGetTransactionsByRangeResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TMoneyAgentServiceGetTransactionsByRangeResult) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*TTransaction, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		_elem30 := &TTransaction{}
		if err := _elem30.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem30), err)
		}
		p.Success = append(p.Success, _elem30)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TMoneyAgentServiceGetTransactionsByRangeResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getTransactionsByRange_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TMoneyAgentServiceGetTransactionsByRangeResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TMoneyAgentServiceGetTransactionsByRangeResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TMoneyAgentServiceGetTransactionsByRangeResult(%+v)", *p)
}

// Attributes:
//  - UID
//  - UType
//  - FromTime
//  - Count
type TMoneyAgentServiceGetTransactionsBySliceArgs struct {
	UID      int64         `thrift:"uID,1" db:"uID" json:"uID"`
	UType    int32         `thrift:"uType,2" db:"uType" json:"uType"`
	FromTime mshared.TTIME `thrift:"fromTime,3" db:"fromTime" json:"fromTime"`
	Count    int32         `thrift:"count,4" db:"count" json:"count"`
}

func NewTMoneyAgentServiceGetTransactionsBySliceArgs() *TMoneyAgentServiceGetTransactionsBySliceArgs {
	return &TMoneyAgentServiceGetTransactionsBySliceArgs{}
}

func (p *TMoneyAgentServiceGetTransactionsBySliceArgs) GetUID() int64 {
	return p.UID
}

func (p *TMoneyAgentServiceGetTransactionsBySliceArgs) GetUType() int32 {
	return p.UType
}

func (p *TMoneyAgentServiceGetTransactionsBySliceArgs) GetFromTime() mshared.TTIME {
	return p.FromTime
}

func (p *TMoneyAgentServiceGetTransactionsBySliceArgs) GetCount() int32 {
	return p.Count
}
func (p *TMoneyAgentServiceGetTransactionsBySliceArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TMoneyAgentServiceGetTransactionsBySliceArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.UID = v
	}
	return nil
}

func (p *TMoneyAgentServiceGetTransactionsBySliceArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.UType = v
	}
	return nil
}

func (p *TMoneyAgentServiceGetTransactionsBySliceArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		temp := mshared.TTIME(v)
		p.FromTime = temp
	}
	return nil
}

func (p *TMoneyAgentServiceGetTransactionsBySliceArgs) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Count = v
	}
	return nil
}

func (p *TMoneyAgentServiceGetTransactionsBySliceArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getTransactionsBySlice_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TMoneyAgentServiceGetTransactionsBySliceArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("uID", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:uID: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.UID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.uID (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:uID: ", p), err)
	}
	return err
}

func (p *TMoneyAgentServiceGetTransactionsBySliceArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("uType", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:uType: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.UType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.uType (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:uType: ", p), err)
	}
	return err
}

func (p *TMoneyAgentServiceGetTransactionsBySliceArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("fromTime", thrift.I64, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:fromTime: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.FromTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.fromTime (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:fromTime: ", p), err)
	}
	return err
}

func (p *TMoneyAgentServiceGetTransactionsBySliceArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("count", thrift.I32, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:count: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Count)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.count (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:count: ", p), err)
	}
	return err
}

func (p *TMoneyAgentServiceGetTransactionsBySliceArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TMoneyAgentServiceGetTransactionsBySliceArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TMoneyAgentServiceGetTransactionsBySliceResult struct {
	Success []*TTransaction `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTMoneyAgentServiceGetTransactionsBySliceResult() *TMoneyAgentServiceGetTransactionsBySliceResult {
	return &TMoneyAgentServiceGetTransactionsBySliceResult{}
}

var TMoneyAgentServiceGetTransactionsBySliceResult_Success_DEFAULT []*TTransaction

func (p *TMoneyAgentServiceGetTransactionsBySliceResult) GetSuccess() []*TTransaction {
	return p.Success
}
func (p *TMoneyAgentServiceGetTransactionsBySliceResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TMoneyAgentServiceGetTransactionsBySliceResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TMoneyAgentServiceGetTransactionsBySliceResult) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*TTransaction, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		_elem31 := &TTransaction{}
		if err := _elem31.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem31), err)
		}
		p.Success = append(p.Success, _elem31)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TMoneyAgentServiceGetTransactionsBySliceResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getTransactionsBySlice_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TMoneyAgentServiceGetTransactionsBySliceResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TMoneyAgentServiceGetTransactionsBySliceResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TMoneyAgentServiceGetTransactionsBySliceResult(%+v)", *p)
}

// Attributes:
//  - UID
//  - UType
//  - Pos
//  - Count
type TMoneyAgentServiceGetTransactionsByCountArgs struct {
	UID   int64 `thrift:"uID,1" db:"uID" json:"uID"`
	UType int32 `thrift:"uType,2" db:"uType" json:"uType"`
	Pos   int32 `thrift:"pos,3" db:"pos" json:"pos"`
	Count int32 `thrift:"count,4" db:"count" json:"count"`
}

func NewTMoneyAgentServiceGetTransactionsByCountArgs() *TMoneyAgentServiceGetTransactionsByCountArgs {
	return &TMoneyAgentServiceGetTransactionsByCountArgs{}
}

func (p *TMoneyAgentServiceGetTransactionsByCountArgs) GetUID() int64 {
	return p.UID
}

func (p *TMoneyAgentServiceGetTransactionsByCountArgs) GetUType() int32 {
	return p.UType
}

func (p *TMoneyAgentServiceGetTransactionsByCountArgs) GetPos() int32 {
	return p.Pos
}

func (p *TMoneyAgentServiceGetTransactionsByCountArgs) GetCount() int32 {
	return p.Count
}
func (p *TMoneyAgentServiceGetTransactionsByCountArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TMoneyAgentServiceGetTransactionsByCountArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.UID = v
	}
	return nil
}

func (p *TMoneyAgentServiceGetTransactionsByCountArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.UType = v
	}
	return nil
}

func (p *TMoneyAgentServiceGetTransactionsByCountArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Pos = v
	}
	return nil
}

func (p *TMoneyAgentServiceGetTransactionsByCountArgs) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Count = v
	}
	return nil
}

func (p *TMoneyAgentServiceGetTransactionsByCountArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getTransactionsByCount_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TMoneyAgentServiceGetTransactionsByCountArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("uID", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:uID: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.UID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.uID (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:uID: ", p), err)
	}
	return err
}

func (p *TMoneyAgentServiceGetTransactionsByCountArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("uType", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:uType: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.UType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.uType (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:uType: ", p), err)
	}
	return err
}

func (p *TMoneyAgentServiceGetTransactionsByCountArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("pos", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:pos: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Pos)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.pos (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:pos: ", p), err)
	}
	return err
}

func (p *TMoneyAgentServiceGetTransactionsByCountArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("count", thrift.I32, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:count: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Count)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.count (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:count: ", p), err)
	}
	return err
}

func (p *TMoneyAgentServiceGetTransactionsByCountArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TMoneyAgentServiceGetTransactionsByCountArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TMoneyAgentServiceGetTransactionsByCountResult struct {
	Success []*TTransaction `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTMoneyAgentServiceGetTransactionsByCountResult() *TMoneyAgentServiceGetTransactionsByCountResult {
	return &TMoneyAgentServiceGetTransactionsByCountResult{}
}

var TMoneyAgentServiceGetTransactionsByCountResult_Success_DEFAULT []*TTransaction

func (p *TMoneyAgentServiceGetTransactionsByCountResult) GetSuccess() []*TTransaction {
	return p.Success
}
func (p *TMoneyAgentServiceGetTransactionsByCountResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TMoneyAgentServiceGetTransactionsByCountResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TMoneyAgentServiceGetTransactionsByCountResult) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*TTransaction, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		_elem32 := &TTransaction{}
		if err := _elem32.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem32), err)
		}
		p.Success = append(p.Success, _elem32)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TMoneyAgentServiceGetTransactionsByCountResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getTransactionsByCount_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TMoneyAgentServiceGetTransactionsByCountResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TMoneyAgentServiceGetTransactionsByCountResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TMoneyAgentServiceGetTransactionsByCountResult(%+v)", *p)
}

// Attributes:
//  - UID
//  - UType
//  - Pos
//  - Count
type TMoneyAgentServiceGetTransactionsByCountRArgs struct {
	UID   int64 `thrift:"uID,1" db:"uID" json:"uID"`
	UType int32 `thrift:"uType,2" db:"uType" json:"uType"`
	Pos   int32 `thrift:"pos,3" db:"pos" json:"pos"`
	Count int32 `thrift:"count,4" db:"count" json:"count"`
}

func NewTMoneyAgentServiceGetTransactionsByCountRArgs() *TMoneyAgentServiceGetTransactionsByCountRArgs {
	return &TMoneyAgentServiceGetTransactionsByCountRArgs{}
}

func (p *TMoneyAgentServiceGetTransactionsByCountRArgs) GetUID() int64 {
	return p.UID
}

func (p *TMoneyAgentServiceGetTransactionsByCountRArgs) GetUType() int32 {
	return p.UType
}

func (p *TMoneyAgentServiceGetTransactionsByCountRArgs) GetPos() int32 {
	return p.Pos
}

func (p *TMoneyAgentServiceGetTransactionsByCountRArgs) GetCount() int32 {
	return p.Count
}
func (p *TMoneyAgentServiceGetTransactionsByCountRArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TMoneyAgentServiceGetTransactionsByCountRArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.UID = v
	}
	return nil
}

func (p *TMoneyAgentServiceGetTransactionsByCountRArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.UType = v
	}
	return nil
}

func (p *TMoneyAgentServiceGetTransactionsByCountRArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Pos = v
	}
	return nil
}

func (p *TMoneyAgentServiceGetTransactionsByCountRArgs) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Count = v
	}
	return nil
}

func (p *TMoneyAgentServiceGetTransactionsByCountRArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getTransactionsByCountR_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TMoneyAgentServiceGetTransactionsByCountRArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("uID", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:uID: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.UID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.uID (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:uID: ", p), err)
	}
	return err
}

func (p *TMoneyAgentServiceGetTransactionsByCountRArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("uType", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:uType: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.UType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.uType (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:uType: ", p), err)
	}
	return err
}

func (p *TMoneyAgentServiceGetTransactionsByCountRArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("pos", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:pos: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Pos)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.pos (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:pos: ", p), err)
	}
	return err
}

func (p *TMoneyAgentServiceGetTransactionsByCountRArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("count", thrift.I32, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:count: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Count)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.count (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:count: ", p), err)
	}
	return err
}

func (p *TMoneyAgentServiceGetTransactionsByCountRArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TMoneyAgentServiceGetTransactionsByCountRArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TMoneyAgentServiceGetTransactionsByCountRResult struct {
	Success []*TTransaction `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTMoneyAgentServiceGetTransactionsByCountRResult() *TMoneyAgentServiceGetTransactionsByCountRResult {
	return &TMoneyAgentServiceGetTransactionsByCountRResult{}
}

var TMoneyAgentServiceGetTransactionsByCountRResult_Success_DEFAULT []*TTransaction

func (p *TMoneyAgentServiceGetTransactionsByCountRResult) GetSuccess() []*TTransaction {
	return p.Success
}
func (p *TMoneyAgentServiceGetTransactionsByCountRResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TMoneyAgentServiceGetTransactionsByCountRResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TMoneyAgentServiceGetTransactionsByCountRResult) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*TTransaction, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		_elem33 := &TTransaction{}
		if err := _elem33.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem33), err)
		}
		p.Success = append(p.Success, _elem33)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TMoneyAgentServiceGetTransactionsByCountRResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getTransactionsByCountR_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TMoneyAgentServiceGetTransactionsByCountRResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TMoneyAgentServiceGetTransactionsByCountRResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TMoneyAgentServiceGetTransactionsByCountRResult(%+v)", *p)
}

// Attributes:
//  - TransactionId
type TMoneyAgentServiceGetTransactionResultArgs struct {
	TransactionId mshared.TTRANSID `thrift:"transactionId,1" db:"transactionId" json:"transactionId"`
}

func NewTMoneyAgentServiceGetTransactionResultArgs() *TMoneyAgentServiceGetTransactionResultArgs {
	return &TMoneyAgentServiceGetTransactionResultArgs{}
}

func (p *TMoneyAgentServiceGetTransactionResultArgs) GetTransactionId() mshared.TTRANSID {
	return p.TransactionId
}
func (p *TMoneyAgentServiceGetTransactionResultArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TMoneyAgentServiceGetTransactionResultArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := mshared.TTRANSID(v)
		p.TransactionId = temp
	}
	return nil
}

func (p *TMoneyAgentServiceGetTransactionResultArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getTransactionResult_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TMoneyAgentServiceGetTransactionResultArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("transactionId", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:transactionId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.TransactionId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.transactionId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:transactionId: ", p), err)
	}
	return err
}

func (p *TMoneyAgentServiceGetTransactionResultArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TMoneyAgentServiceGetTransactionResultArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TMoneyAgentServiceGetTransactionResultResult struct {
	Success *mshared.TTransactionResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTMoneyAgentServiceGetTransactionResultResult() *TMoneyAgentServiceGetTransactionResultResult {
	return &TMoneyAgentServiceGetTransactionResultResult{}
}

var TMoneyAgentServiceGetTransactionResultResult_Success_DEFAULT *mshared.TTransactionResult_

func (p *TMoneyAgentServiceGetTransactionResultResult) GetSuccess() *mshared.TTransactionResult_ {
	if !p.IsSetSuccess() {
		return TMoneyAgentServiceGetTransactionResultResult_Success_DEFAULT
	}
	return p.Success
}
func (p *TMoneyAgentServiceGetTransactionResultResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TMoneyAgentServiceGetTransactionResultResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TMoneyAgentServiceGetTransactionResultResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &mshared.TTransactionResult_{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *TMoneyAgentServiceGetTransactionResultResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getTransactionResult_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TMoneyAgentServiceGetTransactionResultResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TMoneyAgentServiceGetTransactionResultResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TMoneyAgentServiceGetTransactionResultResult(%+v)", *p)
}
