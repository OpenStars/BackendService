// Autogenerated by Thrift Compiler (0.13.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package mshared

import (
	"bytes"
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"reflect"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

type TErrorCode int64

const (
	TErrorCode_UNSPECIFIED                TErrorCode = 0
	TErrorCode_SUCCESS                    TErrorCode = 1
	TErrorCode_FAILED_UNKNOWN             TErrorCode = 2
	TErrorCode_NOT_AVAILABLE              TErrorCode = 3
	TErrorCode_NO_PERMISSION              TErrorCode = 4
	TErrorCode_INVALID_MONEY              TErrorCode = 5
	TErrorCode_INVALID_PURSE              TErrorCode = 6
	TErrorCode_ACC_NOT_ACTIVATED          TErrorCode = 11
	TErrorCode_ACC_INVALID_LOCK           TErrorCode = 12
	TErrorCode_ACC_INVALID_KEY            TErrorCode = 13
	TErrorCode_ACC_NOT_ENOUGH_MONEY       TErrorCode = 14
	TErrorCode_TRANSFER_REJECTED          TErrorCode = 20
	TErrorCode_TRANSFER_CANNOT_ADD_MONEY  TErrorCode = 21
	TErrorCode_TRANSFER_CANNOT_TAKE_MONEY TErrorCode = 22
)

func (p TErrorCode) String() string {
	switch p {
	case TErrorCode_UNSPECIFIED:
		return "UNSPECIFIED"
	case TErrorCode_SUCCESS:
		return "SUCCESS"
	case TErrorCode_FAILED_UNKNOWN:
		return "FAILED_UNKNOWN"
	case TErrorCode_NOT_AVAILABLE:
		return "NOT_AVAILABLE"
	case TErrorCode_NO_PERMISSION:
		return "NO_PERMISSION"
	case TErrorCode_INVALID_MONEY:
		return "INVALID_MONEY"
	case TErrorCode_INVALID_PURSE:
		return "INVALID_PURSE"
	case TErrorCode_ACC_NOT_ACTIVATED:
		return "ACC_NOT_ACTIVATED"
	case TErrorCode_ACC_INVALID_LOCK:
		return "ACC_INVALID_LOCK"
	case TErrorCode_ACC_INVALID_KEY:
		return "ACC_INVALID_KEY"
	case TErrorCode_ACC_NOT_ENOUGH_MONEY:
		return "ACC_NOT_ENOUGH_MONEY"
	case TErrorCode_TRANSFER_REJECTED:
		return "TRANSFER_REJECTED"
	case TErrorCode_TRANSFER_CANNOT_ADD_MONEY:
		return "TRANSFER_CANNOT_ADD_MONEY"
	case TErrorCode_TRANSFER_CANNOT_TAKE_MONEY:
		return "TRANSFER_CANNOT_TAKE_MONEY"
	}
	return "<UNSET>"
}

func TErrorCodeFromString(s string) (TErrorCode, error) {
	switch s {
	case "UNSPECIFIED":
		return TErrorCode_UNSPECIFIED, nil
	case "SUCCESS":
		return TErrorCode_SUCCESS, nil
	case "FAILED_UNKNOWN":
		return TErrorCode_FAILED_UNKNOWN, nil
	case "NOT_AVAILABLE":
		return TErrorCode_NOT_AVAILABLE, nil
	case "NO_PERMISSION":
		return TErrorCode_NO_PERMISSION, nil
	case "INVALID_MONEY":
		return TErrorCode_INVALID_MONEY, nil
	case "INVALID_PURSE":
		return TErrorCode_INVALID_PURSE, nil
	case "ACC_NOT_ACTIVATED":
		return TErrorCode_ACC_NOT_ACTIVATED, nil
	case "ACC_INVALID_LOCK":
		return TErrorCode_ACC_INVALID_LOCK, nil
	case "ACC_INVALID_KEY":
		return TErrorCode_ACC_INVALID_KEY, nil
	case "ACC_NOT_ENOUGH_MONEY":
		return TErrorCode_ACC_NOT_ENOUGH_MONEY, nil
	case "TRANSFER_REJECTED":
		return TErrorCode_TRANSFER_REJECTED, nil
	case "TRANSFER_CANNOT_ADD_MONEY":
		return TErrorCode_TRANSFER_CANNOT_ADD_MONEY, nil
	case "TRANSFER_CANNOT_TAKE_MONEY":
		return TErrorCode_TRANSFER_CANNOT_TAKE_MONEY, nil
	}
	return TErrorCode(0), fmt.Errorf("not a valid TErrorCode string")
}

func TErrorCodePtr(v TErrorCode) *TErrorCode { return &v }

func (p TErrorCode) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *TErrorCode) UnmarshalText(text []byte) error {
	q, err := TErrorCodeFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

func (p *TErrorCode) Scan(value interface{}) error {
	v, ok := value.(int64)
	if !ok {
		return errors.New("Scan value is not int64")
	}
	*p = TErrorCode(v)
	return nil
}

func (p *TErrorCode) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type TAccountStatus int64

const (
	TAccountStatus_ACTIVATED   TAccountStatus = 0
	TAccountStatus_DEACTIVATED TAccountStatus = 1
	TAccountStatus_BANNED      TAccountStatus = 2
)

func (p TAccountStatus) String() string {
	switch p {
	case TAccountStatus_ACTIVATED:
		return "ACTIVATED"
	case TAccountStatus_DEACTIVATED:
		return "DEACTIVATED"
	case TAccountStatus_BANNED:
		return "BANNED"
	}
	return "<UNSET>"
}

func TAccountStatusFromString(s string) (TAccountStatus, error) {
	switch s {
	case "ACTIVATED":
		return TAccountStatus_ACTIVATED, nil
	case "DEACTIVATED":
		return TAccountStatus_DEACTIVATED, nil
	case "BANNED":
		return TAccountStatus_BANNED, nil
	}
	return TAccountStatus(0), fmt.Errorf("not a valid TAccountStatus string")
}

func TAccountStatusPtr(v TAccountStatus) *TAccountStatus { return &v }

func (p TAccountStatus) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *TAccountStatus) UnmarshalText(text []byte) error {
	q, err := TAccountStatusFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

func (p *TAccountStatus) Scan(value interface{}) error {
	v, ok := value.(int64)
	if !ok {
		return errors.New("Scan value is not int64")
	}
	*p = TAccountStatus(v)
	return nil
}

func (p *TAccountStatus) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type TAccountType int64

const (
	TAccountType_DEBIT  TAccountType = 0
	TAccountType_CREDIT TAccountType = 1
)

func (p TAccountType) String() string {
	switch p {
	case TAccountType_DEBIT:
		return "DEBIT"
	case TAccountType_CREDIT:
		return "CREDIT"
	}
	return "<UNSET>"
}

func TAccountTypeFromString(s string) (TAccountType, error) {
	switch s {
	case "DEBIT":
		return TAccountType_DEBIT, nil
	case "CREDIT":
		return TAccountType_CREDIT, nil
	}
	return TAccountType(0), fmt.Errorf("not a valid TAccountType string")
}

func TAccountTypePtr(v TAccountType) *TAccountType { return &v }

func (p TAccountType) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *TAccountType) UnmarshalText(text []byte) error {
	q, err := TAccountTypeFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

func (p *TAccountType) Scan(value interface{}) error {
	v, ok := value.(int64)
	if !ok {
		return errors.New("Scan value is not int64")
	}
	*p = TAccountType(v)
	return nil
}

func (p *TAccountType) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type TPurseType int64

const (
	TPurseType_AUTO      TPurseType = 0
	TPurseType_PRIMARY   TPurseType = 1
	TPurseType_SECONDARY TPurseType = 2
	TPurseType_TERTIARY  TPurseType = 3
	TPurseType_EXTDATA   TPurseType = 4
)

func (p TPurseType) String() string {
	switch p {
	case TPurseType_AUTO:
		return "AUTO"
	case TPurseType_PRIMARY:
		return "PRIMARY"
	case TPurseType_SECONDARY:
		return "SECONDARY"
	case TPurseType_TERTIARY:
		return "TERTIARY"
	case TPurseType_EXTDATA:
		return "EXTDATA"
	}
	return "<UNSET>"
}

func TPurseTypeFromString(s string) (TPurseType, error) {
	switch s {
	case "AUTO":
		return TPurseType_AUTO, nil
	case "PRIMARY":
		return TPurseType_PRIMARY, nil
	case "SECONDARY":
		return TPurseType_SECONDARY, nil
	case "TERTIARY":
		return TPurseType_TERTIARY, nil
	case "EXTDATA":
		return TPurseType_EXTDATA, nil
	}
	return TPurseType(0), fmt.Errorf("not a valid TPurseType string")
}

func TPurseTypePtr(v TPurseType) *TPurseType { return &v }

func (p TPurseType) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *TPurseType) UnmarshalText(text []byte) error {
	q, err := TPurseTypeFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

func (p *TPurseType) Scan(value interface{}) error {
	v, ok := value.(int64)
	if !ok {
		return errors.New("Scan value is not int64")
	}
	*p = TPurseType(v)
	return nil
}

func (p *TPurseType) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type TTransactionType int64

const (
	TTransactionType_TRANSFER TTransactionType = 0
	TTransactionType_WITHDRAW TTransactionType = 1
	TTransactionType_DEPOSIT  TTransactionType = 2
	TTransactionType_INTERNAL TTransactionType = 3
)

func (p TTransactionType) String() string {
	switch p {
	case TTransactionType_TRANSFER:
		return "TRANSFER"
	case TTransactionType_WITHDRAW:
		return "WITHDRAW"
	case TTransactionType_DEPOSIT:
		return "DEPOSIT"
	case TTransactionType_INTERNAL:
		return "INTERNAL"
	}
	return "<UNSET>"
}

func TTransactionTypeFromString(s string) (TTransactionType, error) {
	switch s {
	case "TRANSFER":
		return TTransactionType_TRANSFER, nil
	case "WITHDRAW":
		return TTransactionType_WITHDRAW, nil
	case "DEPOSIT":
		return TTransactionType_DEPOSIT, nil
	case "INTERNAL":
		return TTransactionType_INTERNAL, nil
	}
	return TTransactionType(0), fmt.Errorf("not a valid TTransactionType string")
}

func TTransactionTypePtr(v TTransactionType) *TTransactionType { return &v }

func (p TTransactionType) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *TTransactionType) UnmarshalText(text []byte) error {
	q, err := TTransactionTypeFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

func (p *TTransactionType) Scan(value interface{}) error {
	v, ok := value.(int64)
	if !ok {
		return errors.New("Scan value is not int64")
	}
	*p = TTransactionType(v)
	return nil
}

func (p *TTransactionType) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type TTransactionStatus int64

const (
	TTransactionStatus_CREATED          TTransactionStatus = 0
	TTransactionStatus_REJECTED         TTransactionStatus = 1
	TTransactionStatus_STARTED          TTransactionStatus = 2
	TTransactionStatus_GOT_MONEY        TTransactionStatus = 3
	TTransactionStatus_TRANSFERED_MONEY TTransactionStatus = 4
	TTransactionStatus_SUCCESS          TTransactionStatus = 5
	TTransactionStatus_FAILED           TTransactionStatus = 6
)

func (p TTransactionStatus) String() string {
	switch p {
	case TTransactionStatus_CREATED:
		return "CREATED"
	case TTransactionStatus_REJECTED:
		return "REJECTED"
	case TTransactionStatus_STARTED:
		return "STARTED"
	case TTransactionStatus_GOT_MONEY:
		return "GOT_MONEY"
	case TTransactionStatus_TRANSFERED_MONEY:
		return "TRANSFERED_MONEY"
	case TTransactionStatus_SUCCESS:
		return "SUCCESS"
	case TTransactionStatus_FAILED:
		return "FAILED"
	}
	return "<UNSET>"
}

func TTransactionStatusFromString(s string) (TTransactionStatus, error) {
	switch s {
	case "CREATED":
		return TTransactionStatus_CREATED, nil
	case "REJECTED":
		return TTransactionStatus_REJECTED, nil
	case "STARTED":
		return TTransactionStatus_STARTED, nil
	case "GOT_MONEY":
		return TTransactionStatus_GOT_MONEY, nil
	case "TRANSFERED_MONEY":
		return TTransactionStatus_TRANSFERED_MONEY, nil
	case "SUCCESS":
		return TTransactionStatus_SUCCESS, nil
	case "FAILED":
		return TTransactionStatus_FAILED, nil
	}
	return TTransactionStatus(0), fmt.Errorf("not a valid TTransactionStatus string")
}

func TTransactionStatusPtr(v TTransactionStatus) *TTransactionStatus { return &v }

func (p TTransactionStatus) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *TTransactionStatus) UnmarshalText(text []byte) error {
	q, err := TTransactionStatusFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

func (p *TTransactionStatus) Scan(value interface{}) error {
	v, ok := value.(int64)
	if !ok {
		return errors.New("Scan value is not int64")
	}
	*p = TTransactionStatus(v)
	return nil
}

func (p *TTransactionStatus) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type TAID int64

func TAIDPtr(v TAID) *TAID { return &v }

type TTRANSID int64

func TTRANSIDPtr(v TTRANSID) *TTRANSID { return &v }

type TTIME int64

func TTIMEPtr(v TTIME) *TTIME { return &v }

type TMONEY int64

func TMONEYPtr(v TMONEY) *TMONEY { return &v }

// Attributes:
//  - Code
//  - Message
type TAccountResult_ struct {
	Code    TErrorCode `thrift:"code,1" db:"code" json:"code"`
	Message *string    `thrift:"message,2" db:"message" json:"message,omitempty"`
}

func NewTAccountResult_() *TAccountResult_ {
	return &TAccountResult_{}
}

func (p *TAccountResult_) GetCode() TErrorCode {
	return p.Code
}

var TAccountResult__Message_DEFAULT string

func (p *TAccountResult_) GetMessage() string {
	if !p.IsSetMessage() {
		return TAccountResult__Message_DEFAULT
	}
	return *p.Message
}
func (p *TAccountResult_) IsSetMessage() bool {
	return p.Message != nil
}

func (p *TAccountResult_) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TAccountResult_) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := TErrorCode(v)
		p.Code = temp
	}
	return nil
}

func (p *TAccountResult_) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Message = &v
	}
	return nil
}

func (p *TAccountResult_) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TAccountResult"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TAccountResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Code)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err)
	}
	return err
}

func (p *TAccountResult_) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetMessage() {
		if err := oprot.WriteFieldBegin("message", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:message: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Message)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.message (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:message: ", p), err)
		}
	}
	return err
}

func (p *TAccountResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TAccountResult_(%+v)", *p)
}

// Attributes:
//  - Key
//  - Status
//  - Type
//  - Primary
//  - Secondary
//  - Tertiary
//  - Lock
//  - CreationTime
//  - LastUpdate
//  - CreditLimit
//  - HardCreditLimit
//  - ExtData
type TAccountInfo struct {
	Key             *string         `thrift:"key,1" db:"key" json:"key,omitempty"`
	Status          *TAccountStatus `thrift:"status,2" db:"status" json:"status,omitempty"`
	Type            *TAccountType   `thrift:"type,3" db:"type" json:"type,omitempty"`
	Primary         *TMONEY         `thrift:"primary,4" db:"primary" json:"primary,omitempty"`
	Secondary       *TMONEY         `thrift:"secondary,5" db:"secondary" json:"secondary,omitempty"`
	Tertiary        *TMONEY         `thrift:"tertiary,6" db:"tertiary" json:"tertiary,omitempty"`
	Lock            *TTRANSID       `thrift:"lock,7" db:"lock" json:"lock,omitempty"`
	CreationTime    *TTIME          `thrift:"creationTime,8" db:"creationTime" json:"creationTime,omitempty"`
	LastUpdate      *TTIME          `thrift:"lastUpdate,9" db:"lastUpdate" json:"lastUpdate,omitempty"`
	CreditLimit     *TMONEY         `thrift:"creditLimit,10" db:"creditLimit" json:"creditLimit,omitempty"`
	HardCreditLimit *TMONEY         `thrift:"hardCreditLimit,11" db:"hardCreditLimit" json:"hardCreditLimit,omitempty"`
	// unused field # 12
	ExtData map[string]TMONEY `thrift:"extData,13" db:"extData" json:"extData,omitempty"`
}

func NewTAccountInfo() *TAccountInfo {
	return &TAccountInfo{}
}

var TAccountInfo_Key_DEFAULT string

func (p *TAccountInfo) GetKey() string {
	if !p.IsSetKey() {
		return TAccountInfo_Key_DEFAULT
	}
	return *p.Key
}

var TAccountInfo_Status_DEFAULT TAccountStatus

func (p *TAccountInfo) GetStatus() TAccountStatus {
	if !p.IsSetStatus() {
		return TAccountInfo_Status_DEFAULT
	}
	return *p.Status
}

var TAccountInfo_Type_DEFAULT TAccountType

func (p *TAccountInfo) GetType() TAccountType {
	if !p.IsSetType() {
		return TAccountInfo_Type_DEFAULT
	}
	return *p.Type
}

var TAccountInfo_Primary_DEFAULT TMONEY

func (p *TAccountInfo) GetPrimary() TMONEY {
	if !p.IsSetPrimary() {
		return TAccountInfo_Primary_DEFAULT
	}
	return *p.Primary
}

var TAccountInfo_Secondary_DEFAULT TMONEY

func (p *TAccountInfo) GetSecondary() TMONEY {
	if !p.IsSetSecondary() {
		return TAccountInfo_Secondary_DEFAULT
	}
	return *p.Secondary
}

var TAccountInfo_Tertiary_DEFAULT TMONEY

func (p *TAccountInfo) GetTertiary() TMONEY {
	if !p.IsSetTertiary() {
		return TAccountInfo_Tertiary_DEFAULT
	}
	return *p.Tertiary
}

var TAccountInfo_Lock_DEFAULT TTRANSID

func (p *TAccountInfo) GetLock() TTRANSID {
	if !p.IsSetLock() {
		return TAccountInfo_Lock_DEFAULT
	}
	return *p.Lock
}

var TAccountInfo_CreationTime_DEFAULT TTIME

func (p *TAccountInfo) GetCreationTime() TTIME {
	if !p.IsSetCreationTime() {
		return TAccountInfo_CreationTime_DEFAULT
	}
	return *p.CreationTime
}

var TAccountInfo_LastUpdate_DEFAULT TTIME

func (p *TAccountInfo) GetLastUpdate() TTIME {
	if !p.IsSetLastUpdate() {
		return TAccountInfo_LastUpdate_DEFAULT
	}
	return *p.LastUpdate
}

var TAccountInfo_CreditLimit_DEFAULT TMONEY

func (p *TAccountInfo) GetCreditLimit() TMONEY {
	if !p.IsSetCreditLimit() {
		return TAccountInfo_CreditLimit_DEFAULT
	}
	return *p.CreditLimit
}

var TAccountInfo_HardCreditLimit_DEFAULT TMONEY

func (p *TAccountInfo) GetHardCreditLimit() TMONEY {
	if !p.IsSetHardCreditLimit() {
		return TAccountInfo_HardCreditLimit_DEFAULT
	}
	return *p.HardCreditLimit
}

var TAccountInfo_ExtData_DEFAULT map[string]TMONEY

func (p *TAccountInfo) GetExtData() map[string]TMONEY {
	return p.ExtData
}
func (p *TAccountInfo) IsSetKey() bool {
	return p.Key != nil
}

func (p *TAccountInfo) IsSetStatus() bool {
	return p.Status != nil
}

func (p *TAccountInfo) IsSetType() bool {
	return p.Type != nil
}

func (p *TAccountInfo) IsSetPrimary() bool {
	return p.Primary != nil
}

func (p *TAccountInfo) IsSetSecondary() bool {
	return p.Secondary != nil
}

func (p *TAccountInfo) IsSetTertiary() bool {
	return p.Tertiary != nil
}

func (p *TAccountInfo) IsSetLock() bool {
	return p.Lock != nil
}

func (p *TAccountInfo) IsSetCreationTime() bool {
	return p.CreationTime != nil
}

func (p *TAccountInfo) IsSetLastUpdate() bool {
	return p.LastUpdate != nil
}

func (p *TAccountInfo) IsSetCreditLimit() bool {
	return p.CreditLimit != nil
}

func (p *TAccountInfo) IsSetHardCreditLimit() bool {
	return p.HardCreditLimit != nil
}

func (p *TAccountInfo) IsSetExtData() bool {
	return p.ExtData != nil
}

func (p *TAccountInfo) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField5(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 6:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField6(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 7:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField7(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 8:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField8(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 9:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField9(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 10:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField10(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 11:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField11(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 13:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField13(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TAccountInfo) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Key = &v
	}
	return nil
}

func (p *TAccountInfo) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := TAccountStatus(v)
		p.Status = &temp
	}
	return nil
}

func (p *TAccountInfo) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		temp := TAccountType(v)
		p.Type = &temp
	}
	return nil
}

func (p *TAccountInfo) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		temp := TMONEY(v)
		p.Primary = &temp
	}
	return nil
}

func (p *TAccountInfo) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		temp := TMONEY(v)
		p.Secondary = &temp
	}
	return nil
}

func (p *TAccountInfo) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		temp := TMONEY(v)
		p.Tertiary = &temp
	}
	return nil
}

func (p *TAccountInfo) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		temp := TTRANSID(v)
		p.Lock = &temp
	}
	return nil
}

func (p *TAccountInfo) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		temp := TTIME(v)
		p.CreationTime = &temp
	}
	return nil
}

func (p *TAccountInfo) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		temp := TTIME(v)
		p.LastUpdate = &temp
	}
	return nil
}

func (p *TAccountInfo) ReadField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		temp := TMONEY(v)
		p.CreditLimit = &temp
	}
	return nil
}

func (p *TAccountInfo) ReadField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 11: ", err)
	} else {
		temp := TMONEY(v)
		p.HardCreditLimit = &temp
	}
	return nil
}

func (p *TAccountInfo) ReadField13(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]TMONEY, size)
	p.ExtData = tMap
	for i := 0; i < size; i++ {
		var _key0 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key0 = v
		}
		var _val1 TMONEY
		if v, err := iprot.ReadI64(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			temp := TMONEY(v)
			_val1 = temp
		}
		p.ExtData[_key0] = _val1
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *TAccountInfo) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TAccountInfo"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
		if err := p.writeField6(oprot); err != nil {
			return err
		}
		if err := p.writeField7(oprot); err != nil {
			return err
		}
		if err := p.writeField8(oprot); err != nil {
			return err
		}
		if err := p.writeField9(oprot); err != nil {
			return err
		}
		if err := p.writeField10(oprot); err != nil {
			return err
		}
		if err := p.writeField11(oprot); err != nil {
			return err
		}
		if err := p.writeField13(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TAccountInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetKey() {
		if err := oprot.WriteFieldBegin("key", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:key: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Key)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.key (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:key: ", p), err)
		}
	}
	return err
}

func (p *TAccountInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetStatus() {
		if err := oprot.WriteFieldBegin("status", thrift.I32, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:status: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Status)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.status (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:status: ", p), err)
		}
	}
	return err
}

func (p *TAccountInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetType() {
		if err := oprot.WriteFieldBegin("type", thrift.I32, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:type: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Type)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.type (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:type: ", p), err)
		}
	}
	return err
}

func (p *TAccountInfo) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetPrimary() {
		if err := oprot.WriteFieldBegin("primary", thrift.I64, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:primary: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.Primary)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.primary (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:primary: ", p), err)
		}
	}
	return err
}

func (p *TAccountInfo) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetSecondary() {
		if err := oprot.WriteFieldBegin("secondary", thrift.I64, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:secondary: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.Secondary)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.secondary (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:secondary: ", p), err)
		}
	}
	return err
}

func (p *TAccountInfo) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetTertiary() {
		if err := oprot.WriteFieldBegin("tertiary", thrift.I64, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:tertiary: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.Tertiary)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.tertiary (6) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:tertiary: ", p), err)
		}
	}
	return err
}

func (p *TAccountInfo) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetLock() {
		if err := oprot.WriteFieldBegin("lock", thrift.I64, 7); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:lock: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.Lock)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.lock (7) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 7:lock: ", p), err)
		}
	}
	return err
}

func (p *TAccountInfo) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetCreationTime() {
		if err := oprot.WriteFieldBegin("creationTime", thrift.I64, 8); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:creationTime: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.CreationTime)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.creationTime (8) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 8:creationTime: ", p), err)
		}
	}
	return err
}

func (p *TAccountInfo) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetLastUpdate() {
		if err := oprot.WriteFieldBegin("lastUpdate", thrift.I64, 9); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:lastUpdate: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.LastUpdate)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.lastUpdate (9) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 9:lastUpdate: ", p), err)
		}
	}
	return err
}

func (p *TAccountInfo) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetCreditLimit() {
		if err := oprot.WriteFieldBegin("creditLimit", thrift.I64, 10); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:creditLimit: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.CreditLimit)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.creditLimit (10) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 10:creditLimit: ", p), err)
		}
	}
	return err
}

func (p *TAccountInfo) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetHardCreditLimit() {
		if err := oprot.WriteFieldBegin("hardCreditLimit", thrift.I64, 11); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:hardCreditLimit: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.HardCreditLimit)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.hardCreditLimit (11) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 11:hardCreditLimit: ", p), err)
		}
	}
	return err
}

func (p *TAccountInfo) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetExtData() {
		if err := oprot.WriteFieldBegin("extData", thrift.MAP, 13); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:extData: ", p), err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.I64, len(p.ExtData)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.ExtData {
			if err := oprot.WriteString(string(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := oprot.WriteI64(int64(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 13:extData: ", p), err)
		}
	}
	return err
}

func (p *TAccountInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TAccountInfo(%+v)", *p)
}

// Attributes:
//  - AccountId
//  - Key
type TAccount struct {
	AccountId *TAID   `thrift:"accountId,1" db:"accountId" json:"accountId,omitempty"`
	Key       *string `thrift:"key,2" db:"key" json:"key,omitempty"`
}

func NewTAccount() *TAccount {
	return &TAccount{}
}

var TAccount_AccountId_DEFAULT TAID

func (p *TAccount) GetAccountId() TAID {
	if !p.IsSetAccountId() {
		return TAccount_AccountId_DEFAULT
	}
	return *p.AccountId
}

var TAccount_Key_DEFAULT string

func (p *TAccount) GetKey() string {
	if !p.IsSetKey() {
		return TAccount_Key_DEFAULT
	}
	return *p.Key
}
func (p *TAccount) IsSetAccountId() bool {
	return p.AccountId != nil
}

func (p *TAccount) IsSetKey() bool {
	return p.Key != nil
}

func (p *TAccount) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TAccount) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := TAID(v)
		p.AccountId = &temp
	}
	return nil
}

func (p *TAccount) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Key = &v
	}
	return nil
}

func (p *TAccount) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TAccount"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TAccount) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetAccountId() {
		if err := oprot.WriteFieldBegin("accountId", thrift.I64, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:accountId: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.AccountId)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.accountId (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:accountId: ", p), err)
		}
	}
	return err
}

func (p *TAccount) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetKey() {
		if err := oprot.WriteFieldBegin("key", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:key: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Key)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.key (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:key: ", p), err)
		}
	}
	return err
}

func (p *TAccount) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TAccount(%+v)", *p)
}

// Attributes:
//  - Primary
//  - Secondary
//  - Tertiary
//  - CreditLimit
//  - HardCreditLimit
//  - ExtData
type TAccountPurses struct {
	Primary         *TMONEY           `thrift:"primary,1" db:"primary" json:"primary,omitempty"`
	Secondary       *TMONEY           `thrift:"secondary,2" db:"secondary" json:"secondary,omitempty"`
	Tertiary        *TMONEY           `thrift:"tertiary,3" db:"tertiary" json:"tertiary,omitempty"`
	CreditLimit     *TMONEY           `thrift:"creditLimit,4" db:"creditLimit" json:"creditLimit,omitempty"`
	HardCreditLimit *TMONEY           `thrift:"hardCreditLimit,5" db:"hardCreditLimit" json:"hardCreditLimit,omitempty"`
	ExtData         map[string]TMONEY `thrift:"extData,6" db:"extData" json:"extData,omitempty"`
}

func NewTAccountPurses() *TAccountPurses {
	return &TAccountPurses{}
}

var TAccountPurses_Primary_DEFAULT TMONEY

func (p *TAccountPurses) GetPrimary() TMONEY {
	if !p.IsSetPrimary() {
		return TAccountPurses_Primary_DEFAULT
	}
	return *p.Primary
}

var TAccountPurses_Secondary_DEFAULT TMONEY

func (p *TAccountPurses) GetSecondary() TMONEY {
	if !p.IsSetSecondary() {
		return TAccountPurses_Secondary_DEFAULT
	}
	return *p.Secondary
}

var TAccountPurses_Tertiary_DEFAULT TMONEY

func (p *TAccountPurses) GetTertiary() TMONEY {
	if !p.IsSetTertiary() {
		return TAccountPurses_Tertiary_DEFAULT
	}
	return *p.Tertiary
}

var TAccountPurses_CreditLimit_DEFAULT TMONEY

func (p *TAccountPurses) GetCreditLimit() TMONEY {
	if !p.IsSetCreditLimit() {
		return TAccountPurses_CreditLimit_DEFAULT
	}
	return *p.CreditLimit
}

var TAccountPurses_HardCreditLimit_DEFAULT TMONEY

func (p *TAccountPurses) GetHardCreditLimit() TMONEY {
	if !p.IsSetHardCreditLimit() {
		return TAccountPurses_HardCreditLimit_DEFAULT
	}
	return *p.HardCreditLimit
}

var TAccountPurses_ExtData_DEFAULT map[string]TMONEY

func (p *TAccountPurses) GetExtData() map[string]TMONEY {
	return p.ExtData
}
func (p *TAccountPurses) IsSetPrimary() bool {
	return p.Primary != nil
}

func (p *TAccountPurses) IsSetSecondary() bool {
	return p.Secondary != nil
}

func (p *TAccountPurses) IsSetTertiary() bool {
	return p.Tertiary != nil
}

func (p *TAccountPurses) IsSetCreditLimit() bool {
	return p.CreditLimit != nil
}

func (p *TAccountPurses) IsSetHardCreditLimit() bool {
	return p.HardCreditLimit != nil
}

func (p *TAccountPurses) IsSetExtData() bool {
	return p.ExtData != nil
}

func (p *TAccountPurses) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField5(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 6:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField6(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TAccountPurses) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := TMONEY(v)
		p.Primary = &temp
	}
	return nil
}

func (p *TAccountPurses) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := TMONEY(v)
		p.Secondary = &temp
	}
	return nil
}

func (p *TAccountPurses) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		temp := TMONEY(v)
		p.Tertiary = &temp
	}
	return nil
}

func (p *TAccountPurses) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		temp := TMONEY(v)
		p.CreditLimit = &temp
	}
	return nil
}

func (p *TAccountPurses) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		temp := TMONEY(v)
		p.HardCreditLimit = &temp
	}
	return nil
}

func (p *TAccountPurses) ReadField6(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]TMONEY, size)
	p.ExtData = tMap
	for i := 0; i < size; i++ {
		var _key2 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key2 = v
		}
		var _val3 TMONEY
		if v, err := iprot.ReadI64(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			temp := TMONEY(v)
			_val3 = temp
		}
		p.ExtData[_key2] = _val3
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *TAccountPurses) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TAccountPurses"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
		if err := p.writeField6(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TAccountPurses) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetPrimary() {
		if err := oprot.WriteFieldBegin("primary", thrift.I64, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:primary: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.Primary)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.primary (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:primary: ", p), err)
		}
	}
	return err
}

func (p *TAccountPurses) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetSecondary() {
		if err := oprot.WriteFieldBegin("secondary", thrift.I64, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:secondary: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.Secondary)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.secondary (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:secondary: ", p), err)
		}
	}
	return err
}

func (p *TAccountPurses) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetTertiary() {
		if err := oprot.WriteFieldBegin("tertiary", thrift.I64, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:tertiary: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.Tertiary)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.tertiary (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:tertiary: ", p), err)
		}
	}
	return err
}

func (p *TAccountPurses) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetCreditLimit() {
		if err := oprot.WriteFieldBegin("creditLimit", thrift.I64, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:creditLimit: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.CreditLimit)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.creditLimit (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:creditLimit: ", p), err)
		}
	}
	return err
}

func (p *TAccountPurses) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetHardCreditLimit() {
		if err := oprot.WriteFieldBegin("hardCreditLimit", thrift.I64, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:hardCreditLimit: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.HardCreditLimit)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.hardCreditLimit (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:hardCreditLimit: ", p), err)
		}
	}
	return err
}

func (p *TAccountPurses) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetExtData() {
		if err := oprot.WriteFieldBegin("extData", thrift.MAP, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:extData: ", p), err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.I64, len(p.ExtData)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.ExtData {
			if err := oprot.WriteString(string(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := oprot.WriteI64(int64(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:extData: ", p), err)
		}
	}
	return err
}

func (p *TAccountPurses) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TAccountPurses(%+v)", *p)
}

// Attributes:
//  - Timestamp
//  - TransactionID
//  - Balance
type TBalanceChangeItem struct {
	Timestamp     *TTIME          `thrift:"timestamp,1" db:"timestamp" json:"timestamp,omitempty"`
	TransactionID *TTRANSID       `thrift:"transactionID,2" db:"transactionID" json:"transactionID,omitempty"`
	Balance       *TAccountPurses `thrift:"balance,3" db:"balance" json:"balance,omitempty"`
}

func NewTBalanceChangeItem() *TBalanceChangeItem {
	return &TBalanceChangeItem{}
}

var TBalanceChangeItem_Timestamp_DEFAULT TTIME

func (p *TBalanceChangeItem) GetTimestamp() TTIME {
	if !p.IsSetTimestamp() {
		return TBalanceChangeItem_Timestamp_DEFAULT
	}
	return *p.Timestamp
}

var TBalanceChangeItem_TransactionID_DEFAULT TTRANSID

func (p *TBalanceChangeItem) GetTransactionID() TTRANSID {
	if !p.IsSetTransactionID() {
		return TBalanceChangeItem_TransactionID_DEFAULT
	}
	return *p.TransactionID
}

var TBalanceChangeItem_Balance_DEFAULT *TAccountPurses

func (p *TBalanceChangeItem) GetBalance() *TAccountPurses {
	if !p.IsSetBalance() {
		return TBalanceChangeItem_Balance_DEFAULT
	}
	return p.Balance
}
func (p *TBalanceChangeItem) IsSetTimestamp() bool {
	return p.Timestamp != nil
}

func (p *TBalanceChangeItem) IsSetTransactionID() bool {
	return p.TransactionID != nil
}

func (p *TBalanceChangeItem) IsSetBalance() bool {
	return p.Balance != nil
}

func (p *TBalanceChangeItem) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TBalanceChangeItem) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := TTIME(v)
		p.Timestamp = &temp
	}
	return nil
}

func (p *TBalanceChangeItem) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := TTRANSID(v)
		p.TransactionID = &temp
	}
	return nil
}

func (p *TBalanceChangeItem) ReadField3(iprot thrift.TProtocol) error {
	p.Balance = &TAccountPurses{}
	if err := p.Balance.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Balance), err)
	}
	return nil
}

func (p *TBalanceChangeItem) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TBalanceChangeItem"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TBalanceChangeItem) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetTimestamp() {
		if err := oprot.WriteFieldBegin("timestamp", thrift.I64, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:timestamp: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.Timestamp)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.timestamp (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:timestamp: ", p), err)
		}
	}
	return err
}

func (p *TBalanceChangeItem) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetTransactionID() {
		if err := oprot.WriteFieldBegin("transactionID", thrift.I64, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:transactionID: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.TransactionID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.transactionID (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:transactionID: ", p), err)
		}
	}
	return err
}

func (p *TBalanceChangeItem) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetBalance() {
		if err := oprot.WriteFieldBegin("balance", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:balance: ", p), err)
		}
		if err := p.Balance.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Balance), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:balance: ", p), err)
		}
	}
	return err
}

func (p *TBalanceChangeItem) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TBalanceChangeItem(%+v)", *p)
}

// Attributes:
//  - Code
//  - Message
//  - Purses
type TTakeMoneyResult_ struct {
	Code    TErrorCode      `thrift:"code,1" db:"code" json:"code"`
	Message *string         `thrift:"message,2" db:"message" json:"message,omitempty"`
	Purses  *TAccountPurses `thrift:"purses,3" db:"purses" json:"purses,omitempty"`
}

func NewTTakeMoneyResult_() *TTakeMoneyResult_ {
	return &TTakeMoneyResult_{}
}

func (p *TTakeMoneyResult_) GetCode() TErrorCode {
	return p.Code
}

var TTakeMoneyResult__Message_DEFAULT string

func (p *TTakeMoneyResult_) GetMessage() string {
	if !p.IsSetMessage() {
		return TTakeMoneyResult__Message_DEFAULT
	}
	return *p.Message
}

var TTakeMoneyResult__Purses_DEFAULT *TAccountPurses

func (p *TTakeMoneyResult_) GetPurses() *TAccountPurses {
	if !p.IsSetPurses() {
		return TTakeMoneyResult__Purses_DEFAULT
	}
	return p.Purses
}
func (p *TTakeMoneyResult_) IsSetMessage() bool {
	return p.Message != nil
}

func (p *TTakeMoneyResult_) IsSetPurses() bool {
	return p.Purses != nil
}

func (p *TTakeMoneyResult_) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TTakeMoneyResult_) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := TErrorCode(v)
		p.Code = temp
	}
	return nil
}

func (p *TTakeMoneyResult_) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Message = &v
	}
	return nil
}

func (p *TTakeMoneyResult_) ReadField3(iprot thrift.TProtocol) error {
	p.Purses = &TAccountPurses{}
	if err := p.Purses.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Purses), err)
	}
	return nil
}

func (p *TTakeMoneyResult_) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TTakeMoneyResult"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TTakeMoneyResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Code)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err)
	}
	return err
}

func (p *TTakeMoneyResult_) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetMessage() {
		if err := oprot.WriteFieldBegin("message", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:message: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Message)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.message (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:message: ", p), err)
		}
	}
	return err
}

func (p *TTakeMoneyResult_) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetPurses() {
		if err := oprot.WriteFieldBegin("purses", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:purses: ", p), err)
		}
		if err := p.Purses.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Purses), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:purses: ", p), err)
		}
	}
	return err
}

func (p *TTakeMoneyResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TTakeMoneyResult_(%+v)", *p)
}

// Attributes:
//  - Code
//  - Message
//  - TakenFromSender
//  - AddedToReceiver
type TTransactionResult_ struct {
	Code            TErrorCode      `thrift:"code,1" db:"code" json:"code"`
	Message         *string         `thrift:"message,2" db:"message" json:"message,omitempty"`
	TakenFromSender *TAccountPurses `thrift:"takenFromSender,3" db:"takenFromSender" json:"takenFromSender"`
	AddedToReceiver *TAccountPurses `thrift:"addedToReceiver,4" db:"addedToReceiver" json:"addedToReceiver"`
}

func NewTTransactionResult_() *TTransactionResult_ {
	return &TTransactionResult_{}
}

func (p *TTransactionResult_) GetCode() TErrorCode {
	return p.Code
}

var TTransactionResult__Message_DEFAULT string

func (p *TTransactionResult_) GetMessage() string {
	if !p.IsSetMessage() {
		return TTransactionResult__Message_DEFAULT
	}
	return *p.Message
}

var TTransactionResult__TakenFromSender_DEFAULT *TAccountPurses

func (p *TTransactionResult_) GetTakenFromSender() *TAccountPurses {
	if !p.IsSetTakenFromSender() {
		return TTransactionResult__TakenFromSender_DEFAULT
	}
	return p.TakenFromSender
}

var TTransactionResult__AddedToReceiver_DEFAULT *TAccountPurses

func (p *TTransactionResult_) GetAddedToReceiver() *TAccountPurses {
	if !p.IsSetAddedToReceiver() {
		return TTransactionResult__AddedToReceiver_DEFAULT
	}
	return p.AddedToReceiver
}
func (p *TTransactionResult_) IsSetMessage() bool {
	return p.Message != nil
}

func (p *TTransactionResult_) IsSetTakenFromSender() bool {
	return p.TakenFromSender != nil
}

func (p *TTransactionResult_) IsSetAddedToReceiver() bool {
	return p.AddedToReceiver != nil
}

func (p *TTransactionResult_) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TTransactionResult_) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := TErrorCode(v)
		p.Code = temp
	}
	return nil
}

func (p *TTransactionResult_) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Message = &v
	}
	return nil
}

func (p *TTransactionResult_) ReadField3(iprot thrift.TProtocol) error {
	p.TakenFromSender = &TAccountPurses{}
	if err := p.TakenFromSender.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.TakenFromSender), err)
	}
	return nil
}

func (p *TTransactionResult_) ReadField4(iprot thrift.TProtocol) error {
	p.AddedToReceiver = &TAccountPurses{}
	if err := p.AddedToReceiver.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AddedToReceiver), err)
	}
	return nil
}

func (p *TTransactionResult_) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TTransactionResult"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TTransactionResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Code)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err)
	}
	return err
}

func (p *TTransactionResult_) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetMessage() {
		if err := oprot.WriteFieldBegin("message", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:message: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Message)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.message (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:message: ", p), err)
		}
	}
	return err
}

func (p *TTransactionResult_) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("takenFromSender", thrift.STRUCT, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:takenFromSender: ", p), err)
	}
	if err := p.TakenFromSender.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.TakenFromSender), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:takenFromSender: ", p), err)
	}
	return err
}

func (p *TTransactionResult_) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("addedToReceiver", thrift.STRUCT, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:addedToReceiver: ", p), err)
	}
	if err := p.AddedToReceiver.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AddedToReceiver), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:addedToReceiver: ", p), err)
	}
	return err
}

func (p *TTransactionResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TTransactionResult_(%+v)", *p)
}

// Attributes:
//  - Sender
//  - Receiver
//  - Amount
//  - Description
//  - CreationTime
//  - LastUpdate
//  - Type
//  - Status
//  - SourceType
//  - TargetType
//  - Result_
//  - ProcessTime
//  - TypeMoneyExtSource
//  - TypeMoneyExtTarget
type TTransactionInfo struct {
	Sender             *TAID                `thrift:"sender,1" db:"sender" json:"sender,omitempty"`
	Receiver           *TAID                `thrift:"receiver,2" db:"receiver" json:"receiver,omitempty"`
	Amount             *TMONEY              `thrift:"amount,3" db:"amount" json:"amount,omitempty"`
	Description        *string              `thrift:"description,4" db:"description" json:"description,omitempty"`
	CreationTime       *TTIME               `thrift:"creationTime,5" db:"creationTime" json:"creationTime,omitempty"`
	LastUpdate         *TTIME               `thrift:"lastUpdate,6" db:"lastUpdate" json:"lastUpdate,omitempty"`
	Type               *TTransactionType    `thrift:"type,7" db:"type" json:"type,omitempty"`
	Status             *TTransactionStatus  `thrift:"status,8" db:"status" json:"status,omitempty"`
	SourceType         *TPurseType          `thrift:"sourceType,9" db:"sourceType" json:"sourceType,omitempty"`
	TargetType         *TPurseType          `thrift:"targetType,10" db:"targetType" json:"targetType,omitempty"`
	Result_            *TTransactionResult_ `thrift:"result,11" db:"result" json:"result,omitempty"`
	ProcessTime        *TTIME               `thrift:"processTime,12" db:"processTime" json:"processTime,omitempty"`
	TypeMoneyExtSource *string              `thrift:"typeMoneyExtSource,13" db:"typeMoneyExtSource" json:"typeMoneyExtSource,omitempty"`
	TypeMoneyExtTarget *string              `thrift:"typeMoneyExtTarget,14" db:"typeMoneyExtTarget" json:"typeMoneyExtTarget,omitempty"`
}

func NewTTransactionInfo() *TTransactionInfo {
	return &TTransactionInfo{}
}

var TTransactionInfo_Sender_DEFAULT TAID

func (p *TTransactionInfo) GetSender() TAID {
	if !p.IsSetSender() {
		return TTransactionInfo_Sender_DEFAULT
	}
	return *p.Sender
}

var TTransactionInfo_Receiver_DEFAULT TAID

func (p *TTransactionInfo) GetReceiver() TAID {
	if !p.IsSetReceiver() {
		return TTransactionInfo_Receiver_DEFAULT
	}
	return *p.Receiver
}

var TTransactionInfo_Amount_DEFAULT TMONEY

func (p *TTransactionInfo) GetAmount() TMONEY {
	if !p.IsSetAmount() {
		return TTransactionInfo_Amount_DEFAULT
	}
	return *p.Amount
}

var TTransactionInfo_Description_DEFAULT string

func (p *TTransactionInfo) GetDescription() string {
	if !p.IsSetDescription() {
		return TTransactionInfo_Description_DEFAULT
	}
	return *p.Description
}

var TTransactionInfo_CreationTime_DEFAULT TTIME

func (p *TTransactionInfo) GetCreationTime() TTIME {
	if !p.IsSetCreationTime() {
		return TTransactionInfo_CreationTime_DEFAULT
	}
	return *p.CreationTime
}

var TTransactionInfo_LastUpdate_DEFAULT TTIME

func (p *TTransactionInfo) GetLastUpdate() TTIME {
	if !p.IsSetLastUpdate() {
		return TTransactionInfo_LastUpdate_DEFAULT
	}
	return *p.LastUpdate
}

var TTransactionInfo_Type_DEFAULT TTransactionType

func (p *TTransactionInfo) GetType() TTransactionType {
	if !p.IsSetType() {
		return TTransactionInfo_Type_DEFAULT
	}
	return *p.Type
}

var TTransactionInfo_Status_DEFAULT TTransactionStatus

func (p *TTransactionInfo) GetStatus() TTransactionStatus {
	if !p.IsSetStatus() {
		return TTransactionInfo_Status_DEFAULT
	}
	return *p.Status
}

var TTransactionInfo_SourceType_DEFAULT TPurseType

func (p *TTransactionInfo) GetSourceType() TPurseType {
	if !p.IsSetSourceType() {
		return TTransactionInfo_SourceType_DEFAULT
	}
	return *p.SourceType
}

var TTransactionInfo_TargetType_DEFAULT TPurseType

func (p *TTransactionInfo) GetTargetType() TPurseType {
	if !p.IsSetTargetType() {
		return TTransactionInfo_TargetType_DEFAULT
	}
	return *p.TargetType
}

var TTransactionInfo_Result__DEFAULT *TTransactionResult_

func (p *TTransactionInfo) GetResult_() *TTransactionResult_ {
	if !p.IsSetResult_() {
		return TTransactionInfo_Result__DEFAULT
	}
	return p.Result_
}

var TTransactionInfo_ProcessTime_DEFAULT TTIME

func (p *TTransactionInfo) GetProcessTime() TTIME {
	if !p.IsSetProcessTime() {
		return TTransactionInfo_ProcessTime_DEFAULT
	}
	return *p.ProcessTime
}

var TTransactionInfo_TypeMoneyExtSource_DEFAULT string

func (p *TTransactionInfo) GetTypeMoneyExtSource() string {
	if !p.IsSetTypeMoneyExtSource() {
		return TTransactionInfo_TypeMoneyExtSource_DEFAULT
	}
	return *p.TypeMoneyExtSource
}

var TTransactionInfo_TypeMoneyExtTarget_DEFAULT string

func (p *TTransactionInfo) GetTypeMoneyExtTarget() string {
	if !p.IsSetTypeMoneyExtTarget() {
		return TTransactionInfo_TypeMoneyExtTarget_DEFAULT
	}
	return *p.TypeMoneyExtTarget
}
func (p *TTransactionInfo) IsSetSender() bool {
	return p.Sender != nil
}

func (p *TTransactionInfo) IsSetReceiver() bool {
	return p.Receiver != nil
}

func (p *TTransactionInfo) IsSetAmount() bool {
	return p.Amount != nil
}

func (p *TTransactionInfo) IsSetDescription() bool {
	return p.Description != nil
}

func (p *TTransactionInfo) IsSetCreationTime() bool {
	return p.CreationTime != nil
}

func (p *TTransactionInfo) IsSetLastUpdate() bool {
	return p.LastUpdate != nil
}

func (p *TTransactionInfo) IsSetType() bool {
	return p.Type != nil
}

func (p *TTransactionInfo) IsSetStatus() bool {
	return p.Status != nil
}

func (p *TTransactionInfo) IsSetSourceType() bool {
	return p.SourceType != nil
}

func (p *TTransactionInfo) IsSetTargetType() bool {
	return p.TargetType != nil
}

func (p *TTransactionInfo) IsSetResult_() bool {
	return p.Result_ != nil
}

func (p *TTransactionInfo) IsSetProcessTime() bool {
	return p.ProcessTime != nil
}

func (p *TTransactionInfo) IsSetTypeMoneyExtSource() bool {
	return p.TypeMoneyExtSource != nil
}

func (p *TTransactionInfo) IsSetTypeMoneyExtTarget() bool {
	return p.TypeMoneyExtTarget != nil
}

func (p *TTransactionInfo) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField5(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 6:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField6(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 7:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField7(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 8:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField8(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 9:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField9(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 10:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField10(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 11:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField11(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 12:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField12(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 13:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField13(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 14:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField14(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TTransactionInfo) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := TAID(v)
		p.Sender = &temp
	}
	return nil
}

func (p *TTransactionInfo) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := TAID(v)
		p.Receiver = &temp
	}
	return nil
}

func (p *TTransactionInfo) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		temp := TMONEY(v)
		p.Amount = &temp
	}
	return nil
}

func (p *TTransactionInfo) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Description = &v
	}
	return nil
}

func (p *TTransactionInfo) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		temp := TTIME(v)
		p.CreationTime = &temp
	}
	return nil
}

func (p *TTransactionInfo) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		temp := TTIME(v)
		p.LastUpdate = &temp
	}
	return nil
}

func (p *TTransactionInfo) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		temp := TTransactionType(v)
		p.Type = &temp
	}
	return nil
}

func (p *TTransactionInfo) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		temp := TTransactionStatus(v)
		p.Status = &temp
	}
	return nil
}

func (p *TTransactionInfo) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		temp := TPurseType(v)
		p.SourceType = &temp
	}
	return nil
}

func (p *TTransactionInfo) ReadField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		temp := TPurseType(v)
		p.TargetType = &temp
	}
	return nil
}

func (p *TTransactionInfo) ReadField11(iprot thrift.TProtocol) error {
	p.Result_ = &TTransactionResult_{}
	if err := p.Result_.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Result_), err)
	}
	return nil
}

func (p *TTransactionInfo) ReadField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 12: ", err)
	} else {
		temp := TTIME(v)
		p.ProcessTime = &temp
	}
	return nil
}

func (p *TTransactionInfo) ReadField13(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 13: ", err)
	} else {
		p.TypeMoneyExtSource = &v
	}
	return nil
}

func (p *TTransactionInfo) ReadField14(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 14: ", err)
	} else {
		p.TypeMoneyExtTarget = &v
	}
	return nil
}

func (p *TTransactionInfo) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TTransactionInfo"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
		if err := p.writeField6(oprot); err != nil {
			return err
		}
		if err := p.writeField7(oprot); err != nil {
			return err
		}
		if err := p.writeField8(oprot); err != nil {
			return err
		}
		if err := p.writeField9(oprot); err != nil {
			return err
		}
		if err := p.writeField10(oprot); err != nil {
			return err
		}
		if err := p.writeField11(oprot); err != nil {
			return err
		}
		if err := p.writeField12(oprot); err != nil {
			return err
		}
		if err := p.writeField13(oprot); err != nil {
			return err
		}
		if err := p.writeField14(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TTransactionInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetSender() {
		if err := oprot.WriteFieldBegin("sender", thrift.I64, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:sender: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.Sender)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.sender (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:sender: ", p), err)
		}
	}
	return err
}

func (p *TTransactionInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetReceiver() {
		if err := oprot.WriteFieldBegin("receiver", thrift.I64, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:receiver: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.Receiver)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.receiver (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:receiver: ", p), err)
		}
	}
	return err
}

func (p *TTransactionInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetAmount() {
		if err := oprot.WriteFieldBegin("amount", thrift.I64, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:amount: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.Amount)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.amount (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:amount: ", p), err)
		}
	}
	return err
}

func (p *TTransactionInfo) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetDescription() {
		if err := oprot.WriteFieldBegin("description", thrift.STRING, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:description: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Description)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.description (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:description: ", p), err)
		}
	}
	return err
}

func (p *TTransactionInfo) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetCreationTime() {
		if err := oprot.WriteFieldBegin("creationTime", thrift.I64, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:creationTime: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.CreationTime)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.creationTime (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:creationTime: ", p), err)
		}
	}
	return err
}

func (p *TTransactionInfo) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetLastUpdate() {
		if err := oprot.WriteFieldBegin("lastUpdate", thrift.I64, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:lastUpdate: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.LastUpdate)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.lastUpdate (6) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:lastUpdate: ", p), err)
		}
	}
	return err
}

func (p *TTransactionInfo) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetType() {
		if err := oprot.WriteFieldBegin("type", thrift.I32, 7); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:type: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Type)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.type (7) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 7:type: ", p), err)
		}
	}
	return err
}

func (p *TTransactionInfo) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetStatus() {
		if err := oprot.WriteFieldBegin("status", thrift.I32, 8); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:status: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Status)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.status (8) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 8:status: ", p), err)
		}
	}
	return err
}

func (p *TTransactionInfo) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetSourceType() {
		if err := oprot.WriteFieldBegin("sourceType", thrift.I32, 9); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:sourceType: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.SourceType)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.sourceType (9) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 9:sourceType: ", p), err)
		}
	}
	return err
}

func (p *TTransactionInfo) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetTargetType() {
		if err := oprot.WriteFieldBegin("targetType", thrift.I32, 10); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:targetType: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.TargetType)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.targetType (10) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 10:targetType: ", p), err)
		}
	}
	return err
}

func (p *TTransactionInfo) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetResult_() {
		if err := oprot.WriteFieldBegin("result", thrift.STRUCT, 11); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:result: ", p), err)
		}
		if err := p.Result_.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Result_), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 11:result: ", p), err)
		}
	}
	return err
}

func (p *TTransactionInfo) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetProcessTime() {
		if err := oprot.WriteFieldBegin("processTime", thrift.I64, 12); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:processTime: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.ProcessTime)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.processTime (12) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 12:processTime: ", p), err)
		}
	}
	return err
}

func (p *TTransactionInfo) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetTypeMoneyExtSource() {
		if err := oprot.WriteFieldBegin("typeMoneyExtSource", thrift.STRING, 13); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:typeMoneyExtSource: ", p), err)
		}
		if err := oprot.WriteString(string(*p.TypeMoneyExtSource)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.typeMoneyExtSource (13) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 13:typeMoneyExtSource: ", p), err)
		}
	}
	return err
}

func (p *TTransactionInfo) writeField14(oprot thrift.TProtocol) (err error) {
	if p.IsSetTypeMoneyExtTarget() {
		if err := oprot.WriteFieldBegin("typeMoneyExtTarget", thrift.STRING, 14); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:typeMoneyExtTarget: ", p), err)
		}
		if err := oprot.WriteString(string(*p.TypeMoneyExtTarget)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.typeMoneyExtTarget (14) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 14:typeMoneyExtTarget: ", p), err)
		}
	}
	return err
}

func (p *TTransactionInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TTransactionInfo(%+v)", *p)
}

// Attributes:
//  - TransId
//  - TransactionInfo
type TTransactionData struct {
	TransId         *TTRANSID         `thrift:"transId,1" db:"transId" json:"transId,omitempty"`
	TransactionInfo *TTransactionInfo `thrift:"transactionInfo,2" db:"transactionInfo" json:"transactionInfo,omitempty"`
}

func NewTTransactionData() *TTransactionData {
	return &TTransactionData{}
}

var TTransactionData_TransId_DEFAULT TTRANSID

func (p *TTransactionData) GetTransId() TTRANSID {
	if !p.IsSetTransId() {
		return TTransactionData_TransId_DEFAULT
	}
	return *p.TransId
}

var TTransactionData_TransactionInfo_DEFAULT *TTransactionInfo

func (p *TTransactionData) GetTransactionInfo() *TTransactionInfo {
	if !p.IsSetTransactionInfo() {
		return TTransactionData_TransactionInfo_DEFAULT
	}
	return p.TransactionInfo
}
func (p *TTransactionData) IsSetTransId() bool {
	return p.TransId != nil
}

func (p *TTransactionData) IsSetTransactionInfo() bool {
	return p.TransactionInfo != nil
}

func (p *TTransactionData) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TTransactionData) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := TTRANSID(v)
		p.TransId = &temp
	}
	return nil
}

func (p *TTransactionData) ReadField2(iprot thrift.TProtocol) error {
	p.TransactionInfo = &TTransactionInfo{}
	if err := p.TransactionInfo.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.TransactionInfo), err)
	}
	return nil
}

func (p *TTransactionData) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TTransactionData"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TTransactionData) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetTransId() {
		if err := oprot.WriteFieldBegin("transId", thrift.I64, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:transId: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.TransId)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.transId (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:transId: ", p), err)
		}
	}
	return err
}

func (p *TTransactionData) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetTransactionInfo() {
		if err := oprot.WriteFieldBegin("transactionInfo", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:transactionInfo: ", p), err)
		}
		if err := p.TransactionInfo.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.TransactionInfo), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:transactionInfo: ", p), err)
		}
	}
	return err
}

func (p *TTransactionData) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TTransactionData(%+v)", *p)
}

// Attributes:
//  - TransactionId
//  - Sender
//  - Receiver
type TTransactionQueueItem struct {
	TransactionId *TTRANSID `thrift:"transactionId,1" db:"transactionId" json:"transactionId,omitempty"`
	Sender        *TAccount `thrift:"sender,2" db:"sender" json:"sender,omitempty"`
	Receiver      *TAccount `thrift:"receiver,3" db:"receiver" json:"receiver,omitempty"`
}

func NewTTransactionQueueItem() *TTransactionQueueItem {
	return &TTransactionQueueItem{}
}

var TTransactionQueueItem_TransactionId_DEFAULT TTRANSID

func (p *TTransactionQueueItem) GetTransactionId() TTRANSID {
	if !p.IsSetTransactionId() {
		return TTransactionQueueItem_TransactionId_DEFAULT
	}
	return *p.TransactionId
}

var TTransactionQueueItem_Sender_DEFAULT *TAccount

func (p *TTransactionQueueItem) GetSender() *TAccount {
	if !p.IsSetSender() {
		return TTransactionQueueItem_Sender_DEFAULT
	}
	return p.Sender
}

var TTransactionQueueItem_Receiver_DEFAULT *TAccount

func (p *TTransactionQueueItem) GetReceiver() *TAccount {
	if !p.IsSetReceiver() {
		return TTransactionQueueItem_Receiver_DEFAULT
	}
	return p.Receiver
}
func (p *TTransactionQueueItem) IsSetTransactionId() bool {
	return p.TransactionId != nil
}

func (p *TTransactionQueueItem) IsSetSender() bool {
	return p.Sender != nil
}

func (p *TTransactionQueueItem) IsSetReceiver() bool {
	return p.Receiver != nil
}

func (p *TTransactionQueueItem) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TTransactionQueueItem) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := TTRANSID(v)
		p.TransactionId = &temp
	}
	return nil
}

func (p *TTransactionQueueItem) ReadField2(iprot thrift.TProtocol) error {
	p.Sender = &TAccount{}
	if err := p.Sender.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Sender), err)
	}
	return nil
}

func (p *TTransactionQueueItem) ReadField3(iprot thrift.TProtocol) error {
	p.Receiver = &TAccount{}
	if err := p.Receiver.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Receiver), err)
	}
	return nil
}

func (p *TTransactionQueueItem) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TTransactionQueueItem"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TTransactionQueueItem) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetTransactionId() {
		if err := oprot.WriteFieldBegin("transactionId", thrift.I64, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:transactionId: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.TransactionId)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.transactionId (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:transactionId: ", p), err)
		}
	}
	return err
}

func (p *TTransactionQueueItem) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetSender() {
		if err := oprot.WriteFieldBegin("sender", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:sender: ", p), err)
		}
		if err := p.Sender.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Sender), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:sender: ", p), err)
		}
	}
	return err
}

func (p *TTransactionQueueItem) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetReceiver() {
		if err := oprot.WriteFieldBegin("receiver", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:receiver: ", p), err)
		}
		if err := p.Receiver.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Receiver), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:receiver: ", p), err)
		}
	}
	return err
}

func (p *TTransactionQueueItem) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TTransactionQueueItem(%+v)", *p)
}
