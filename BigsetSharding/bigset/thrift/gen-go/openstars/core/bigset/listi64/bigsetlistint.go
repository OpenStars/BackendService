// Autogenerated by Thrift Compiler (0.13.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package listi64

import(
	"bytes"
	"context"
	"reflect"
	"database/sql/driver"
	"errors"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

type TErrorCode int64
const (
  TErrorCode_EGood TErrorCode = 0
  TErrorCode_ENoRootMeta TErrorCode = 1
  TErrorCode_ECouldNotConnectMetadata TErrorCode = 2
  TErrorCode_ECouldNotConnectIDGen TErrorCode = 3
  TErrorCode_ECouldNotConnectSmallSet TErrorCode = 4
  TErrorCode_ECouldNotConnectRootMetaMapping TErrorCode = 5
  TErrorCode_EItemNotExisted TErrorCode = 100
  TErrorCode_EUnknownException TErrorCode = 10
  TErrorCode_EBigSetNotExisted TErrorCode = 101
  TErrorCode_EBigSetCreated TErrorCode = 102
  TErrorCode_EBigSetAlreadyExisted TErrorCode = 103
  TErrorCode_EBigSetAssigned TErrorCode = 104
)

func (p TErrorCode) String() string {
  switch p {
  case TErrorCode_EGood: return "EGood"
  case TErrorCode_ENoRootMeta: return "ENoRootMeta"
  case TErrorCode_ECouldNotConnectMetadata: return "ECouldNotConnectMetadata"
  case TErrorCode_ECouldNotConnectIDGen: return "ECouldNotConnectIDGen"
  case TErrorCode_ECouldNotConnectSmallSet: return "ECouldNotConnectSmallSet"
  case TErrorCode_ECouldNotConnectRootMetaMapping: return "ECouldNotConnectRootMetaMapping"
  case TErrorCode_EItemNotExisted: return "EItemNotExisted"
  case TErrorCode_EUnknownException: return "EUnknownException"
  case TErrorCode_EBigSetNotExisted: return "EBigSetNotExisted"
  case TErrorCode_EBigSetCreated: return "EBigSetCreated"
  case TErrorCode_EBigSetAlreadyExisted: return "EBigSetAlreadyExisted"
  case TErrorCode_EBigSetAssigned: return "EBigSetAssigned"
  }
  return "<UNSET>"
}

func TErrorCodeFromString(s string) (TErrorCode, error) {
  switch s {
  case "EGood": return TErrorCode_EGood, nil 
  case "ENoRootMeta": return TErrorCode_ENoRootMeta, nil 
  case "ECouldNotConnectMetadata": return TErrorCode_ECouldNotConnectMetadata, nil 
  case "ECouldNotConnectIDGen": return TErrorCode_ECouldNotConnectIDGen, nil 
  case "ECouldNotConnectSmallSet": return TErrorCode_ECouldNotConnectSmallSet, nil 
  case "ECouldNotConnectRootMetaMapping": return TErrorCode_ECouldNotConnectRootMetaMapping, nil 
  case "EItemNotExisted": return TErrorCode_EItemNotExisted, nil 
  case "EUnknownException": return TErrorCode_EUnknownException, nil 
  case "EBigSetNotExisted": return TErrorCode_EBigSetNotExisted, nil 
  case "EBigSetCreated": return TErrorCode_EBigSetCreated, nil 
  case "EBigSetAlreadyExisted": return TErrorCode_EBigSetAlreadyExisted, nil 
  case "EBigSetAssigned": return TErrorCode_EBigSetAssigned, nil 
  }
  return TErrorCode(0), fmt.Errorf("not a valid TErrorCode string")
}


func TErrorCodePtr(v TErrorCode) *TErrorCode { return &v }

func (p TErrorCode) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *TErrorCode) UnmarshalText(text []byte) error {
q, err := TErrorCodeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *TErrorCode) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = TErrorCode(v)
return nil
}

func (p * TErrorCode) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type TChildItemOptions int64
const (
  TChildItemOptions_EFree TChildItemOptions = 1
  TChildItemOptions_EDistinct TChildItemOptions = 2
  TChildItemOptions_EUnSort TChildItemOptions = 4
  TChildItemOptions_EGetOldChildren TChildItemOptions = 8
  TChildItemOptions_EGetChildren TChildItemOptions = 16
  TChildItemOptions_EGetOldChildrenEDistinct TChildItemOptions = 10
  TChildItemOptions_EGetChildrenEDisttinct TChildItemOptions = 18
)

func (p TChildItemOptions) String() string {
  switch p {
  case TChildItemOptions_EFree: return "EFree"
  case TChildItemOptions_EDistinct: return "EDistinct"
  case TChildItemOptions_EUnSort: return "EUnSort"
  case TChildItemOptions_EGetOldChildren: return "EGetOldChildren"
  case TChildItemOptions_EGetChildren: return "EGetChildren"
  case TChildItemOptions_EGetOldChildrenEDistinct: return "EGetOldChildrenEDistinct"
  case TChildItemOptions_EGetChildrenEDisttinct: return "EGetChildrenEDisttinct"
  }
  return "<UNSET>"
}

func TChildItemOptionsFromString(s string) (TChildItemOptions, error) {
  switch s {
  case "EFree": return TChildItemOptions_EFree, nil 
  case "EDistinct": return TChildItemOptions_EDistinct, nil 
  case "EUnSort": return TChildItemOptions_EUnSort, nil 
  case "EGetOldChildren": return TChildItemOptions_EGetOldChildren, nil 
  case "EGetChildren": return TChildItemOptions_EGetChildren, nil 
  case "EGetOldChildrenEDistinct": return TChildItemOptions_EGetOldChildrenEDistinct, nil 
  case "EGetChildrenEDisttinct": return TChildItemOptions_EGetChildrenEDisttinct, nil 
  }
  return TChildItemOptions(0), fmt.Errorf("not a valid TChildItemOptions string")
}


func TChildItemOptionsPtr(v TChildItemOptions) *TChildItemOptions { return &v }

func (p TChildItemOptions) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *TChildItemOptions) UnmarshalText(text []byte) error {
q, err := TChildItemOptionsFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *TChildItemOptions) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = TChildItemOptions(v)
return nil
}

func (p * TChildItemOptions) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type TItemKey []byte

func TItemKeyPtr(v TItemKey) *TItemKey { return &v }

type TItemChild int64

func TItemChildPtr(v TItemChild) *TItemChild { return &v }

type TItemList []*TItem

func TItemListPtr(v TItemList) *TItemList { return &v }

type TItemKeySet []TItemKey

func TItemKeySetPtr(v TItemKeySet) *TItemKeySet { return &v }

type TKey int64

func TKeyPtr(v TKey) *TKey { return &v }

type TContainerKey int64

func TContainerKeyPtr(v TContainerKey) *TContainerKey { return &v }

type TSmallSetIDKey TContainerKey

func TSmallSetIDKeyPtr(v TSmallSetIDKey) *TSmallSetIDKey { return &v }

type TLevelType int16

func TLevelTypePtr(v TLevelType) *TLevelType { return &v }

type TMetaKey TContainerKey

func TMetaKeyPtr(v TMetaKey) *TMetaKey { return &v }

type TStringKey string

func TStringKeyPtr(v TStringKey) *TStringKey { return &v }

// Attributes:
//  - Data
type TItemValue struct {
  Data []TItemChild `thrift:"data,1" db:"data" json:"data"`
}

func NewTItemValue() *TItemValue {
  return &TItemValue{}
}


func (p *TItemValue) GetData() []TItemChild {
  return p.Data
}
func (p *TItemValue) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TItemValue)  ReadField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]TItemChild, 0, size)
  p.Data =  tSlice
  for i := 0; i < size; i ++ {
var _elem0 TItemChild
    if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := TItemChild(v)
    _elem0 = temp
}
    p.Data = append(p.Data, _elem0)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TItemValue) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TItemValue"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TItemValue) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("data", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:data: ", p), err) }
  if err := oprot.WriteListBegin(thrift.I64, len(p.Data)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Data {
    if err := oprot.WriteI64(int64(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:data: ", p), err) }
  return err
}

func (p *TItemValue) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TItemValue(%+v)", *p)
}

// Attributes:
//  - Key
//  - Value
type TItem struct {
  Key []byte `thrift:"key,1,required" db:"key" json:"key"`
  Value *TItemValue `thrift:"value,2,required" db:"value" json:"value"`
}

func NewTItem() *TItem {
  return &TItem{}
}


func (p *TItem) GetKey() []byte {
  return p.Key
}
var TItem_Value_DEFAULT *TItemValue
func (p *TItem) GetValue() *TItemValue {
  if !p.IsSetValue() {
    return TItem_Value_DEFAULT
  }
return p.Value
}
func (p *TItem) IsSetValue() bool {
  return p.Value != nil
}

func (p *TItem) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetKey bool = false;
  var issetValue bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
        issetKey = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
        issetValue = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetKey{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Key is not set"));
  }
  if !issetValue{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Value is not set"));
  }
  return nil
}

func (p *TItem)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Key = v
}
  return nil
}

func (p *TItem)  ReadField2(iprot thrift.TProtocol) error {
  p.Value = &TItemValue{}
  if err := p.Value.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Value), err)
  }
  return nil
}

func (p *TItem) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TItem"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TItem) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("key", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:key: ", p), err) }
  if err := oprot.WriteBinary(p.Key); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.key (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:key: ", p), err) }
  return err
}

func (p *TItem) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("value", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:value: ", p), err) }
  if err := p.Value.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Value), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:value: ", p), err) }
  return err
}

func (p *TItem) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TItem(%+v)", *p)
}

// Attributes:
//  - Entries
//  - Prev
//  - Nxt
type TSmallSet struct {
  Entries TItemList `thrift:"entries,1" db:"entries" json:"entries"`
  Prev *TSmallSetIDKey `thrift:"prev,2" db:"prev" json:"prev,omitempty"`
  Nxt *TSmallSetIDKey `thrift:"nxt,3" db:"nxt" json:"nxt,omitempty"`
}

func NewTSmallSet() *TSmallSet {
  return &TSmallSet{}
}


func (p *TSmallSet) GetEntries() TItemList {
  return p.Entries
}
var TSmallSet_Prev_DEFAULT TSmallSetIDKey
func (p *TSmallSet) GetPrev() TSmallSetIDKey {
  if !p.IsSetPrev() {
    return TSmallSet_Prev_DEFAULT
  }
return *p.Prev
}
var TSmallSet_Nxt_DEFAULT TSmallSetIDKey
func (p *TSmallSet) GetNxt() TSmallSetIDKey {
  if !p.IsSetNxt() {
    return TSmallSet_Nxt_DEFAULT
  }
return *p.Nxt
}
func (p *TSmallSet) IsSetPrev() bool {
  return p.Prev != nil
}

func (p *TSmallSet) IsSetNxt() bool {
  return p.Nxt != nil
}

func (p *TSmallSet) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TSmallSet)  ReadField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make(TItemList, 0, size)
  p.Entries =  tSlice
  for i := 0; i < size; i ++ {
    _elem1 := &TItem{}
    if err := _elem1.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem1), err)
    }
    p.Entries = append(p.Entries, _elem1)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TSmallSet)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := TSmallSetIDKey(v)
  p.Prev = &temp
}
  return nil
}

func (p *TSmallSet)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := TSmallSetIDKey(v)
  p.Nxt = &temp
}
  return nil
}

func (p *TSmallSet) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TSmallSet"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TSmallSet) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("entries", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:entries: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Entries)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Entries {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:entries: ", p), err) }
  return err
}

func (p *TSmallSet) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetPrev() {
    if err := oprot.WriteFieldBegin("prev", thrift.I64, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:prev: ", p), err) }
    if err := oprot.WriteI64(int64(*p.Prev)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.prev (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:prev: ", p), err) }
  }
  return err
}

func (p *TSmallSet) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetNxt() {
    if err := oprot.WriteFieldBegin("nxt", thrift.I64, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:nxt: ", p), err) }
    if err := oprot.WriteI64(int64(*p.Nxt)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.nxt (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:nxt: ", p), err) }
  }
  return err
}

func (p *TSmallSet) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TSmallSet(%+v)", *p)
}

// Attributes:
//  - Items
type TItemSet struct {
  Items []*TItem `thrift:"items,1" db:"items" json:"items"`
}

func NewTItemSet() *TItemSet {
  return &TItemSet{}
}


func (p *TItemSet) GetItems() []*TItem {
  return p.Items
}
func (p *TItemSet) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TItemSet)  ReadField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TItem, 0, size)
  p.Items =  tSlice
  for i := 0; i < size; i ++ {
    _elem2 := &TItem{}
    if err := _elem2.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem2), err)
    }
    p.Items = append(p.Items, _elem2)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TItemSet) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TItemSet"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TItemSet) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("items", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:items: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Items)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Items {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:items: ", p), err) }
  return err
}

func (p *TItemSet) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TItemSet(%+v)", *p)
}

// Attributes:
//  - MinItem
//  - MetaID
//  - Count
type TMetaItem struct {
  MinItem TItemKey `thrift:"minItem,1" db:"minItem" json:"minItem"`
  MetaID int64 `thrift:"metaID,2" db:"metaID" json:"metaID"`
  Count int32 `thrift:"count,3" db:"count" json:"count"`
}

func NewTMetaItem() *TMetaItem {
  return &TMetaItem{}
}


func (p *TMetaItem) GetMinItem() TItemKey {
  return p.MinItem
}

func (p *TMetaItem) GetMetaID() int64 {
  return p.MetaID
}

func (p *TMetaItem) GetCount() int32 {
  return p.Count
}
func (p *TMetaItem) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TMetaItem)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TItemKey(v)
  p.MinItem = temp
}
  return nil
}

func (p *TMetaItem)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.MetaID = v
}
  return nil
}

func (p *TMetaItem)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Count = v
}
  return nil
}

func (p *TMetaItem) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TMetaItem"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TMetaItem) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("minItem", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:minItem: ", p), err) }
  if err := oprot.WriteBinary(p.MinItem); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.minItem (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:minItem: ", p), err) }
  return err
}

func (p *TMetaItem) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("metaID", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:metaID: ", p), err) }
  if err := oprot.WriteI64(int64(p.MetaID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.metaID (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:metaID: ", p), err) }
  return err
}

func (p *TMetaItem) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("count", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:count: ", p), err) }
  if err := oprot.WriteI32(int32(p.Count)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.count (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:count: ", p), err) }
  return err
}

func (p *TMetaItem) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TMetaItem(%+v)", *p)
}

// Attributes:
//  - MetaID
//  - ParentID
//  - ChildCount
//  - IsSmallSet
type TNeedSplitInfo struct {
  MetaID TMetaKey `thrift:"metaID,1" db:"metaID" json:"metaID"`
  ParentID TMetaKey `thrift:"parentID,2" db:"parentID" json:"parentID"`
  ChildCount int32 `thrift:"childCount,3" db:"childCount" json:"childCount"`
  IsSmallSet bool `thrift:"isSmallSet,4" db:"isSmallSet" json:"isSmallSet"`
}

func NewTNeedSplitInfo() *TNeedSplitInfo {
  return &TNeedSplitInfo{}
}


func (p *TNeedSplitInfo) GetMetaID() TMetaKey {
  return p.MetaID
}

func (p *TNeedSplitInfo) GetParentID() TMetaKey {
  return p.ParentID
}

func (p *TNeedSplitInfo) GetChildCount() int32 {
  return p.ChildCount
}

func (p *TNeedSplitInfo) GetIsSmallSet() bool {
  return p.IsSmallSet
}
func (p *TNeedSplitInfo) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TNeedSplitInfo)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TMetaKey(v)
  p.MetaID = temp
}
  return nil
}

func (p *TNeedSplitInfo)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := TMetaKey(v)
  p.ParentID = temp
}
  return nil
}

func (p *TNeedSplitInfo)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.ChildCount = v
}
  return nil
}

func (p *TNeedSplitInfo)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.IsSmallSet = v
}
  return nil
}

func (p *TNeedSplitInfo) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TNeedSplitInfo"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TNeedSplitInfo) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("metaID", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:metaID: ", p), err) }
  if err := oprot.WriteI64(int64(p.MetaID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.metaID (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:metaID: ", p), err) }
  return err
}

func (p *TNeedSplitInfo) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("parentID", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:parentID: ", p), err) }
  if err := oprot.WriteI64(int64(p.ParentID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.parentID (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:parentID: ", p), err) }
  return err
}

func (p *TNeedSplitInfo) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("childCount", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:childCount: ", p), err) }
  if err := oprot.WriteI32(int32(p.ChildCount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.childCount (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:childCount: ", p), err) }
  return err
}

func (p *TNeedSplitInfo) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("isSmallSet", thrift.BOOL, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:isSmallSet: ", p), err) }
  if err := oprot.WriteBool(bool(p.IsSmallSet)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.isSmallSet (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:isSmallSet: ", p), err) }
  return err
}

func (p *TNeedSplitInfo) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TNeedSplitInfo(%+v)", *p)
}

// Attributes:
//  - ParentID
//  - Level
//  - Children
//  - Smallset
//  - Splitinfo
type TBigSetLI64Data struct {
  ParentID TContainerKey `thrift:"parentID,1" db:"parentID" json:"parentID"`
  Level TLevelType `thrift:"level,2" db:"level" json:"level"`
  Children []*TMetaItem `thrift:"children,3" db:"children" json:"children,omitempty"`
  Smallset *TSmallSet `thrift:"smallset,4" db:"smallset" json:"smallset,omitempty"`
  Splitinfo *TNeedSplitInfo `thrift:"splitinfo,5" db:"splitinfo" json:"splitinfo,omitempty"`
}

func NewTBigSetLI64Data() *TBigSetLI64Data {
  return &TBigSetLI64Data{}
}


func (p *TBigSetLI64Data) GetParentID() TContainerKey {
  return p.ParentID
}

func (p *TBigSetLI64Data) GetLevel() TLevelType {
  return p.Level
}
var TBigSetLI64Data_Children_DEFAULT []*TMetaItem

func (p *TBigSetLI64Data) GetChildren() []*TMetaItem {
  return p.Children
}
var TBigSetLI64Data_Smallset_DEFAULT *TSmallSet
func (p *TBigSetLI64Data) GetSmallset() *TSmallSet {
  if !p.IsSetSmallset() {
    return TBigSetLI64Data_Smallset_DEFAULT
  }
return p.Smallset
}
var TBigSetLI64Data_Splitinfo_DEFAULT *TNeedSplitInfo
func (p *TBigSetLI64Data) GetSplitinfo() *TNeedSplitInfo {
  if !p.IsSetSplitinfo() {
    return TBigSetLI64Data_Splitinfo_DEFAULT
  }
return p.Splitinfo
}
func (p *TBigSetLI64Data) IsSetChildren() bool {
  return p.Children != nil
}

func (p *TBigSetLI64Data) IsSetSmallset() bool {
  return p.Smallset != nil
}

func (p *TBigSetLI64Data) IsSetSplitinfo() bool {
  return p.Splitinfo != nil
}

func (p *TBigSetLI64Data) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I16 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TBigSetLI64Data)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TContainerKey(v)
  p.ParentID = temp
}
  return nil
}

func (p *TBigSetLI64Data)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := TLevelType(v)
  p.Level = temp
}
  return nil
}

func (p *TBigSetLI64Data)  ReadField3(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TMetaItem, 0, size)
  p.Children =  tSlice
  for i := 0; i < size; i ++ {
    _elem3 := &TMetaItem{}
    if err := _elem3.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem3), err)
    }
    p.Children = append(p.Children, _elem3)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TBigSetLI64Data)  ReadField4(iprot thrift.TProtocol) error {
  p.Smallset = &TSmallSet{}
  if err := p.Smallset.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Smallset), err)
  }
  return nil
}

func (p *TBigSetLI64Data)  ReadField5(iprot thrift.TProtocol) error {
  p.Splitinfo = &TNeedSplitInfo{}
  if err := p.Splitinfo.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Splitinfo), err)
  }
  return nil
}

func (p *TBigSetLI64Data) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TBigSetLI64Data"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TBigSetLI64Data) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("parentID", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:parentID: ", p), err) }
  if err := oprot.WriteI64(int64(p.ParentID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.parentID (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:parentID: ", p), err) }
  return err
}

func (p *TBigSetLI64Data) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("level", thrift.I16, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:level: ", p), err) }
  if err := oprot.WriteI16(int16(p.Level)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.level (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:level: ", p), err) }
  return err
}

func (p *TBigSetLI64Data) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetChildren() {
    if err := oprot.WriteFieldBegin("children", thrift.LIST, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:children: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Children)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Children {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:children: ", p), err) }
  }
  return err
}

func (p *TBigSetLI64Data) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetSmallset() {
    if err := oprot.WriteFieldBegin("smallset", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:smallset: ", p), err) }
    if err := p.Smallset.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Smallset), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:smallset: ", p), err) }
  }
  return err
}

func (p *TBigSetLI64Data) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetSplitinfo() {
    if err := oprot.WriteFieldBegin("splitinfo", thrift.STRUCT, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:splitinfo: ", p), err) }
    if err := p.Splitinfo.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Splitinfo), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:splitinfo: ", p), err) }
  }
  return err
}

func (p *TBigSetLI64Data) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TBigSetLI64Data(%+v)", *p)
}

// Attributes:
//  - MinItem
//  - MetaID
//  - Level
type TSetMetaPathItem struct {
  MinItem TItemKey `thrift:"minItem,1" db:"minItem" json:"minItem"`
  MetaID int64 `thrift:"metaID,2" db:"metaID" json:"metaID"`
  Level int8 `thrift:"level,3" db:"level" json:"level"`
}

func NewTSetMetaPathItem() *TSetMetaPathItem {
  return &TSetMetaPathItem{}
}


func (p *TSetMetaPathItem) GetMinItem() TItemKey {
  return p.MinItem
}

func (p *TSetMetaPathItem) GetMetaID() int64 {
  return p.MetaID
}

func (p *TSetMetaPathItem) GetLevel() int8 {
  return p.Level
}
func (p *TSetMetaPathItem) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.BYTE {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TSetMetaPathItem)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TItemKey(v)
  p.MinItem = temp
}
  return nil
}

func (p *TSetMetaPathItem)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.MetaID = v
}
  return nil
}

func (p *TSetMetaPathItem)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadByte(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := int8(v)
  p.Level = temp
}
  return nil
}

func (p *TSetMetaPathItem) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TSetMetaPathItem"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TSetMetaPathItem) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("minItem", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:minItem: ", p), err) }
  if err := oprot.WriteBinary(p.MinItem); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.minItem (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:minItem: ", p), err) }
  return err
}

func (p *TSetMetaPathItem) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("metaID", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:metaID: ", p), err) }
  if err := oprot.WriteI64(int64(p.MetaID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.metaID (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:metaID: ", p), err) }
  return err
}

func (p *TSetMetaPathItem) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("level", thrift.BYTE, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:level: ", p), err) }
  if err := oprot.WriteByte(int8(p.Level)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.level (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:level: ", p), err) }
  return err
}

func (p *TSetMetaPathItem) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TSetMetaPathItem(%+v)", *p)
}

// Attributes:
//  - MetaPath
//  - SmallSetInfo
//  - SplitInfo
type TSetMetaPath struct {
  MetaPath []*TSetMetaPathItem `thrift:"metaPath,1" db:"metaPath" json:"metaPath"`
  SmallSetInfo *TSetMetaPathItem `thrift:"smallSetInfo,2" db:"smallSetInfo" json:"smallSetInfo,omitempty"`
  SplitInfo *TNeedSplitInfo `thrift:"splitInfo,3" db:"splitInfo" json:"splitInfo,omitempty"`
}

func NewTSetMetaPath() *TSetMetaPath {
  return &TSetMetaPath{}
}


func (p *TSetMetaPath) GetMetaPath() []*TSetMetaPathItem {
  return p.MetaPath
}
var TSetMetaPath_SmallSetInfo_DEFAULT *TSetMetaPathItem
func (p *TSetMetaPath) GetSmallSetInfo() *TSetMetaPathItem {
  if !p.IsSetSmallSetInfo() {
    return TSetMetaPath_SmallSetInfo_DEFAULT
  }
return p.SmallSetInfo
}
var TSetMetaPath_SplitInfo_DEFAULT *TNeedSplitInfo
func (p *TSetMetaPath) GetSplitInfo() *TNeedSplitInfo {
  if !p.IsSetSplitInfo() {
    return TSetMetaPath_SplitInfo_DEFAULT
  }
return p.SplitInfo
}
func (p *TSetMetaPath) IsSetSmallSetInfo() bool {
  return p.SmallSetInfo != nil
}

func (p *TSetMetaPath) IsSetSplitInfo() bool {
  return p.SplitInfo != nil
}

func (p *TSetMetaPath) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TSetMetaPath)  ReadField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TSetMetaPathItem, 0, size)
  p.MetaPath =  tSlice
  for i := 0; i < size; i ++ {
    _elem4 := &TSetMetaPathItem{}
    if err := _elem4.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem4), err)
    }
    p.MetaPath = append(p.MetaPath, _elem4)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TSetMetaPath)  ReadField2(iprot thrift.TProtocol) error {
  p.SmallSetInfo = &TSetMetaPathItem{}
  if err := p.SmallSetInfo.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SmallSetInfo), err)
  }
  return nil
}

func (p *TSetMetaPath)  ReadField3(iprot thrift.TProtocol) error {
  p.SplitInfo = &TNeedSplitInfo{}
  if err := p.SplitInfo.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SplitInfo), err)
  }
  return nil
}

func (p *TSetMetaPath) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TSetMetaPath"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TSetMetaPath) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("metaPath", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:metaPath: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.MetaPath)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.MetaPath {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:metaPath: ", p), err) }
  return err
}

func (p *TSetMetaPath) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetSmallSetInfo() {
    if err := oprot.WriteFieldBegin("smallSetInfo", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:smallSetInfo: ", p), err) }
    if err := p.SmallSetInfo.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SmallSetInfo), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:smallSetInfo: ", p), err) }
  }
  return err
}

func (p *TSetMetaPath) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetSplitInfo() {
    if err := oprot.WriteFieldBegin("splitInfo", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:splitInfo: ", p), err) }
    if err := p.SplitInfo.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SplitInfo), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:splitInfo: ", p), err) }
  }
  return err
}

func (p *TSetMetaPath) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TSetMetaPath(%+v)", *p)
}

// Attributes:
//  - SmallSetIDs
//  - FirstIdxFrom
type TGetSliceInfo struct {
  SmallSetIDs []TMetaKey `thrift:"smallSetIDs,1" db:"smallSetIDs" json:"smallSetIDs"`
  FirstIdxFrom int32 `thrift:"firstIdxFrom,2" db:"firstIdxFrom" json:"firstIdxFrom"`
}

func NewTGetSliceInfo() *TGetSliceInfo {
  return &TGetSliceInfo{}
}


func (p *TGetSliceInfo) GetSmallSetIDs() []TMetaKey {
  return p.SmallSetIDs
}

func (p *TGetSliceInfo) GetFirstIdxFrom() int32 {
  return p.FirstIdxFrom
}
func (p *TGetSliceInfo) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TGetSliceInfo)  ReadField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]TMetaKey, 0, size)
  p.SmallSetIDs =  tSlice
  for i := 0; i < size; i ++ {
var _elem5 TMetaKey
    if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := TMetaKey(v)
    _elem5 = temp
}
    p.SmallSetIDs = append(p.SmallSetIDs, _elem5)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TGetSliceInfo)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.FirstIdxFrom = v
}
  return nil
}

func (p *TGetSliceInfo) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TGetSliceInfo"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TGetSliceInfo) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("smallSetIDs", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:smallSetIDs: ", p), err) }
  if err := oprot.WriteListBegin(thrift.I64, len(p.SmallSetIDs)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.SmallSetIDs {
    if err := oprot.WriteI64(int64(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:smallSetIDs: ", p), err) }
  return err
}

func (p *TGetSliceInfo) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("firstIdxFrom", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:firstIdxFrom: ", p), err) }
  if err := oprot.WriteI32(int32(p.FirstIdxFrom)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.firstIdxFrom (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:firstIdxFrom: ", p), err) }
  return err
}

func (p *TGetSliceInfo) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TGetSliceInfo(%+v)", *p)
}

// Attributes:
//  - Count
//  - MidItem
//  - CountFromMid
//  - Prev
//  - Nxt
type TSmallSetInfo struct {
  Count int32 `thrift:"count,1" db:"count" json:"count"`
  MidItem TItemKey `thrift:"midItem,2" db:"midItem" json:"midItem"`
  CountFromMid int32 `thrift:"countFromMid,3" db:"countFromMid" json:"countFromMid"`
  Prev TSmallSetIDKey `thrift:"prev,4" db:"prev" json:"prev"`
  Nxt TSmallSetIDKey `thrift:"nxt,5" db:"nxt" json:"nxt"`
}

func NewTSmallSetInfo() *TSmallSetInfo {
  return &TSmallSetInfo{}
}


func (p *TSmallSetInfo) GetCount() int32 {
  return p.Count
}

func (p *TSmallSetInfo) GetMidItem() TItemKey {
  return p.MidItem
}

func (p *TSmallSetInfo) GetCountFromMid() int32 {
  return p.CountFromMid
}
var TSmallSetInfo_Prev_DEFAULT TSmallSetIDKey = 0

func (p *TSmallSetInfo) GetPrev() TSmallSetIDKey {
  return p.Prev
}
var TSmallSetInfo_Nxt_DEFAULT TSmallSetIDKey = 0

func (p *TSmallSetInfo) GetNxt() TSmallSetIDKey {
  return p.Nxt
}
func (p *TSmallSetInfo) IsSetPrev() bool {
  return p.Prev != TSmallSetInfo_Prev_DEFAULT
}

func (p *TSmallSetInfo) IsSetNxt() bool {
  return p.Nxt != TSmallSetInfo_Nxt_DEFAULT
}

func (p *TSmallSetInfo) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TSmallSetInfo)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Count = v
}
  return nil
}

func (p *TSmallSetInfo)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := TItemKey(v)
  p.MidItem = temp
}
  return nil
}

func (p *TSmallSetInfo)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.CountFromMid = v
}
  return nil
}

func (p *TSmallSetInfo)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  temp := TSmallSetIDKey(v)
  p.Prev = temp
}
  return nil
}

func (p *TSmallSetInfo)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  temp := TSmallSetIDKey(v)
  p.Nxt = temp
}
  return nil
}

func (p *TSmallSetInfo) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TSmallSetInfo"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TSmallSetInfo) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("count", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:count: ", p), err) }
  if err := oprot.WriteI32(int32(p.Count)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.count (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:count: ", p), err) }
  return err
}

func (p *TSmallSetInfo) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("midItem", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:midItem: ", p), err) }
  if err := oprot.WriteBinary(p.MidItem); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.midItem (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:midItem: ", p), err) }
  return err
}

func (p *TSmallSetInfo) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("countFromMid", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:countFromMid: ", p), err) }
  if err := oprot.WriteI32(int32(p.CountFromMid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.countFromMid (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:countFromMid: ", p), err) }
  return err
}

func (p *TSmallSetInfo) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetPrev() {
    if err := oprot.WriteFieldBegin("prev", thrift.I64, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:prev: ", p), err) }
    if err := oprot.WriteI64(int64(p.Prev)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.prev (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:prev: ", p), err) }
  }
  return err
}

func (p *TSmallSetInfo) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetNxt() {
    if err := oprot.WriteFieldBegin("nxt", thrift.I64, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:nxt: ", p), err) }
    if err := oprot.WriteI64(int64(p.Nxt)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.nxt (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:nxt: ", p), err) }
  }
  return err
}

func (p *TSmallSetInfo) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TSmallSetInfo(%+v)", *p)
}

// Attributes:
//  - Error
//  - Item
type TItemResult_ struct {
  Error TErrorCode `thrift:"error,1" db:"error" json:"error"`
  Item *TItem `thrift:"item,2" db:"item" json:"item,omitempty"`
}

func NewTItemResult_() *TItemResult_ {
  return &TItemResult_{}
}


func (p *TItemResult_) GetError() TErrorCode {
  return p.Error
}
var TItemResult__Item_DEFAULT *TItem
func (p *TItemResult_) GetItem() *TItem {
  if !p.IsSetItem() {
    return TItemResult__Item_DEFAULT
  }
return p.Item
}
func (p *TItemResult_) IsSetItem() bool {
  return p.Item != nil
}

func (p *TItemResult_) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TItemResult_)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TErrorCode(v)
  p.Error = temp
}
  return nil
}

func (p *TItemResult_)  ReadField2(iprot thrift.TProtocol) error {
  p.Item = &TItem{}
  if err := p.Item.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Item), err)
  }
  return nil
}

func (p *TItemResult_) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TItemResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TItemResult_) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("error", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:error: ", p), err) }
  if err := oprot.WriteI32(int32(p.Error)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.error (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:error: ", p), err) }
  return err
}

func (p *TItemResult_) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetItem() {
    if err := oprot.WriteFieldBegin("item", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:item: ", p), err) }
    if err := p.Item.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Item), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:item: ", p), err) }
  }
  return err
}

func (p *TItemResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TItemResult_(%+v)", *p)
}

// Attributes:
//  - Error
//  - Items
type TItemSetResult_ struct {
  Error TErrorCode `thrift:"error,1" db:"error" json:"error"`
  Items *TItemSet `thrift:"items,2" db:"items" json:"items,omitempty"`
}

func NewTItemSetResult_() *TItemSetResult_ {
  return &TItemSetResult_{}
}


func (p *TItemSetResult_) GetError() TErrorCode {
  return p.Error
}
var TItemSetResult__Items_DEFAULT *TItemSet
func (p *TItemSetResult_) GetItems() *TItemSet {
  if !p.IsSetItems() {
    return TItemSetResult__Items_DEFAULT
  }
return p.Items
}
func (p *TItemSetResult_) IsSetItems() bool {
  return p.Items != nil
}

func (p *TItemSetResult_) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TItemSetResult_)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TErrorCode(v)
  p.Error = temp
}
  return nil
}

func (p *TItemSetResult_)  ReadField2(iprot thrift.TProtocol) error {
  p.Items = &TItemSet{}
  if err := p.Items.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Items), err)
  }
  return nil
}

func (p *TItemSetResult_) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TItemSetResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TItemSetResult_) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("error", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:error: ", p), err) }
  if err := oprot.WriteI32(int32(p.Error)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.error (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:error: ", p), err) }
  return err
}

func (p *TItemSetResult_) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetItems() {
    if err := oprot.WriteFieldBegin("items", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:items: ", p), err) }
    if err := p.Items.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Items), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:items: ", p), err) }
  }
  return err
}

func (p *TItemSetResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TItemSetResult_(%+v)", *p)
}

// Attributes:
//  - Error
//  - Ok
//  - OldItem
type TPutItemResult_ struct {
  Error TErrorCode `thrift:"error,1" db:"error" json:"error"`
  Ok bool `thrift:"ok,2" db:"ok" json:"ok"`
  OldItem *TItem `thrift:"oldItem,3" db:"oldItem" json:"oldItem,omitempty"`
}

func NewTPutItemResult_() *TPutItemResult_ {
  return &TPutItemResult_{}
}


func (p *TPutItemResult_) GetError() TErrorCode {
  return p.Error
}

func (p *TPutItemResult_) GetOk() bool {
  return p.Ok
}
var TPutItemResult__OldItem_DEFAULT *TItem
func (p *TPutItemResult_) GetOldItem() *TItem {
  if !p.IsSetOldItem() {
    return TPutItemResult__OldItem_DEFAULT
  }
return p.OldItem
}
func (p *TPutItemResult_) IsSetOldItem() bool {
  return p.OldItem != nil
}

func (p *TPutItemResult_) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TPutItemResult_)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TErrorCode(v)
  p.Error = temp
}
  return nil
}

func (p *TPutItemResult_)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Ok = v
}
  return nil
}

func (p *TPutItemResult_)  ReadField3(iprot thrift.TProtocol) error {
  p.OldItem = &TItem{}
  if err := p.OldItem.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.OldItem), err)
  }
  return nil
}

func (p *TPutItemResult_) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TPutItemResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TPutItemResult_) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("error", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:error: ", p), err) }
  if err := oprot.WriteI32(int32(p.Error)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.error (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:error: ", p), err) }
  return err
}

func (p *TPutItemResult_) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("ok", thrift.BOOL, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ok: ", p), err) }
  if err := oprot.WriteBool(bool(p.Ok)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ok (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ok: ", p), err) }
  return err
}

func (p *TPutItemResult_) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetOldItem() {
    if err := oprot.WriteFieldBegin("oldItem", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:oldItem: ", p), err) }
    if err := p.OldItem.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.OldItem), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:oldItem: ", p), err) }
  }
  return err
}

func (p *TPutItemResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TPutItemResult_(%+v)", *p)
}

// Attributes:
//  - Error
//  - OldChildren
//  - Children
type TChildItemResult_ struct {
  Error TErrorCode `thrift:"error,1" db:"error" json:"error"`
  OldChildren *TItemValue `thrift:"oldChildren,2" db:"oldChildren" json:"oldChildren,omitempty"`
  Children *TItemValue `thrift:"children,3" db:"children" json:"children,omitempty"`
}

func NewTChildItemResult_() *TChildItemResult_ {
  return &TChildItemResult_{}
}


func (p *TChildItemResult_) GetError() TErrorCode {
  return p.Error
}
var TChildItemResult__OldChildren_DEFAULT *TItemValue
func (p *TChildItemResult_) GetOldChildren() *TItemValue {
  if !p.IsSetOldChildren() {
    return TChildItemResult__OldChildren_DEFAULT
  }
return p.OldChildren
}
var TChildItemResult__Children_DEFAULT *TItemValue
func (p *TChildItemResult_) GetChildren() *TItemValue {
  if !p.IsSetChildren() {
    return TChildItemResult__Children_DEFAULT
  }
return p.Children
}
func (p *TChildItemResult_) IsSetOldChildren() bool {
  return p.OldChildren != nil
}

func (p *TChildItemResult_) IsSetChildren() bool {
  return p.Children != nil
}

func (p *TChildItemResult_) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TChildItemResult_)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TErrorCode(v)
  p.Error = temp
}
  return nil
}

func (p *TChildItemResult_)  ReadField2(iprot thrift.TProtocol) error {
  p.OldChildren = &TItemValue{}
  if err := p.OldChildren.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.OldChildren), err)
  }
  return nil
}

func (p *TChildItemResult_)  ReadField3(iprot thrift.TProtocol) error {
  p.Children = &TItemValue{}
  if err := p.Children.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Children), err)
  }
  return nil
}

func (p *TChildItemResult_) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TChildItemResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TChildItemResult_) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("error", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:error: ", p), err) }
  if err := oprot.WriteI32(int32(p.Error)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.error (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:error: ", p), err) }
  return err
}

func (p *TChildItemResult_) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetOldChildren() {
    if err := oprot.WriteFieldBegin("oldChildren", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:oldChildren: ", p), err) }
    if err := p.OldChildren.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.OldChildren), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:oldChildren: ", p), err) }
  }
  return err
}

func (p *TChildItemResult_) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetChildren() {
    if err := oprot.WriteFieldBegin("children", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:children: ", p), err) }
    if err := p.Children.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Children), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:children: ", p), err) }
  }
  return err
}

func (p *TChildItemResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TChildItemResult_(%+v)", *p)
}

// Attributes:
//  - Error
//  - Existed
type TExistedResult_ struct {
  Error TErrorCode `thrift:"error,1" db:"error" json:"error"`
  Existed bool `thrift:"existed,2" db:"existed" json:"existed"`
}

func NewTExistedResult_() *TExistedResult_ {
  return &TExistedResult_{}
}


func (p *TExistedResult_) GetError() TErrorCode {
  return p.Error
}

func (p *TExistedResult_) GetExisted() bool {
  return p.Existed
}
func (p *TExistedResult_) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TExistedResult_)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TErrorCode(v)
  p.Error = temp
}
  return nil
}

func (p *TExistedResult_)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Existed = v
}
  return nil
}

func (p *TExistedResult_) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TExistedResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TExistedResult_) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("error", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:error: ", p), err) }
  if err := oprot.WriteI32(int32(p.Error)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.error (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:error: ", p), err) }
  return err
}

func (p *TExistedResult_) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("existed", thrift.BOOL, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:existed: ", p), err) }
  if err := oprot.WriteBool(bool(p.Existed)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.existed (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:existed: ", p), err) }
  return err
}

func (p *TExistedResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TExistedResult_(%+v)", *p)
}

// Attributes:
//  - Error
//  - Added
//  - Replaced
type TMultiPutItemResult_ struct {
  Error TErrorCode `thrift:"error,1" db:"error" json:"error"`
  Added []TItemKey `thrift:"added,2" db:"added" json:"added,omitempty"`
  Replaced []*TItem `thrift:"replaced,3" db:"replaced" json:"replaced,omitempty"`
}

func NewTMultiPutItemResult_() *TMultiPutItemResult_ {
  return &TMultiPutItemResult_{}
}


func (p *TMultiPutItemResult_) GetError() TErrorCode {
  return p.Error
}
var TMultiPutItemResult__Added_DEFAULT []TItemKey

func (p *TMultiPutItemResult_) GetAdded() []TItemKey {
  return p.Added
}
var TMultiPutItemResult__Replaced_DEFAULT []*TItem

func (p *TMultiPutItemResult_) GetReplaced() []*TItem {
  return p.Replaced
}
func (p *TMultiPutItemResult_) IsSetAdded() bool {
  return p.Added != nil
}

func (p *TMultiPutItemResult_) IsSetReplaced() bool {
  return p.Replaced != nil
}

func (p *TMultiPutItemResult_) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TMultiPutItemResult_)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TErrorCode(v)
  p.Error = temp
}
  return nil
}

func (p *TMultiPutItemResult_)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]TItemKey, 0, size)
  p.Added =  tSlice
  for i := 0; i < size; i ++ {
var _elem6 TItemKey
    if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := TItemKey(v)
    _elem6 = temp
}
    p.Added = append(p.Added, _elem6)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TMultiPutItemResult_)  ReadField3(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TItem, 0, size)
  p.Replaced =  tSlice
  for i := 0; i < size; i ++ {
    _elem7 := &TItem{}
    if err := _elem7.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem7), err)
    }
    p.Replaced = append(p.Replaced, _elem7)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TMultiPutItemResult_) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TMultiPutItemResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TMultiPutItemResult_) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("error", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:error: ", p), err) }
  if err := oprot.WriteI32(int32(p.Error)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.error (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:error: ", p), err) }
  return err
}

func (p *TMultiPutItemResult_) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetAdded() {
    if err := oprot.WriteFieldBegin("added", thrift.LIST, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:added: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRING, len(p.Added)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Added {
      if err := oprot.WriteBinary(v); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:added: ", p), err) }
  }
  return err
}

func (p *TMultiPutItemResult_) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetReplaced() {
    if err := oprot.WriteFieldBegin("replaced", thrift.LIST, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:replaced: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Replaced)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Replaced {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:replaced: ", p), err) }
  }
  return err
}

func (p *TMultiPutItemResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TMultiPutItemResult_(%+v)", *p)
}

// Attributes:
//  - Error
//  - Splited
//  - NewRootID_
//  - MinItem
//  - Count
type TSplitBigSetResult_ struct {
  Error TErrorCode `thrift:"error,1" db:"error" json:"error"`
  Splited bool `thrift:"splited,2" db:"splited" json:"splited"`
  NewRootID_ TContainerKey `thrift:"newRootID,3" db:"newRootID" json:"newRootID"`
  MinItem TItemKey `thrift:"minItem,4" db:"minItem" json:"minItem"`
  Count int64 `thrift:"count,5" db:"count" json:"count"`
}

func NewTSplitBigSetResult_() *TSplitBigSetResult_ {
  return &TSplitBigSetResult_{}
}


func (p *TSplitBigSetResult_) GetError() TErrorCode {
  return p.Error
}

func (p *TSplitBigSetResult_) GetSplited() bool {
  return p.Splited
}

func (p *TSplitBigSetResult_) GetNewRootID_() TContainerKey {
  return p.NewRootID_
}

func (p *TSplitBigSetResult_) GetMinItem() TItemKey {
  return p.MinItem
}

func (p *TSplitBigSetResult_) GetCount() int64 {
  return p.Count
}
func (p *TSplitBigSetResult_) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TSplitBigSetResult_)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TErrorCode(v)
  p.Error = temp
}
  return nil
}

func (p *TSplitBigSetResult_)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Splited = v
}
  return nil
}

func (p *TSplitBigSetResult_)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := TContainerKey(v)
  p.NewRootID_ = temp
}
  return nil
}

func (p *TSplitBigSetResult_)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  temp := TItemKey(v)
  p.MinItem = temp
}
  return nil
}

func (p *TSplitBigSetResult_)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Count = v
}
  return nil
}

func (p *TSplitBigSetResult_) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TSplitBigSetResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TSplitBigSetResult_) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("error", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:error: ", p), err) }
  if err := oprot.WriteI32(int32(p.Error)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.error (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:error: ", p), err) }
  return err
}

func (p *TSplitBigSetResult_) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("splited", thrift.BOOL, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:splited: ", p), err) }
  if err := oprot.WriteBool(bool(p.Splited)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.splited (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:splited: ", p), err) }
  return err
}

func (p *TSplitBigSetResult_) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("newRootID", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:newRootID: ", p), err) }
  if err := oprot.WriteI64(int64(p.NewRootID_)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.newRootID (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:newRootID: ", p), err) }
  return err
}

func (p *TSplitBigSetResult_) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("minItem", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:minItem: ", p), err) }
  if err := oprot.WriteBinary(p.MinItem); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.minItem (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:minItem: ", p), err) }
  return err
}

func (p *TSplitBigSetResult_) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("count", thrift.I64, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:count: ", p), err) }
  if err := oprot.WriteI64(int64(p.Count)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.count (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:count: ", p), err) }
  return err
}

func (p *TSplitBigSetResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TSplitBigSetResult_(%+v)", *p)
}

// Attributes:
//  - BigsetName
//  - BigsetID
//  - Count
type TStringBigSetInfo struct {
  BigsetName TStringKey `thrift:"bigsetName,1,required" db:"bigsetName" json:"bigsetName"`
  BigsetID TContainerKey `thrift:"bigsetID,2,required" db:"bigsetID" json:"bigsetID"`
  Count *int64 `thrift:"count,3" db:"count" json:"count,omitempty"`
}

func NewTStringBigSetInfo() *TStringBigSetInfo {
  return &TStringBigSetInfo{}
}


func (p *TStringBigSetInfo) GetBigsetName() TStringKey {
  return p.BigsetName
}

func (p *TStringBigSetInfo) GetBigsetID() TContainerKey {
  return p.BigsetID
}
var TStringBigSetInfo_Count_DEFAULT int64
func (p *TStringBigSetInfo) GetCount() int64 {
  if !p.IsSetCount() {
    return TStringBigSetInfo_Count_DEFAULT
  }
return *p.Count
}
func (p *TStringBigSetInfo) IsSetCount() bool {
  return p.Count != nil
}

func (p *TStringBigSetInfo) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetBigsetName bool = false;
  var issetBigsetID bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
        issetBigsetName = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
        issetBigsetID = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetBigsetName{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field BigsetName is not set"));
  }
  if !issetBigsetID{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field BigsetID is not set"));
  }
  return nil
}

func (p *TStringBigSetInfo)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TStringKey(v)
  p.BigsetName = temp
}
  return nil
}

func (p *TStringBigSetInfo)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := TContainerKey(v)
  p.BigsetID = temp
}
  return nil
}

func (p *TStringBigSetInfo)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Count = &v
}
  return nil
}

func (p *TStringBigSetInfo) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TStringBigSetInfo"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TStringBigSetInfo) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("bigsetName", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:bigsetName: ", p), err) }
  if err := oprot.WriteString(string(p.BigsetName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.bigsetName (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:bigsetName: ", p), err) }
  return err
}

func (p *TStringBigSetInfo) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("bigsetID", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:bigsetID: ", p), err) }
  if err := oprot.WriteI64(int64(p.BigsetID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.bigsetID (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:bigsetID: ", p), err) }
  return err
}

func (p *TStringBigSetInfo) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetCount() {
    if err := oprot.WriteFieldBegin("count", thrift.I64, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:count: ", p), err) }
    if err := oprot.WriteI64(int64(*p.Count)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.count (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:count: ", p), err) }
  }
  return err
}

func (p *TStringBigSetInfo) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TStringBigSetInfo(%+v)", *p)
}

// Attributes:
//  - Error
//  - Info
type TBigSetInfoResult_ struct {
  Error TErrorCode `thrift:"error,1,required" db:"error" json:"error"`
  Info *TStringBigSetInfo `thrift:"info,2" db:"info" json:"info,omitempty"`
}

func NewTBigSetInfoResult_() *TBigSetInfoResult_ {
  return &TBigSetInfoResult_{}
}


func (p *TBigSetInfoResult_) GetError() TErrorCode {
  return p.Error
}
var TBigSetInfoResult__Info_DEFAULT *TStringBigSetInfo
func (p *TBigSetInfoResult_) GetInfo() *TStringBigSetInfo {
  if !p.IsSetInfo() {
    return TBigSetInfoResult__Info_DEFAULT
  }
return p.Info
}
func (p *TBigSetInfoResult_) IsSetInfo() bool {
  return p.Info != nil
}

func (p *TBigSetInfoResult_) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetError bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
        issetError = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetError{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Error is not set"));
  }
  return nil
}

func (p *TBigSetInfoResult_)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TErrorCode(v)
  p.Error = temp
}
  return nil
}

func (p *TBigSetInfoResult_)  ReadField2(iprot thrift.TProtocol) error {
  p.Info = &TStringBigSetInfo{}
  if err := p.Info.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Info), err)
  }
  return nil
}

func (p *TBigSetInfoResult_) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TBigSetInfoResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TBigSetInfoResult_) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("error", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:error: ", p), err) }
  if err := oprot.WriteI32(int32(p.Error)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.error (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:error: ", p), err) }
  return err
}

func (p *TBigSetInfoResult_) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetInfo() {
    if err := oprot.WriteFieldBegin("info", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:info: ", p), err) }
    if err := p.Info.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Info), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:info: ", p), err) }
  }
  return err
}

func (p *TBigSetInfoResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TBigSetInfoResult_(%+v)", *p)
}

// Attributes:
//  - RootID
//  - SplitInfo
type SplitJob struct {
  RootID TContainerKey `thrift:"rootID,1,required" db:"rootID" json:"rootID"`
  SplitInfo *TNeedSplitInfo `thrift:"splitInfo,2" db:"splitInfo" json:"splitInfo,omitempty"`
}

func NewSplitJob() *SplitJob {
  return &SplitJob{}
}


func (p *SplitJob) GetRootID() TContainerKey {
  return p.RootID
}
var SplitJob_SplitInfo_DEFAULT *TNeedSplitInfo
func (p *SplitJob) GetSplitInfo() *TNeedSplitInfo {
  if !p.IsSetSplitInfo() {
    return SplitJob_SplitInfo_DEFAULT
  }
return p.SplitInfo
}
func (p *SplitJob) IsSetSplitInfo() bool {
  return p.SplitInfo != nil
}

func (p *SplitJob) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetRootID bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
        issetRootID = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetRootID{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RootID is not set"));
  }
  return nil
}

func (p *SplitJob)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TContainerKey(v)
  p.RootID = temp
}
  return nil
}

func (p *SplitJob)  ReadField2(iprot thrift.TProtocol) error {
  p.SplitInfo = &TNeedSplitInfo{}
  if err := p.SplitInfo.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SplitInfo), err)
  }
  return nil
}

func (p *SplitJob) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SplitJob"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SplitJob) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("rootID", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rootID: ", p), err) }
  if err := oprot.WriteI64(int64(p.RootID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.rootID (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rootID: ", p), err) }
  return err
}

func (p *SplitJob) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetSplitInfo() {
    if err := oprot.WriteFieldBegin("splitInfo", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:splitInfo: ", p), err) }
    if err := p.SplitInfo.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SplitInfo), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:splitInfo: ", p), err) }
  }
  return err
}

func (p *SplitJob) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SplitJob(%+v)", *p)
}

type MasterMetaService interface {
  // Parameters:
  //  - Key
  GetMetaID(ctx context.Context, key TKey) (r TMetaKey, err error)
  // Parameters:
  //  - Key
  //  - MetaID
  SetMetaID(ctx context.Context, key TKey, metaID TMetaKey) (r bool, err error)
}

type MasterMetaServiceClient struct {
  c thrift.TClient
}

func NewMasterMetaServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *MasterMetaServiceClient {
  return &MasterMetaServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewMasterMetaServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *MasterMetaServiceClient {
  return &MasterMetaServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewMasterMetaServiceClient(c thrift.TClient) *MasterMetaServiceClient {
  return &MasterMetaServiceClient{
    c: c,
  }
}

func (p *MasterMetaServiceClient) Client_() thrift.TClient {
  return p.c
}
// Parameters:
//  - Key
func (p *MasterMetaServiceClient) GetMetaID(ctx context.Context, key TKey) (r TMetaKey, err error) {
  var _args8 MasterMetaServiceGetMetaIDArgs
  _args8.Key = key
  var _result9 MasterMetaServiceGetMetaIDResult
  if err = p.Client_().Call(ctx, "getMetaID", &_args8, &_result9); err != nil {
    return
  }
  return _result9.GetSuccess(), nil
}

// Parameters:
//  - Key
//  - MetaID
func (p *MasterMetaServiceClient) SetMetaID(ctx context.Context, key TKey, metaID TMetaKey) (r bool, err error) {
  var _args10 MasterMetaServiceSetMetaIDArgs
  _args10.Key = key
  _args10.MetaID = metaID
  var _result11 MasterMetaServiceSetMetaIDResult
  if err = p.Client_().Call(ctx, "setMetaID", &_args10, &_result11); err != nil {
    return
  }
  return _result11.GetSuccess(), nil
}

type MasterMetaServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler MasterMetaService
}

func (p *MasterMetaServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *MasterMetaServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *MasterMetaServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewMasterMetaServiceProcessor(handler MasterMetaService) *MasterMetaServiceProcessor {

  self12 := &MasterMetaServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self12.processorMap["getMetaID"] = &masterMetaServiceProcessorGetMetaID{handler:handler}
  self12.processorMap["setMetaID"] = &masterMetaServiceProcessorSetMetaID{handler:handler}
return self12
}

func (p *MasterMetaServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x13 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x13.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush(ctx)
  return false, x13

}

type masterMetaServiceProcessorGetMetaID struct {
  handler MasterMetaService
}

func (p *masterMetaServiceProcessorGetMetaID) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MasterMetaServiceGetMetaIDArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getMetaID", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MasterMetaServiceGetMetaIDResult{}
var retval TMetaKey
  var err2 error
  if retval, err2 = p.handler.GetMetaID(ctx, args.Key); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getMetaID: " + err2.Error())
    oprot.WriteMessageBegin("getMetaID", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("getMetaID", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type masterMetaServiceProcessorSetMetaID struct {
  handler MasterMetaService
}

func (p *masterMetaServiceProcessorSetMetaID) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MasterMetaServiceSetMetaIDArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("setMetaID", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MasterMetaServiceSetMetaIDResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.SetMetaID(ctx, args.Key, args.MetaID); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing setMetaID: " + err2.Error())
    oprot.WriteMessageBegin("setMetaID", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("setMetaID", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Key
type MasterMetaServiceGetMetaIDArgs struct {
  Key TKey `thrift:"key,1" db:"key" json:"key"`
}

func NewMasterMetaServiceGetMetaIDArgs() *MasterMetaServiceGetMetaIDArgs {
  return &MasterMetaServiceGetMetaIDArgs{}
}


func (p *MasterMetaServiceGetMetaIDArgs) GetKey() TKey {
  return p.Key
}
func (p *MasterMetaServiceGetMetaIDArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MasterMetaServiceGetMetaIDArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TKey(v)
  p.Key = temp
}
  return nil
}

func (p *MasterMetaServiceGetMetaIDArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getMetaID_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MasterMetaServiceGetMetaIDArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("key", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:key: ", p), err) }
  if err := oprot.WriteI64(int64(p.Key)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.key (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:key: ", p), err) }
  return err
}

func (p *MasterMetaServiceGetMetaIDArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MasterMetaServiceGetMetaIDArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MasterMetaServiceGetMetaIDResult struct {
  Success *TMetaKey `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMasterMetaServiceGetMetaIDResult() *MasterMetaServiceGetMetaIDResult {
  return &MasterMetaServiceGetMetaIDResult{}
}

var MasterMetaServiceGetMetaIDResult_Success_DEFAULT TMetaKey
func (p *MasterMetaServiceGetMetaIDResult) GetSuccess() TMetaKey {
  if !p.IsSetSuccess() {
    return MasterMetaServiceGetMetaIDResult_Success_DEFAULT
  }
return *p.Success
}
func (p *MasterMetaServiceGetMetaIDResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MasterMetaServiceGetMetaIDResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MasterMetaServiceGetMetaIDResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  temp := TMetaKey(v)
  p.Success = &temp
}
  return nil
}

func (p *MasterMetaServiceGetMetaIDResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getMetaID_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MasterMetaServiceGetMetaIDResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.I64, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI64(int64(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MasterMetaServiceGetMetaIDResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MasterMetaServiceGetMetaIDResult(%+v)", *p)
}

// Attributes:
//  - Key
//  - MetaID
type MasterMetaServiceSetMetaIDArgs struct {
  Key TKey `thrift:"key,1" db:"key" json:"key"`
  MetaID TMetaKey `thrift:"metaID,2" db:"metaID" json:"metaID"`
}

func NewMasterMetaServiceSetMetaIDArgs() *MasterMetaServiceSetMetaIDArgs {
  return &MasterMetaServiceSetMetaIDArgs{}
}


func (p *MasterMetaServiceSetMetaIDArgs) GetKey() TKey {
  return p.Key
}

func (p *MasterMetaServiceSetMetaIDArgs) GetMetaID() TMetaKey {
  return p.MetaID
}
func (p *MasterMetaServiceSetMetaIDArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MasterMetaServiceSetMetaIDArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TKey(v)
  p.Key = temp
}
  return nil
}

func (p *MasterMetaServiceSetMetaIDArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := TMetaKey(v)
  p.MetaID = temp
}
  return nil
}

func (p *MasterMetaServiceSetMetaIDArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("setMetaID_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MasterMetaServiceSetMetaIDArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("key", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:key: ", p), err) }
  if err := oprot.WriteI64(int64(p.Key)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.key (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:key: ", p), err) }
  return err
}

func (p *MasterMetaServiceSetMetaIDArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("metaID", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:metaID: ", p), err) }
  if err := oprot.WriteI64(int64(p.MetaID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.metaID (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:metaID: ", p), err) }
  return err
}

func (p *MasterMetaServiceSetMetaIDArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MasterMetaServiceSetMetaIDArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MasterMetaServiceSetMetaIDResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMasterMetaServiceSetMetaIDResult() *MasterMetaServiceSetMetaIDResult {
  return &MasterMetaServiceSetMetaIDResult{}
}

var MasterMetaServiceSetMetaIDResult_Success_DEFAULT bool
func (p *MasterMetaServiceSetMetaIDResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return MasterMetaServiceSetMetaIDResult_Success_DEFAULT
  }
return *p.Success
}
func (p *MasterMetaServiceSetMetaIDResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MasterMetaServiceSetMetaIDResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MasterMetaServiceSetMetaIDResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *MasterMetaServiceSetMetaIDResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("setMetaID_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MasterMetaServiceSetMetaIDResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MasterMetaServiceSetMetaIDResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MasterMetaServiceSetMetaIDResult(%+v)", *p)
}


type TBSLI64DataService interface {
  // Parameters:
  //  - RootID
  //  - Item
  BsgPutItem(ctx context.Context, rootID TContainerKey, item *TItem) (r *TPutItemResult_, err error)
  // Parameters:
  //  - Key
  //  - ItemKey
  BsgRemoveItem(ctx context.Context, key TMetaKey, itemKey TItemKey) (r bool, err error)
  // Parameters:
  //  - RootID
  //  - ItemKey
  BsgExisted(ctx context.Context, rootID TContainerKey, itemKey TItemKey) (r *TExistedResult_, err error)
  // Parameters:
  //  - RootID
  //  - ItemKey
  BsgGetItem(ctx context.Context, rootID TContainerKey, itemKey TItemKey) (r *TItemResult_, err error)
  // Parameters:
  //  - RootID
  //  - FromIDX
  //  - Count
  BsgGetSlice(ctx context.Context, rootID TContainerKey, fromIDX int32, count int32) (r *TItemSetResult_, err error)
  // Parameters:
  //  - RootID
  //  - FromKey
  //  - Count
  BsgGetSliceFromItem(ctx context.Context, rootID TContainerKey, fromKey TItemKey, count int32) (r *TItemSetResult_, err error)
  // Parameters:
  //  - RootID
  //  - FromIDX
  //  - Count
  BsgGetSliceR(ctx context.Context, rootID TContainerKey, fromIDX int32, count int32) (r *TItemSetResult_, err error)
  // Parameters:
  //  - RootID
  //  - FromKey
  //  - Count
  BsgGetSliceFromItemR(ctx context.Context, rootID TContainerKey, fromKey TItemKey, count int32) (r *TItemSetResult_, err error)
  // Parameters:
  //  - RootID
  //  - BrotherRootID
  //  - CurrentSize
  SplitBigSet(ctx context.Context, rootID TContainerKey, brotherRootID TContainerKey, currentSize int64) (r *TSplitBigSetResult_, err error)
  // Parameters:
  //  - RootID
  //  - StartKey
  //  - EndKey
  BsgRangeQuery(ctx context.Context, rootID TContainerKey, startKey TItemKey, endKey TItemKey) (r *TItemSetResult_, err error)
  // Parameters:
  //  - RootID
  //  - SetData
  BsgBulkLoad(ctx context.Context, rootID TContainerKey, setData *TItemSet) (r bool, err error)
  // Parameters:
  //  - RootID
  //  - SetData
  //  - GetAddedItems
  //  - GetReplacedItems
  BsgMultiPut(ctx context.Context, rootID TContainerKey, setData *TItemSet, getAddedItems bool, getReplacedItems bool) (r *TMultiPutItemResult_, err error)
  // Parameters:
  //  - MetaID
  GetSetGenData(ctx context.Context, metaID TMetaKey) (r *TBigSetLI64Data, err error)
  // Parameters:
  //  - MetaID
  //  - Metadata
  PutSetGenData(ctx context.Context, metaID TMetaKey, metadata *TBigSetLI64Data) (err error)
  // Parameters:
  //  - MetaID
  GetTotalCount(ctx context.Context, metaID TMetaKey) (r int64, err error)
  // Parameters:
  //  - RootID
  RemoveAll(ctx context.Context, rootID TContainerKey) (r int64, err error)
}

type TBSLI64DataServiceClient struct {
  c thrift.TClient
}

func NewTBSLI64DataServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *TBSLI64DataServiceClient {
  return &TBSLI64DataServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewTBSLI64DataServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *TBSLI64DataServiceClient {
  return &TBSLI64DataServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewTBSLI64DataServiceClient(c thrift.TClient) *TBSLI64DataServiceClient {
  return &TBSLI64DataServiceClient{
    c: c,
  }
}

func (p *TBSLI64DataServiceClient) Client_() thrift.TClient {
  return p.c
}
// Parameters:
//  - RootID
//  - Item
func (p *TBSLI64DataServiceClient) BsgPutItem(ctx context.Context, rootID TContainerKey, item *TItem) (r *TPutItemResult_, err error) {
  var _args17 TBSLI64DataServiceBsgPutItemArgs
  _args17.RootID = rootID
  _args17.Item = item
  var _result18 TBSLI64DataServiceBsgPutItemResult
  if err = p.Client_().Call(ctx, "bsgPutItem", &_args17, &_result18); err != nil {
    return
  }
  return _result18.GetSuccess(), nil
}

// Parameters:
//  - Key
//  - ItemKey
func (p *TBSLI64DataServiceClient) BsgRemoveItem(ctx context.Context, key TMetaKey, itemKey TItemKey) (r bool, err error) {
  var _args19 TBSLI64DataServiceBsgRemoveItemArgs
  _args19.Key = key
  _args19.ItemKey = itemKey
  var _result20 TBSLI64DataServiceBsgRemoveItemResult
  if err = p.Client_().Call(ctx, "bsgRemoveItem", &_args19, &_result20); err != nil {
    return
  }
  return _result20.GetSuccess(), nil
}

// Parameters:
//  - RootID
//  - ItemKey
func (p *TBSLI64DataServiceClient) BsgExisted(ctx context.Context, rootID TContainerKey, itemKey TItemKey) (r *TExistedResult_, err error) {
  var _args21 TBSLI64DataServiceBsgExistedArgs
  _args21.RootID = rootID
  _args21.ItemKey = itemKey
  var _result22 TBSLI64DataServiceBsgExistedResult
  if err = p.Client_().Call(ctx, "bsgExisted", &_args21, &_result22); err != nil {
    return
  }
  return _result22.GetSuccess(), nil
}

// Parameters:
//  - RootID
//  - ItemKey
func (p *TBSLI64DataServiceClient) BsgGetItem(ctx context.Context, rootID TContainerKey, itemKey TItemKey) (r *TItemResult_, err error) {
  var _args23 TBSLI64DataServiceBsgGetItemArgs
  _args23.RootID = rootID
  _args23.ItemKey = itemKey
  var _result24 TBSLI64DataServiceBsgGetItemResult
  if err = p.Client_().Call(ctx, "bsgGetItem", &_args23, &_result24); err != nil {
    return
  }
  return _result24.GetSuccess(), nil
}

// Parameters:
//  - RootID
//  - FromIDX
//  - Count
func (p *TBSLI64DataServiceClient) BsgGetSlice(ctx context.Context, rootID TContainerKey, fromIDX int32, count int32) (r *TItemSetResult_, err error) {
  var _args25 TBSLI64DataServiceBsgGetSliceArgs
  _args25.RootID = rootID
  _args25.FromIDX = fromIDX
  _args25.Count = count
  var _result26 TBSLI64DataServiceBsgGetSliceResult
  if err = p.Client_().Call(ctx, "bsgGetSlice", &_args25, &_result26); err != nil {
    return
  }
  return _result26.GetSuccess(), nil
}

// Parameters:
//  - RootID
//  - FromKey
//  - Count
func (p *TBSLI64DataServiceClient) BsgGetSliceFromItem(ctx context.Context, rootID TContainerKey, fromKey TItemKey, count int32) (r *TItemSetResult_, err error) {
  var _args27 TBSLI64DataServiceBsgGetSliceFromItemArgs
  _args27.RootID = rootID
  _args27.FromKey = fromKey
  _args27.Count = count
  var _result28 TBSLI64DataServiceBsgGetSliceFromItemResult
  if err = p.Client_().Call(ctx, "bsgGetSliceFromItem", &_args27, &_result28); err != nil {
    return
  }
  return _result28.GetSuccess(), nil
}

// Parameters:
//  - RootID
//  - FromIDX
//  - Count
func (p *TBSLI64DataServiceClient) BsgGetSliceR(ctx context.Context, rootID TContainerKey, fromIDX int32, count int32) (r *TItemSetResult_, err error) {
  var _args29 TBSLI64DataServiceBsgGetSliceRArgs
  _args29.RootID = rootID
  _args29.FromIDX = fromIDX
  _args29.Count = count
  var _result30 TBSLI64DataServiceBsgGetSliceRResult
  if err = p.Client_().Call(ctx, "bsgGetSliceR", &_args29, &_result30); err != nil {
    return
  }
  return _result30.GetSuccess(), nil
}

// Parameters:
//  - RootID
//  - FromKey
//  - Count
func (p *TBSLI64DataServiceClient) BsgGetSliceFromItemR(ctx context.Context, rootID TContainerKey, fromKey TItemKey, count int32) (r *TItemSetResult_, err error) {
  var _args31 TBSLI64DataServiceBsgGetSliceFromItemRArgs
  _args31.RootID = rootID
  _args31.FromKey = fromKey
  _args31.Count = count
  var _result32 TBSLI64DataServiceBsgGetSliceFromItemRResult
  if err = p.Client_().Call(ctx, "bsgGetSliceFromItemR", &_args31, &_result32); err != nil {
    return
  }
  return _result32.GetSuccess(), nil
}

// Parameters:
//  - RootID
//  - BrotherRootID
//  - CurrentSize
func (p *TBSLI64DataServiceClient) SplitBigSet(ctx context.Context, rootID TContainerKey, brotherRootID TContainerKey, currentSize int64) (r *TSplitBigSetResult_, err error) {
  var _args33 TBSLI64DataServiceSplitBigSetArgs
  _args33.RootID = rootID
  _args33.BrotherRootID = brotherRootID
  _args33.CurrentSize = currentSize
  var _result34 TBSLI64DataServiceSplitBigSetResult
  if err = p.Client_().Call(ctx, "splitBigSet", &_args33, &_result34); err != nil {
    return
  }
  return _result34.GetSuccess(), nil
}

// Parameters:
//  - RootID
//  - StartKey
//  - EndKey
func (p *TBSLI64DataServiceClient) BsgRangeQuery(ctx context.Context, rootID TContainerKey, startKey TItemKey, endKey TItemKey) (r *TItemSetResult_, err error) {
  var _args35 TBSLI64DataServiceBsgRangeQueryArgs
  _args35.RootID = rootID
  _args35.StartKey = startKey
  _args35.EndKey = endKey
  var _result36 TBSLI64DataServiceBsgRangeQueryResult
  if err = p.Client_().Call(ctx, "bsgRangeQuery", &_args35, &_result36); err != nil {
    return
  }
  return _result36.GetSuccess(), nil
}

// Parameters:
//  - RootID
//  - SetData
func (p *TBSLI64DataServiceClient) BsgBulkLoad(ctx context.Context, rootID TContainerKey, setData *TItemSet) (r bool, err error) {
  var _args37 TBSLI64DataServiceBsgBulkLoadArgs
  _args37.RootID = rootID
  _args37.SetData = setData
  var _result38 TBSLI64DataServiceBsgBulkLoadResult
  if err = p.Client_().Call(ctx, "bsgBulkLoad", &_args37, &_result38); err != nil {
    return
  }
  return _result38.GetSuccess(), nil
}

// Parameters:
//  - RootID
//  - SetData
//  - GetAddedItems
//  - GetReplacedItems
func (p *TBSLI64DataServiceClient) BsgMultiPut(ctx context.Context, rootID TContainerKey, setData *TItemSet, getAddedItems bool, getReplacedItems bool) (r *TMultiPutItemResult_, err error) {
  var _args39 TBSLI64DataServiceBsgMultiPutArgs
  _args39.RootID = rootID
  _args39.SetData = setData
  _args39.GetAddedItems = getAddedItems
  _args39.GetReplacedItems = getReplacedItems
  var _result40 TBSLI64DataServiceBsgMultiPutResult
  if err = p.Client_().Call(ctx, "bsgMultiPut", &_args39, &_result40); err != nil {
    return
  }
  return _result40.GetSuccess(), nil
}

// Parameters:
//  - MetaID
func (p *TBSLI64DataServiceClient) GetSetGenData(ctx context.Context, metaID TMetaKey) (r *TBigSetLI64Data, err error) {
  var _args41 TBSLI64DataServiceGetSetGenDataArgs
  _args41.MetaID = metaID
  var _result42 TBSLI64DataServiceGetSetGenDataResult
  if err = p.Client_().Call(ctx, "getSetGenData", &_args41, &_result42); err != nil {
    return
  }
  return _result42.GetSuccess(), nil
}

// Parameters:
//  - MetaID
//  - Metadata
func (p *TBSLI64DataServiceClient) PutSetGenData(ctx context.Context, metaID TMetaKey, metadata *TBigSetLI64Data) (err error) {
  var _args43 TBSLI64DataServicePutSetGenDataArgs
  _args43.MetaID = metaID
  _args43.Metadata = metadata
  var _result44 TBSLI64DataServicePutSetGenDataResult
  if err = p.Client_().Call(ctx, "putSetGenData", &_args43, &_result44); err != nil {
    return
  }
  return nil
}

// Parameters:
//  - MetaID
func (p *TBSLI64DataServiceClient) GetTotalCount(ctx context.Context, metaID TMetaKey) (r int64, err error) {
  var _args45 TBSLI64DataServiceGetTotalCountArgs
  _args45.MetaID = metaID
  var _result46 TBSLI64DataServiceGetTotalCountResult
  if err = p.Client_().Call(ctx, "getTotalCount", &_args45, &_result46); err != nil {
    return
  }
  return _result46.GetSuccess(), nil
}

// Parameters:
//  - RootID
func (p *TBSLI64DataServiceClient) RemoveAll(ctx context.Context, rootID TContainerKey) (r int64, err error) {
  var _args47 TBSLI64DataServiceRemoveAllArgs
  _args47.RootID = rootID
  var _result48 TBSLI64DataServiceRemoveAllResult
  if err = p.Client_().Call(ctx, "removeAll", &_args47, &_result48); err != nil {
    return
  }
  return _result48.GetSuccess(), nil
}

type TBSLI64DataServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler TBSLI64DataService
}

func (p *TBSLI64DataServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *TBSLI64DataServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *TBSLI64DataServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewTBSLI64DataServiceProcessor(handler TBSLI64DataService) *TBSLI64DataServiceProcessor {

  self49 := &TBSLI64DataServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self49.processorMap["bsgPutItem"] = &tBSLI64DataServiceProcessorBsgPutItem{handler:handler}
  self49.processorMap["bsgRemoveItem"] = &tBSLI64DataServiceProcessorBsgRemoveItem{handler:handler}
  self49.processorMap["bsgExisted"] = &tBSLI64DataServiceProcessorBsgExisted{handler:handler}
  self49.processorMap["bsgGetItem"] = &tBSLI64DataServiceProcessorBsgGetItem{handler:handler}
  self49.processorMap["bsgGetSlice"] = &tBSLI64DataServiceProcessorBsgGetSlice{handler:handler}
  self49.processorMap["bsgGetSliceFromItem"] = &tBSLI64DataServiceProcessorBsgGetSliceFromItem{handler:handler}
  self49.processorMap["bsgGetSliceR"] = &tBSLI64DataServiceProcessorBsgGetSliceR{handler:handler}
  self49.processorMap["bsgGetSliceFromItemR"] = &tBSLI64DataServiceProcessorBsgGetSliceFromItemR{handler:handler}
  self49.processorMap["splitBigSet"] = &tBSLI64DataServiceProcessorSplitBigSet{handler:handler}
  self49.processorMap["bsgRangeQuery"] = &tBSLI64DataServiceProcessorBsgRangeQuery{handler:handler}
  self49.processorMap["bsgBulkLoad"] = &tBSLI64DataServiceProcessorBsgBulkLoad{handler:handler}
  self49.processorMap["bsgMultiPut"] = &tBSLI64DataServiceProcessorBsgMultiPut{handler:handler}
  self49.processorMap["getSetGenData"] = &tBSLI64DataServiceProcessorGetSetGenData{handler:handler}
  self49.processorMap["putSetGenData"] = &tBSLI64DataServiceProcessorPutSetGenData{handler:handler}
  self49.processorMap["getTotalCount"] = &tBSLI64DataServiceProcessorGetTotalCount{handler:handler}
  self49.processorMap["removeAll"] = &tBSLI64DataServiceProcessorRemoveAll{handler:handler}
return self49
}

func (p *TBSLI64DataServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x50 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x50.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush(ctx)
  return false, x50

}

type tBSLI64DataServiceProcessorBsgPutItem struct {
  handler TBSLI64DataService
}

func (p *tBSLI64DataServiceProcessorBsgPutItem) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TBSLI64DataServiceBsgPutItemArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("bsgPutItem", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TBSLI64DataServiceBsgPutItemResult{}
var retval *TPutItemResult_
  var err2 error
  if retval, err2 = p.handler.BsgPutItem(ctx, args.RootID, args.Item); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing bsgPutItem: " + err2.Error())
    oprot.WriteMessageBegin("bsgPutItem", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("bsgPutItem", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tBSLI64DataServiceProcessorBsgRemoveItem struct {
  handler TBSLI64DataService
}

func (p *tBSLI64DataServiceProcessorBsgRemoveItem) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TBSLI64DataServiceBsgRemoveItemArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("bsgRemoveItem", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TBSLI64DataServiceBsgRemoveItemResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.BsgRemoveItem(ctx, args.Key, args.ItemKey); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing bsgRemoveItem: " + err2.Error())
    oprot.WriteMessageBegin("bsgRemoveItem", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("bsgRemoveItem", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tBSLI64DataServiceProcessorBsgExisted struct {
  handler TBSLI64DataService
}

func (p *tBSLI64DataServiceProcessorBsgExisted) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TBSLI64DataServiceBsgExistedArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("bsgExisted", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TBSLI64DataServiceBsgExistedResult{}
var retval *TExistedResult_
  var err2 error
  if retval, err2 = p.handler.BsgExisted(ctx, args.RootID, args.ItemKey); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing bsgExisted: " + err2.Error())
    oprot.WriteMessageBegin("bsgExisted", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("bsgExisted", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tBSLI64DataServiceProcessorBsgGetItem struct {
  handler TBSLI64DataService
}

func (p *tBSLI64DataServiceProcessorBsgGetItem) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TBSLI64DataServiceBsgGetItemArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("bsgGetItem", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TBSLI64DataServiceBsgGetItemResult{}
var retval *TItemResult_
  var err2 error
  if retval, err2 = p.handler.BsgGetItem(ctx, args.RootID, args.ItemKey); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing bsgGetItem: " + err2.Error())
    oprot.WriteMessageBegin("bsgGetItem", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("bsgGetItem", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tBSLI64DataServiceProcessorBsgGetSlice struct {
  handler TBSLI64DataService
}

func (p *tBSLI64DataServiceProcessorBsgGetSlice) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TBSLI64DataServiceBsgGetSliceArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("bsgGetSlice", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TBSLI64DataServiceBsgGetSliceResult{}
var retval *TItemSetResult_
  var err2 error
  if retval, err2 = p.handler.BsgGetSlice(ctx, args.RootID, args.FromIDX, args.Count); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing bsgGetSlice: " + err2.Error())
    oprot.WriteMessageBegin("bsgGetSlice", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("bsgGetSlice", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tBSLI64DataServiceProcessorBsgGetSliceFromItem struct {
  handler TBSLI64DataService
}

func (p *tBSLI64DataServiceProcessorBsgGetSliceFromItem) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TBSLI64DataServiceBsgGetSliceFromItemArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("bsgGetSliceFromItem", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TBSLI64DataServiceBsgGetSliceFromItemResult{}
var retval *TItemSetResult_
  var err2 error
  if retval, err2 = p.handler.BsgGetSliceFromItem(ctx, args.RootID, args.FromKey, args.Count); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing bsgGetSliceFromItem: " + err2.Error())
    oprot.WriteMessageBegin("bsgGetSliceFromItem", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("bsgGetSliceFromItem", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tBSLI64DataServiceProcessorBsgGetSliceR struct {
  handler TBSLI64DataService
}

func (p *tBSLI64DataServiceProcessorBsgGetSliceR) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TBSLI64DataServiceBsgGetSliceRArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("bsgGetSliceR", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TBSLI64DataServiceBsgGetSliceRResult{}
var retval *TItemSetResult_
  var err2 error
  if retval, err2 = p.handler.BsgGetSliceR(ctx, args.RootID, args.FromIDX, args.Count); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing bsgGetSliceR: " + err2.Error())
    oprot.WriteMessageBegin("bsgGetSliceR", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("bsgGetSliceR", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tBSLI64DataServiceProcessorBsgGetSliceFromItemR struct {
  handler TBSLI64DataService
}

func (p *tBSLI64DataServiceProcessorBsgGetSliceFromItemR) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TBSLI64DataServiceBsgGetSliceFromItemRArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("bsgGetSliceFromItemR", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TBSLI64DataServiceBsgGetSliceFromItemRResult{}
var retval *TItemSetResult_
  var err2 error
  if retval, err2 = p.handler.BsgGetSliceFromItemR(ctx, args.RootID, args.FromKey, args.Count); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing bsgGetSliceFromItemR: " + err2.Error())
    oprot.WriteMessageBegin("bsgGetSliceFromItemR", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("bsgGetSliceFromItemR", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tBSLI64DataServiceProcessorSplitBigSet struct {
  handler TBSLI64DataService
}

func (p *tBSLI64DataServiceProcessorSplitBigSet) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TBSLI64DataServiceSplitBigSetArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("splitBigSet", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TBSLI64DataServiceSplitBigSetResult{}
var retval *TSplitBigSetResult_
  var err2 error
  if retval, err2 = p.handler.SplitBigSet(ctx, args.RootID, args.BrotherRootID, args.CurrentSize); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing splitBigSet: " + err2.Error())
    oprot.WriteMessageBegin("splitBigSet", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("splitBigSet", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tBSLI64DataServiceProcessorBsgRangeQuery struct {
  handler TBSLI64DataService
}

func (p *tBSLI64DataServiceProcessorBsgRangeQuery) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TBSLI64DataServiceBsgRangeQueryArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("bsgRangeQuery", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TBSLI64DataServiceBsgRangeQueryResult{}
var retval *TItemSetResult_
  var err2 error
  if retval, err2 = p.handler.BsgRangeQuery(ctx, args.RootID, args.StartKey, args.EndKey); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing bsgRangeQuery: " + err2.Error())
    oprot.WriteMessageBegin("bsgRangeQuery", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("bsgRangeQuery", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tBSLI64DataServiceProcessorBsgBulkLoad struct {
  handler TBSLI64DataService
}

func (p *tBSLI64DataServiceProcessorBsgBulkLoad) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TBSLI64DataServiceBsgBulkLoadArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("bsgBulkLoad", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TBSLI64DataServiceBsgBulkLoadResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.BsgBulkLoad(ctx, args.RootID, args.SetData); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing bsgBulkLoad: " + err2.Error())
    oprot.WriteMessageBegin("bsgBulkLoad", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("bsgBulkLoad", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tBSLI64DataServiceProcessorBsgMultiPut struct {
  handler TBSLI64DataService
}

func (p *tBSLI64DataServiceProcessorBsgMultiPut) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TBSLI64DataServiceBsgMultiPutArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("bsgMultiPut", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TBSLI64DataServiceBsgMultiPutResult{}
var retval *TMultiPutItemResult_
  var err2 error
  if retval, err2 = p.handler.BsgMultiPut(ctx, args.RootID, args.SetData, args.GetAddedItems, args.GetReplacedItems); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing bsgMultiPut: " + err2.Error())
    oprot.WriteMessageBegin("bsgMultiPut", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("bsgMultiPut", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tBSLI64DataServiceProcessorGetSetGenData struct {
  handler TBSLI64DataService
}

func (p *tBSLI64DataServiceProcessorGetSetGenData) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TBSLI64DataServiceGetSetGenDataArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getSetGenData", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TBSLI64DataServiceGetSetGenDataResult{}
var retval *TBigSetLI64Data
  var err2 error
  if retval, err2 = p.handler.GetSetGenData(ctx, args.MetaID); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getSetGenData: " + err2.Error())
    oprot.WriteMessageBegin("getSetGenData", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getSetGenData", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tBSLI64DataServiceProcessorPutSetGenData struct {
  handler TBSLI64DataService
}

func (p *tBSLI64DataServiceProcessorPutSetGenData) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TBSLI64DataServicePutSetGenDataArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("putSetGenData", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TBSLI64DataServicePutSetGenDataResult{}
  var err2 error
  if err2 = p.handler.PutSetGenData(ctx, args.MetaID, args.Metadata); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing putSetGenData: " + err2.Error())
    oprot.WriteMessageBegin("putSetGenData", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  if err2 = oprot.WriteMessageBegin("putSetGenData", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tBSLI64DataServiceProcessorGetTotalCount struct {
  handler TBSLI64DataService
}

func (p *tBSLI64DataServiceProcessorGetTotalCount) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TBSLI64DataServiceGetTotalCountArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getTotalCount", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TBSLI64DataServiceGetTotalCountResult{}
var retval int64
  var err2 error
  if retval, err2 = p.handler.GetTotalCount(ctx, args.MetaID); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getTotalCount: " + err2.Error())
    oprot.WriteMessageBegin("getTotalCount", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("getTotalCount", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tBSLI64DataServiceProcessorRemoveAll struct {
  handler TBSLI64DataService
}

func (p *tBSLI64DataServiceProcessorRemoveAll) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TBSLI64DataServiceRemoveAllArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("removeAll", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TBSLI64DataServiceRemoveAllResult{}
var retval int64
  var err2 error
  if retval, err2 = p.handler.RemoveAll(ctx, args.RootID); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing removeAll: " + err2.Error())
    oprot.WriteMessageBegin("removeAll", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("removeAll", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - RootID
//  - Item
type TBSLI64DataServiceBsgPutItemArgs struct {
  RootID TContainerKey `thrift:"rootID,1" db:"rootID" json:"rootID"`
  Item *TItem `thrift:"item,2" db:"item" json:"item"`
}

func NewTBSLI64DataServiceBsgPutItemArgs() *TBSLI64DataServiceBsgPutItemArgs {
  return &TBSLI64DataServiceBsgPutItemArgs{}
}


func (p *TBSLI64DataServiceBsgPutItemArgs) GetRootID() TContainerKey {
  return p.RootID
}
var TBSLI64DataServiceBsgPutItemArgs_Item_DEFAULT *TItem
func (p *TBSLI64DataServiceBsgPutItemArgs) GetItem() *TItem {
  if !p.IsSetItem() {
    return TBSLI64DataServiceBsgPutItemArgs_Item_DEFAULT
  }
return p.Item
}
func (p *TBSLI64DataServiceBsgPutItemArgs) IsSetItem() bool {
  return p.Item != nil
}

func (p *TBSLI64DataServiceBsgPutItemArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TBSLI64DataServiceBsgPutItemArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TContainerKey(v)
  p.RootID = temp
}
  return nil
}

func (p *TBSLI64DataServiceBsgPutItemArgs)  ReadField2(iprot thrift.TProtocol) error {
  p.Item = &TItem{}
  if err := p.Item.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Item), err)
  }
  return nil
}

func (p *TBSLI64DataServiceBsgPutItemArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("bsgPutItem_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TBSLI64DataServiceBsgPutItemArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("rootID", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rootID: ", p), err) }
  if err := oprot.WriteI64(int64(p.RootID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.rootID (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rootID: ", p), err) }
  return err
}

func (p *TBSLI64DataServiceBsgPutItemArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("item", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:item: ", p), err) }
  if err := p.Item.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Item), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:item: ", p), err) }
  return err
}

func (p *TBSLI64DataServiceBsgPutItemArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TBSLI64DataServiceBsgPutItemArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TBSLI64DataServiceBsgPutItemResult struct {
  Success *TPutItemResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTBSLI64DataServiceBsgPutItemResult() *TBSLI64DataServiceBsgPutItemResult {
  return &TBSLI64DataServiceBsgPutItemResult{}
}

var TBSLI64DataServiceBsgPutItemResult_Success_DEFAULT *TPutItemResult_
func (p *TBSLI64DataServiceBsgPutItemResult) GetSuccess() *TPutItemResult_ {
  if !p.IsSetSuccess() {
    return TBSLI64DataServiceBsgPutItemResult_Success_DEFAULT
  }
return p.Success
}
func (p *TBSLI64DataServiceBsgPutItemResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TBSLI64DataServiceBsgPutItemResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TBSLI64DataServiceBsgPutItemResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TPutItemResult_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TBSLI64DataServiceBsgPutItemResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("bsgPutItem_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TBSLI64DataServiceBsgPutItemResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TBSLI64DataServiceBsgPutItemResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TBSLI64DataServiceBsgPutItemResult(%+v)", *p)
}

// Attributes:
//  - Key
//  - ItemKey
type TBSLI64DataServiceBsgRemoveItemArgs struct {
  Key TMetaKey `thrift:"key,1" db:"key" json:"key"`
  ItemKey TItemKey `thrift:"itemKey,2" db:"itemKey" json:"itemKey"`
}

func NewTBSLI64DataServiceBsgRemoveItemArgs() *TBSLI64DataServiceBsgRemoveItemArgs {
  return &TBSLI64DataServiceBsgRemoveItemArgs{}
}


func (p *TBSLI64DataServiceBsgRemoveItemArgs) GetKey() TMetaKey {
  return p.Key
}

func (p *TBSLI64DataServiceBsgRemoveItemArgs) GetItemKey() TItemKey {
  return p.ItemKey
}
func (p *TBSLI64DataServiceBsgRemoveItemArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TBSLI64DataServiceBsgRemoveItemArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TMetaKey(v)
  p.Key = temp
}
  return nil
}

func (p *TBSLI64DataServiceBsgRemoveItemArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := TItemKey(v)
  p.ItemKey = temp
}
  return nil
}

func (p *TBSLI64DataServiceBsgRemoveItemArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("bsgRemoveItem_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TBSLI64DataServiceBsgRemoveItemArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("key", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:key: ", p), err) }
  if err := oprot.WriteI64(int64(p.Key)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.key (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:key: ", p), err) }
  return err
}

func (p *TBSLI64DataServiceBsgRemoveItemArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("itemKey", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:itemKey: ", p), err) }
  if err := oprot.WriteBinary(p.ItemKey); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.itemKey (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:itemKey: ", p), err) }
  return err
}

func (p *TBSLI64DataServiceBsgRemoveItemArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TBSLI64DataServiceBsgRemoveItemArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TBSLI64DataServiceBsgRemoveItemResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTBSLI64DataServiceBsgRemoveItemResult() *TBSLI64DataServiceBsgRemoveItemResult {
  return &TBSLI64DataServiceBsgRemoveItemResult{}
}

var TBSLI64DataServiceBsgRemoveItemResult_Success_DEFAULT bool
func (p *TBSLI64DataServiceBsgRemoveItemResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return TBSLI64DataServiceBsgRemoveItemResult_Success_DEFAULT
  }
return *p.Success
}
func (p *TBSLI64DataServiceBsgRemoveItemResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TBSLI64DataServiceBsgRemoveItemResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TBSLI64DataServiceBsgRemoveItemResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *TBSLI64DataServiceBsgRemoveItemResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("bsgRemoveItem_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TBSLI64DataServiceBsgRemoveItemResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TBSLI64DataServiceBsgRemoveItemResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TBSLI64DataServiceBsgRemoveItemResult(%+v)", *p)
}

// Attributes:
//  - RootID
//  - ItemKey
type TBSLI64DataServiceBsgExistedArgs struct {
  RootID TContainerKey `thrift:"rootID,1" db:"rootID" json:"rootID"`
  ItemKey TItemKey `thrift:"itemKey,2" db:"itemKey" json:"itemKey"`
}

func NewTBSLI64DataServiceBsgExistedArgs() *TBSLI64DataServiceBsgExistedArgs {
  return &TBSLI64DataServiceBsgExistedArgs{}
}


func (p *TBSLI64DataServiceBsgExistedArgs) GetRootID() TContainerKey {
  return p.RootID
}

func (p *TBSLI64DataServiceBsgExistedArgs) GetItemKey() TItemKey {
  return p.ItemKey
}
func (p *TBSLI64DataServiceBsgExistedArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TBSLI64DataServiceBsgExistedArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TContainerKey(v)
  p.RootID = temp
}
  return nil
}

func (p *TBSLI64DataServiceBsgExistedArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := TItemKey(v)
  p.ItemKey = temp
}
  return nil
}

func (p *TBSLI64DataServiceBsgExistedArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("bsgExisted_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TBSLI64DataServiceBsgExistedArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("rootID", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rootID: ", p), err) }
  if err := oprot.WriteI64(int64(p.RootID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.rootID (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rootID: ", p), err) }
  return err
}

func (p *TBSLI64DataServiceBsgExistedArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("itemKey", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:itemKey: ", p), err) }
  if err := oprot.WriteBinary(p.ItemKey); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.itemKey (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:itemKey: ", p), err) }
  return err
}

func (p *TBSLI64DataServiceBsgExistedArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TBSLI64DataServiceBsgExistedArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TBSLI64DataServiceBsgExistedResult struct {
  Success *TExistedResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTBSLI64DataServiceBsgExistedResult() *TBSLI64DataServiceBsgExistedResult {
  return &TBSLI64DataServiceBsgExistedResult{}
}

var TBSLI64DataServiceBsgExistedResult_Success_DEFAULT *TExistedResult_
func (p *TBSLI64DataServiceBsgExistedResult) GetSuccess() *TExistedResult_ {
  if !p.IsSetSuccess() {
    return TBSLI64DataServiceBsgExistedResult_Success_DEFAULT
  }
return p.Success
}
func (p *TBSLI64DataServiceBsgExistedResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TBSLI64DataServiceBsgExistedResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TBSLI64DataServiceBsgExistedResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TExistedResult_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TBSLI64DataServiceBsgExistedResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("bsgExisted_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TBSLI64DataServiceBsgExistedResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TBSLI64DataServiceBsgExistedResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TBSLI64DataServiceBsgExistedResult(%+v)", *p)
}

// Attributes:
//  - RootID
//  - ItemKey
type TBSLI64DataServiceBsgGetItemArgs struct {
  RootID TContainerKey `thrift:"rootID,1" db:"rootID" json:"rootID"`
  ItemKey TItemKey `thrift:"itemKey,2" db:"itemKey" json:"itemKey"`
}

func NewTBSLI64DataServiceBsgGetItemArgs() *TBSLI64DataServiceBsgGetItemArgs {
  return &TBSLI64DataServiceBsgGetItemArgs{}
}


func (p *TBSLI64DataServiceBsgGetItemArgs) GetRootID() TContainerKey {
  return p.RootID
}

func (p *TBSLI64DataServiceBsgGetItemArgs) GetItemKey() TItemKey {
  return p.ItemKey
}
func (p *TBSLI64DataServiceBsgGetItemArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TBSLI64DataServiceBsgGetItemArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TContainerKey(v)
  p.RootID = temp
}
  return nil
}

func (p *TBSLI64DataServiceBsgGetItemArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := TItemKey(v)
  p.ItemKey = temp
}
  return nil
}

func (p *TBSLI64DataServiceBsgGetItemArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("bsgGetItem_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TBSLI64DataServiceBsgGetItemArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("rootID", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rootID: ", p), err) }
  if err := oprot.WriteI64(int64(p.RootID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.rootID (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rootID: ", p), err) }
  return err
}

func (p *TBSLI64DataServiceBsgGetItemArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("itemKey", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:itemKey: ", p), err) }
  if err := oprot.WriteBinary(p.ItemKey); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.itemKey (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:itemKey: ", p), err) }
  return err
}

func (p *TBSLI64DataServiceBsgGetItemArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TBSLI64DataServiceBsgGetItemArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TBSLI64DataServiceBsgGetItemResult struct {
  Success *TItemResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTBSLI64DataServiceBsgGetItemResult() *TBSLI64DataServiceBsgGetItemResult {
  return &TBSLI64DataServiceBsgGetItemResult{}
}

var TBSLI64DataServiceBsgGetItemResult_Success_DEFAULT *TItemResult_
func (p *TBSLI64DataServiceBsgGetItemResult) GetSuccess() *TItemResult_ {
  if !p.IsSetSuccess() {
    return TBSLI64DataServiceBsgGetItemResult_Success_DEFAULT
  }
return p.Success
}
func (p *TBSLI64DataServiceBsgGetItemResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TBSLI64DataServiceBsgGetItemResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TBSLI64DataServiceBsgGetItemResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TItemResult_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TBSLI64DataServiceBsgGetItemResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("bsgGetItem_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TBSLI64DataServiceBsgGetItemResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TBSLI64DataServiceBsgGetItemResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TBSLI64DataServiceBsgGetItemResult(%+v)", *p)
}

// Attributes:
//  - RootID
//  - FromIDX
//  - Count
type TBSLI64DataServiceBsgGetSliceArgs struct {
  RootID TContainerKey `thrift:"rootID,1" db:"rootID" json:"rootID"`
  FromIDX int32 `thrift:"fromIDX,2" db:"fromIDX" json:"fromIDX"`
  Count int32 `thrift:"count,3" db:"count" json:"count"`
}

func NewTBSLI64DataServiceBsgGetSliceArgs() *TBSLI64DataServiceBsgGetSliceArgs {
  return &TBSLI64DataServiceBsgGetSliceArgs{}
}


func (p *TBSLI64DataServiceBsgGetSliceArgs) GetRootID() TContainerKey {
  return p.RootID
}

func (p *TBSLI64DataServiceBsgGetSliceArgs) GetFromIDX() int32 {
  return p.FromIDX
}

func (p *TBSLI64DataServiceBsgGetSliceArgs) GetCount() int32 {
  return p.Count
}
func (p *TBSLI64DataServiceBsgGetSliceArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TBSLI64DataServiceBsgGetSliceArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TContainerKey(v)
  p.RootID = temp
}
  return nil
}

func (p *TBSLI64DataServiceBsgGetSliceArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.FromIDX = v
}
  return nil
}

func (p *TBSLI64DataServiceBsgGetSliceArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Count = v
}
  return nil
}

func (p *TBSLI64DataServiceBsgGetSliceArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("bsgGetSlice_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TBSLI64DataServiceBsgGetSliceArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("rootID", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rootID: ", p), err) }
  if err := oprot.WriteI64(int64(p.RootID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.rootID (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rootID: ", p), err) }
  return err
}

func (p *TBSLI64DataServiceBsgGetSliceArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("fromIDX", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:fromIDX: ", p), err) }
  if err := oprot.WriteI32(int32(p.FromIDX)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.fromIDX (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:fromIDX: ", p), err) }
  return err
}

func (p *TBSLI64DataServiceBsgGetSliceArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("count", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:count: ", p), err) }
  if err := oprot.WriteI32(int32(p.Count)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.count (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:count: ", p), err) }
  return err
}

func (p *TBSLI64DataServiceBsgGetSliceArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TBSLI64DataServiceBsgGetSliceArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TBSLI64DataServiceBsgGetSliceResult struct {
  Success *TItemSetResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTBSLI64DataServiceBsgGetSliceResult() *TBSLI64DataServiceBsgGetSliceResult {
  return &TBSLI64DataServiceBsgGetSliceResult{}
}

var TBSLI64DataServiceBsgGetSliceResult_Success_DEFAULT *TItemSetResult_
func (p *TBSLI64DataServiceBsgGetSliceResult) GetSuccess() *TItemSetResult_ {
  if !p.IsSetSuccess() {
    return TBSLI64DataServiceBsgGetSliceResult_Success_DEFAULT
  }
return p.Success
}
func (p *TBSLI64DataServiceBsgGetSliceResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TBSLI64DataServiceBsgGetSliceResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TBSLI64DataServiceBsgGetSliceResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TItemSetResult_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TBSLI64DataServiceBsgGetSliceResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("bsgGetSlice_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TBSLI64DataServiceBsgGetSliceResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TBSLI64DataServiceBsgGetSliceResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TBSLI64DataServiceBsgGetSliceResult(%+v)", *p)
}

// Attributes:
//  - RootID
//  - FromKey
//  - Count
type TBSLI64DataServiceBsgGetSliceFromItemArgs struct {
  RootID TContainerKey `thrift:"rootID,1" db:"rootID" json:"rootID"`
  FromKey TItemKey `thrift:"fromKey,2" db:"fromKey" json:"fromKey"`
  Count int32 `thrift:"count,3" db:"count" json:"count"`
}

func NewTBSLI64DataServiceBsgGetSliceFromItemArgs() *TBSLI64DataServiceBsgGetSliceFromItemArgs {
  return &TBSLI64DataServiceBsgGetSliceFromItemArgs{}
}


func (p *TBSLI64DataServiceBsgGetSliceFromItemArgs) GetRootID() TContainerKey {
  return p.RootID
}

func (p *TBSLI64DataServiceBsgGetSliceFromItemArgs) GetFromKey() TItemKey {
  return p.FromKey
}

func (p *TBSLI64DataServiceBsgGetSliceFromItemArgs) GetCount() int32 {
  return p.Count
}
func (p *TBSLI64DataServiceBsgGetSliceFromItemArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TBSLI64DataServiceBsgGetSliceFromItemArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TContainerKey(v)
  p.RootID = temp
}
  return nil
}

func (p *TBSLI64DataServiceBsgGetSliceFromItemArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := TItemKey(v)
  p.FromKey = temp
}
  return nil
}

func (p *TBSLI64DataServiceBsgGetSliceFromItemArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Count = v
}
  return nil
}

func (p *TBSLI64DataServiceBsgGetSliceFromItemArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("bsgGetSliceFromItem_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TBSLI64DataServiceBsgGetSliceFromItemArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("rootID", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rootID: ", p), err) }
  if err := oprot.WriteI64(int64(p.RootID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.rootID (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rootID: ", p), err) }
  return err
}

func (p *TBSLI64DataServiceBsgGetSliceFromItemArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("fromKey", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:fromKey: ", p), err) }
  if err := oprot.WriteBinary(p.FromKey); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.fromKey (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:fromKey: ", p), err) }
  return err
}

func (p *TBSLI64DataServiceBsgGetSliceFromItemArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("count", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:count: ", p), err) }
  if err := oprot.WriteI32(int32(p.Count)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.count (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:count: ", p), err) }
  return err
}

func (p *TBSLI64DataServiceBsgGetSliceFromItemArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TBSLI64DataServiceBsgGetSliceFromItemArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TBSLI64DataServiceBsgGetSliceFromItemResult struct {
  Success *TItemSetResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTBSLI64DataServiceBsgGetSliceFromItemResult() *TBSLI64DataServiceBsgGetSliceFromItemResult {
  return &TBSLI64DataServiceBsgGetSliceFromItemResult{}
}

var TBSLI64DataServiceBsgGetSliceFromItemResult_Success_DEFAULT *TItemSetResult_
func (p *TBSLI64DataServiceBsgGetSliceFromItemResult) GetSuccess() *TItemSetResult_ {
  if !p.IsSetSuccess() {
    return TBSLI64DataServiceBsgGetSliceFromItemResult_Success_DEFAULT
  }
return p.Success
}
func (p *TBSLI64DataServiceBsgGetSliceFromItemResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TBSLI64DataServiceBsgGetSliceFromItemResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TBSLI64DataServiceBsgGetSliceFromItemResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TItemSetResult_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TBSLI64DataServiceBsgGetSliceFromItemResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("bsgGetSliceFromItem_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TBSLI64DataServiceBsgGetSliceFromItemResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TBSLI64DataServiceBsgGetSliceFromItemResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TBSLI64DataServiceBsgGetSliceFromItemResult(%+v)", *p)
}

// Attributes:
//  - RootID
//  - FromIDX
//  - Count
type TBSLI64DataServiceBsgGetSliceRArgs struct {
  RootID TContainerKey `thrift:"rootID,1" db:"rootID" json:"rootID"`
  FromIDX int32 `thrift:"fromIDX,2" db:"fromIDX" json:"fromIDX"`
  Count int32 `thrift:"count,3" db:"count" json:"count"`
}

func NewTBSLI64DataServiceBsgGetSliceRArgs() *TBSLI64DataServiceBsgGetSliceRArgs {
  return &TBSLI64DataServiceBsgGetSliceRArgs{}
}


func (p *TBSLI64DataServiceBsgGetSliceRArgs) GetRootID() TContainerKey {
  return p.RootID
}

func (p *TBSLI64DataServiceBsgGetSliceRArgs) GetFromIDX() int32 {
  return p.FromIDX
}

func (p *TBSLI64DataServiceBsgGetSliceRArgs) GetCount() int32 {
  return p.Count
}
func (p *TBSLI64DataServiceBsgGetSliceRArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TBSLI64DataServiceBsgGetSliceRArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TContainerKey(v)
  p.RootID = temp
}
  return nil
}

func (p *TBSLI64DataServiceBsgGetSliceRArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.FromIDX = v
}
  return nil
}

func (p *TBSLI64DataServiceBsgGetSliceRArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Count = v
}
  return nil
}

func (p *TBSLI64DataServiceBsgGetSliceRArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("bsgGetSliceR_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TBSLI64DataServiceBsgGetSliceRArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("rootID", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rootID: ", p), err) }
  if err := oprot.WriteI64(int64(p.RootID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.rootID (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rootID: ", p), err) }
  return err
}

func (p *TBSLI64DataServiceBsgGetSliceRArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("fromIDX", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:fromIDX: ", p), err) }
  if err := oprot.WriteI32(int32(p.FromIDX)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.fromIDX (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:fromIDX: ", p), err) }
  return err
}

func (p *TBSLI64DataServiceBsgGetSliceRArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("count", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:count: ", p), err) }
  if err := oprot.WriteI32(int32(p.Count)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.count (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:count: ", p), err) }
  return err
}

func (p *TBSLI64DataServiceBsgGetSliceRArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TBSLI64DataServiceBsgGetSliceRArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TBSLI64DataServiceBsgGetSliceRResult struct {
  Success *TItemSetResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTBSLI64DataServiceBsgGetSliceRResult() *TBSLI64DataServiceBsgGetSliceRResult {
  return &TBSLI64DataServiceBsgGetSliceRResult{}
}

var TBSLI64DataServiceBsgGetSliceRResult_Success_DEFAULT *TItemSetResult_
func (p *TBSLI64DataServiceBsgGetSliceRResult) GetSuccess() *TItemSetResult_ {
  if !p.IsSetSuccess() {
    return TBSLI64DataServiceBsgGetSliceRResult_Success_DEFAULT
  }
return p.Success
}
func (p *TBSLI64DataServiceBsgGetSliceRResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TBSLI64DataServiceBsgGetSliceRResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TBSLI64DataServiceBsgGetSliceRResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TItemSetResult_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TBSLI64DataServiceBsgGetSliceRResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("bsgGetSliceR_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TBSLI64DataServiceBsgGetSliceRResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TBSLI64DataServiceBsgGetSliceRResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TBSLI64DataServiceBsgGetSliceRResult(%+v)", *p)
}

// Attributes:
//  - RootID
//  - FromKey
//  - Count
type TBSLI64DataServiceBsgGetSliceFromItemRArgs struct {
  RootID TContainerKey `thrift:"rootID,1" db:"rootID" json:"rootID"`
  FromKey TItemKey `thrift:"fromKey,2" db:"fromKey" json:"fromKey"`
  Count int32 `thrift:"count,3" db:"count" json:"count"`
}

func NewTBSLI64DataServiceBsgGetSliceFromItemRArgs() *TBSLI64DataServiceBsgGetSliceFromItemRArgs {
  return &TBSLI64DataServiceBsgGetSliceFromItemRArgs{}
}


func (p *TBSLI64DataServiceBsgGetSliceFromItemRArgs) GetRootID() TContainerKey {
  return p.RootID
}

func (p *TBSLI64DataServiceBsgGetSliceFromItemRArgs) GetFromKey() TItemKey {
  return p.FromKey
}

func (p *TBSLI64DataServiceBsgGetSliceFromItemRArgs) GetCount() int32 {
  return p.Count
}
func (p *TBSLI64DataServiceBsgGetSliceFromItemRArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TBSLI64DataServiceBsgGetSliceFromItemRArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TContainerKey(v)
  p.RootID = temp
}
  return nil
}

func (p *TBSLI64DataServiceBsgGetSliceFromItemRArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := TItemKey(v)
  p.FromKey = temp
}
  return nil
}

func (p *TBSLI64DataServiceBsgGetSliceFromItemRArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Count = v
}
  return nil
}

func (p *TBSLI64DataServiceBsgGetSliceFromItemRArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("bsgGetSliceFromItemR_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TBSLI64DataServiceBsgGetSliceFromItemRArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("rootID", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rootID: ", p), err) }
  if err := oprot.WriteI64(int64(p.RootID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.rootID (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rootID: ", p), err) }
  return err
}

func (p *TBSLI64DataServiceBsgGetSliceFromItemRArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("fromKey", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:fromKey: ", p), err) }
  if err := oprot.WriteBinary(p.FromKey); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.fromKey (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:fromKey: ", p), err) }
  return err
}

func (p *TBSLI64DataServiceBsgGetSliceFromItemRArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("count", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:count: ", p), err) }
  if err := oprot.WriteI32(int32(p.Count)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.count (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:count: ", p), err) }
  return err
}

func (p *TBSLI64DataServiceBsgGetSliceFromItemRArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TBSLI64DataServiceBsgGetSliceFromItemRArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TBSLI64DataServiceBsgGetSliceFromItemRResult struct {
  Success *TItemSetResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTBSLI64DataServiceBsgGetSliceFromItemRResult() *TBSLI64DataServiceBsgGetSliceFromItemRResult {
  return &TBSLI64DataServiceBsgGetSliceFromItemRResult{}
}

var TBSLI64DataServiceBsgGetSliceFromItemRResult_Success_DEFAULT *TItemSetResult_
func (p *TBSLI64DataServiceBsgGetSliceFromItemRResult) GetSuccess() *TItemSetResult_ {
  if !p.IsSetSuccess() {
    return TBSLI64DataServiceBsgGetSliceFromItemRResult_Success_DEFAULT
  }
return p.Success
}
func (p *TBSLI64DataServiceBsgGetSliceFromItemRResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TBSLI64DataServiceBsgGetSliceFromItemRResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TBSLI64DataServiceBsgGetSliceFromItemRResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TItemSetResult_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TBSLI64DataServiceBsgGetSliceFromItemRResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("bsgGetSliceFromItemR_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TBSLI64DataServiceBsgGetSliceFromItemRResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TBSLI64DataServiceBsgGetSliceFromItemRResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TBSLI64DataServiceBsgGetSliceFromItemRResult(%+v)", *p)
}

// Attributes:
//  - RootID
//  - BrotherRootID
//  - CurrentSize
type TBSLI64DataServiceSplitBigSetArgs struct {
  RootID TContainerKey `thrift:"rootID,1" db:"rootID" json:"rootID"`
  BrotherRootID TContainerKey `thrift:"brotherRootID,2" db:"brotherRootID" json:"brotherRootID"`
  CurrentSize int64 `thrift:"currentSize,3" db:"currentSize" json:"currentSize"`
}

func NewTBSLI64DataServiceSplitBigSetArgs() *TBSLI64DataServiceSplitBigSetArgs {
  return &TBSLI64DataServiceSplitBigSetArgs{}
}


func (p *TBSLI64DataServiceSplitBigSetArgs) GetRootID() TContainerKey {
  return p.RootID
}

func (p *TBSLI64DataServiceSplitBigSetArgs) GetBrotherRootID() TContainerKey {
  return p.BrotherRootID
}

func (p *TBSLI64DataServiceSplitBigSetArgs) GetCurrentSize() int64 {
  return p.CurrentSize
}
func (p *TBSLI64DataServiceSplitBigSetArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TBSLI64DataServiceSplitBigSetArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TContainerKey(v)
  p.RootID = temp
}
  return nil
}

func (p *TBSLI64DataServiceSplitBigSetArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := TContainerKey(v)
  p.BrotherRootID = temp
}
  return nil
}

func (p *TBSLI64DataServiceSplitBigSetArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.CurrentSize = v
}
  return nil
}

func (p *TBSLI64DataServiceSplitBigSetArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("splitBigSet_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TBSLI64DataServiceSplitBigSetArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("rootID", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rootID: ", p), err) }
  if err := oprot.WriteI64(int64(p.RootID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.rootID (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rootID: ", p), err) }
  return err
}

func (p *TBSLI64DataServiceSplitBigSetArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("brotherRootID", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:brotherRootID: ", p), err) }
  if err := oprot.WriteI64(int64(p.BrotherRootID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.brotherRootID (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:brotherRootID: ", p), err) }
  return err
}

func (p *TBSLI64DataServiceSplitBigSetArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("currentSize", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:currentSize: ", p), err) }
  if err := oprot.WriteI64(int64(p.CurrentSize)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.currentSize (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:currentSize: ", p), err) }
  return err
}

func (p *TBSLI64DataServiceSplitBigSetArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TBSLI64DataServiceSplitBigSetArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TBSLI64DataServiceSplitBigSetResult struct {
  Success *TSplitBigSetResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTBSLI64DataServiceSplitBigSetResult() *TBSLI64DataServiceSplitBigSetResult {
  return &TBSLI64DataServiceSplitBigSetResult{}
}

var TBSLI64DataServiceSplitBigSetResult_Success_DEFAULT *TSplitBigSetResult_
func (p *TBSLI64DataServiceSplitBigSetResult) GetSuccess() *TSplitBigSetResult_ {
  if !p.IsSetSuccess() {
    return TBSLI64DataServiceSplitBigSetResult_Success_DEFAULT
  }
return p.Success
}
func (p *TBSLI64DataServiceSplitBigSetResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TBSLI64DataServiceSplitBigSetResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TBSLI64DataServiceSplitBigSetResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TSplitBigSetResult_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TBSLI64DataServiceSplitBigSetResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("splitBigSet_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TBSLI64DataServiceSplitBigSetResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TBSLI64DataServiceSplitBigSetResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TBSLI64DataServiceSplitBigSetResult(%+v)", *p)
}

// Attributes:
//  - RootID
//  - StartKey
//  - EndKey
type TBSLI64DataServiceBsgRangeQueryArgs struct {
  RootID TContainerKey `thrift:"rootID,1" db:"rootID" json:"rootID"`
  StartKey TItemKey `thrift:"startKey,2" db:"startKey" json:"startKey"`
  EndKey TItemKey `thrift:"endKey,3" db:"endKey" json:"endKey"`
}

func NewTBSLI64DataServiceBsgRangeQueryArgs() *TBSLI64DataServiceBsgRangeQueryArgs {
  return &TBSLI64DataServiceBsgRangeQueryArgs{}
}


func (p *TBSLI64DataServiceBsgRangeQueryArgs) GetRootID() TContainerKey {
  return p.RootID
}

func (p *TBSLI64DataServiceBsgRangeQueryArgs) GetStartKey() TItemKey {
  return p.StartKey
}

func (p *TBSLI64DataServiceBsgRangeQueryArgs) GetEndKey() TItemKey {
  return p.EndKey
}
func (p *TBSLI64DataServiceBsgRangeQueryArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TBSLI64DataServiceBsgRangeQueryArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TContainerKey(v)
  p.RootID = temp
}
  return nil
}

func (p *TBSLI64DataServiceBsgRangeQueryArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := TItemKey(v)
  p.StartKey = temp
}
  return nil
}

func (p *TBSLI64DataServiceBsgRangeQueryArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := TItemKey(v)
  p.EndKey = temp
}
  return nil
}

func (p *TBSLI64DataServiceBsgRangeQueryArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("bsgRangeQuery_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TBSLI64DataServiceBsgRangeQueryArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("rootID", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rootID: ", p), err) }
  if err := oprot.WriteI64(int64(p.RootID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.rootID (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rootID: ", p), err) }
  return err
}

func (p *TBSLI64DataServiceBsgRangeQueryArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("startKey", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:startKey: ", p), err) }
  if err := oprot.WriteBinary(p.StartKey); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.startKey (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:startKey: ", p), err) }
  return err
}

func (p *TBSLI64DataServiceBsgRangeQueryArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("endKey", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:endKey: ", p), err) }
  if err := oprot.WriteBinary(p.EndKey); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.endKey (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:endKey: ", p), err) }
  return err
}

func (p *TBSLI64DataServiceBsgRangeQueryArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TBSLI64DataServiceBsgRangeQueryArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TBSLI64DataServiceBsgRangeQueryResult struct {
  Success *TItemSetResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTBSLI64DataServiceBsgRangeQueryResult() *TBSLI64DataServiceBsgRangeQueryResult {
  return &TBSLI64DataServiceBsgRangeQueryResult{}
}

var TBSLI64DataServiceBsgRangeQueryResult_Success_DEFAULT *TItemSetResult_
func (p *TBSLI64DataServiceBsgRangeQueryResult) GetSuccess() *TItemSetResult_ {
  if !p.IsSetSuccess() {
    return TBSLI64DataServiceBsgRangeQueryResult_Success_DEFAULT
  }
return p.Success
}
func (p *TBSLI64DataServiceBsgRangeQueryResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TBSLI64DataServiceBsgRangeQueryResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TBSLI64DataServiceBsgRangeQueryResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TItemSetResult_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TBSLI64DataServiceBsgRangeQueryResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("bsgRangeQuery_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TBSLI64DataServiceBsgRangeQueryResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TBSLI64DataServiceBsgRangeQueryResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TBSLI64DataServiceBsgRangeQueryResult(%+v)", *p)
}

// Attributes:
//  - RootID
//  - SetData
type TBSLI64DataServiceBsgBulkLoadArgs struct {
  RootID TContainerKey `thrift:"rootID,1" db:"rootID" json:"rootID"`
  SetData *TItemSet `thrift:"setData,2" db:"setData" json:"setData"`
}

func NewTBSLI64DataServiceBsgBulkLoadArgs() *TBSLI64DataServiceBsgBulkLoadArgs {
  return &TBSLI64DataServiceBsgBulkLoadArgs{}
}


func (p *TBSLI64DataServiceBsgBulkLoadArgs) GetRootID() TContainerKey {
  return p.RootID
}
var TBSLI64DataServiceBsgBulkLoadArgs_SetData_DEFAULT *TItemSet
func (p *TBSLI64DataServiceBsgBulkLoadArgs) GetSetData() *TItemSet {
  if !p.IsSetSetData() {
    return TBSLI64DataServiceBsgBulkLoadArgs_SetData_DEFAULT
  }
return p.SetData
}
func (p *TBSLI64DataServiceBsgBulkLoadArgs) IsSetSetData() bool {
  return p.SetData != nil
}

func (p *TBSLI64DataServiceBsgBulkLoadArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TBSLI64DataServiceBsgBulkLoadArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TContainerKey(v)
  p.RootID = temp
}
  return nil
}

func (p *TBSLI64DataServiceBsgBulkLoadArgs)  ReadField2(iprot thrift.TProtocol) error {
  p.SetData = &TItemSet{}
  if err := p.SetData.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SetData), err)
  }
  return nil
}

func (p *TBSLI64DataServiceBsgBulkLoadArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("bsgBulkLoad_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TBSLI64DataServiceBsgBulkLoadArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("rootID", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rootID: ", p), err) }
  if err := oprot.WriteI64(int64(p.RootID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.rootID (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rootID: ", p), err) }
  return err
}

func (p *TBSLI64DataServiceBsgBulkLoadArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("setData", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:setData: ", p), err) }
  if err := p.SetData.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SetData), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:setData: ", p), err) }
  return err
}

func (p *TBSLI64DataServiceBsgBulkLoadArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TBSLI64DataServiceBsgBulkLoadArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TBSLI64DataServiceBsgBulkLoadResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTBSLI64DataServiceBsgBulkLoadResult() *TBSLI64DataServiceBsgBulkLoadResult {
  return &TBSLI64DataServiceBsgBulkLoadResult{}
}

var TBSLI64DataServiceBsgBulkLoadResult_Success_DEFAULT bool
func (p *TBSLI64DataServiceBsgBulkLoadResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return TBSLI64DataServiceBsgBulkLoadResult_Success_DEFAULT
  }
return *p.Success
}
func (p *TBSLI64DataServiceBsgBulkLoadResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TBSLI64DataServiceBsgBulkLoadResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TBSLI64DataServiceBsgBulkLoadResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *TBSLI64DataServiceBsgBulkLoadResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("bsgBulkLoad_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TBSLI64DataServiceBsgBulkLoadResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TBSLI64DataServiceBsgBulkLoadResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TBSLI64DataServiceBsgBulkLoadResult(%+v)", *p)
}

// Attributes:
//  - RootID
//  - SetData
//  - GetAddedItems
//  - GetReplacedItems
type TBSLI64DataServiceBsgMultiPutArgs struct {
  RootID TContainerKey `thrift:"rootID,1" db:"rootID" json:"rootID"`
  SetData *TItemSet `thrift:"setData,2" db:"setData" json:"setData"`
  GetAddedItems bool `thrift:"getAddedItems,3" db:"getAddedItems" json:"getAddedItems"`
  GetReplacedItems bool `thrift:"getReplacedItems,4" db:"getReplacedItems" json:"getReplacedItems"`
}

func NewTBSLI64DataServiceBsgMultiPutArgs() *TBSLI64DataServiceBsgMultiPutArgs {
  return &TBSLI64DataServiceBsgMultiPutArgs{}
}


func (p *TBSLI64DataServiceBsgMultiPutArgs) GetRootID() TContainerKey {
  return p.RootID
}
var TBSLI64DataServiceBsgMultiPutArgs_SetData_DEFAULT *TItemSet
func (p *TBSLI64DataServiceBsgMultiPutArgs) GetSetData() *TItemSet {
  if !p.IsSetSetData() {
    return TBSLI64DataServiceBsgMultiPutArgs_SetData_DEFAULT
  }
return p.SetData
}

func (p *TBSLI64DataServiceBsgMultiPutArgs) GetGetAddedItems() bool {
  return p.GetAddedItems
}

func (p *TBSLI64DataServiceBsgMultiPutArgs) GetGetReplacedItems() bool {
  return p.GetReplacedItems
}
func (p *TBSLI64DataServiceBsgMultiPutArgs) IsSetSetData() bool {
  return p.SetData != nil
}

func (p *TBSLI64DataServiceBsgMultiPutArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TBSLI64DataServiceBsgMultiPutArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TContainerKey(v)
  p.RootID = temp
}
  return nil
}

func (p *TBSLI64DataServiceBsgMultiPutArgs)  ReadField2(iprot thrift.TProtocol) error {
  p.SetData = &TItemSet{}
  if err := p.SetData.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SetData), err)
  }
  return nil
}

func (p *TBSLI64DataServiceBsgMultiPutArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.GetAddedItems = v
}
  return nil
}

func (p *TBSLI64DataServiceBsgMultiPutArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.GetReplacedItems = v
}
  return nil
}

func (p *TBSLI64DataServiceBsgMultiPutArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("bsgMultiPut_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TBSLI64DataServiceBsgMultiPutArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("rootID", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rootID: ", p), err) }
  if err := oprot.WriteI64(int64(p.RootID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.rootID (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rootID: ", p), err) }
  return err
}

func (p *TBSLI64DataServiceBsgMultiPutArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("setData", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:setData: ", p), err) }
  if err := p.SetData.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SetData), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:setData: ", p), err) }
  return err
}

func (p *TBSLI64DataServiceBsgMultiPutArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("getAddedItems", thrift.BOOL, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:getAddedItems: ", p), err) }
  if err := oprot.WriteBool(bool(p.GetAddedItems)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.getAddedItems (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:getAddedItems: ", p), err) }
  return err
}

func (p *TBSLI64DataServiceBsgMultiPutArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("getReplacedItems", thrift.BOOL, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:getReplacedItems: ", p), err) }
  if err := oprot.WriteBool(bool(p.GetReplacedItems)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.getReplacedItems (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:getReplacedItems: ", p), err) }
  return err
}

func (p *TBSLI64DataServiceBsgMultiPutArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TBSLI64DataServiceBsgMultiPutArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TBSLI64DataServiceBsgMultiPutResult struct {
  Success *TMultiPutItemResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTBSLI64DataServiceBsgMultiPutResult() *TBSLI64DataServiceBsgMultiPutResult {
  return &TBSLI64DataServiceBsgMultiPutResult{}
}

var TBSLI64DataServiceBsgMultiPutResult_Success_DEFAULT *TMultiPutItemResult_
func (p *TBSLI64DataServiceBsgMultiPutResult) GetSuccess() *TMultiPutItemResult_ {
  if !p.IsSetSuccess() {
    return TBSLI64DataServiceBsgMultiPutResult_Success_DEFAULT
  }
return p.Success
}
func (p *TBSLI64DataServiceBsgMultiPutResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TBSLI64DataServiceBsgMultiPutResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TBSLI64DataServiceBsgMultiPutResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TMultiPutItemResult_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TBSLI64DataServiceBsgMultiPutResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("bsgMultiPut_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TBSLI64DataServiceBsgMultiPutResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TBSLI64DataServiceBsgMultiPutResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TBSLI64DataServiceBsgMultiPutResult(%+v)", *p)
}

// Attributes:
//  - MetaID
type TBSLI64DataServiceGetSetGenDataArgs struct {
  MetaID TMetaKey `thrift:"metaID,1" db:"metaID" json:"metaID"`
}

func NewTBSLI64DataServiceGetSetGenDataArgs() *TBSLI64DataServiceGetSetGenDataArgs {
  return &TBSLI64DataServiceGetSetGenDataArgs{}
}


func (p *TBSLI64DataServiceGetSetGenDataArgs) GetMetaID() TMetaKey {
  return p.MetaID
}
func (p *TBSLI64DataServiceGetSetGenDataArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TBSLI64DataServiceGetSetGenDataArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TMetaKey(v)
  p.MetaID = temp
}
  return nil
}

func (p *TBSLI64DataServiceGetSetGenDataArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getSetGenData_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TBSLI64DataServiceGetSetGenDataArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("metaID", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:metaID: ", p), err) }
  if err := oprot.WriteI64(int64(p.MetaID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.metaID (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:metaID: ", p), err) }
  return err
}

func (p *TBSLI64DataServiceGetSetGenDataArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TBSLI64DataServiceGetSetGenDataArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TBSLI64DataServiceGetSetGenDataResult struct {
  Success *TBigSetLI64Data `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTBSLI64DataServiceGetSetGenDataResult() *TBSLI64DataServiceGetSetGenDataResult {
  return &TBSLI64DataServiceGetSetGenDataResult{}
}

var TBSLI64DataServiceGetSetGenDataResult_Success_DEFAULT *TBigSetLI64Data
func (p *TBSLI64DataServiceGetSetGenDataResult) GetSuccess() *TBigSetLI64Data {
  if !p.IsSetSuccess() {
    return TBSLI64DataServiceGetSetGenDataResult_Success_DEFAULT
  }
return p.Success
}
func (p *TBSLI64DataServiceGetSetGenDataResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TBSLI64DataServiceGetSetGenDataResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TBSLI64DataServiceGetSetGenDataResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TBigSetLI64Data{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TBSLI64DataServiceGetSetGenDataResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getSetGenData_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TBSLI64DataServiceGetSetGenDataResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TBSLI64DataServiceGetSetGenDataResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TBSLI64DataServiceGetSetGenDataResult(%+v)", *p)
}

// Attributes:
//  - MetaID
//  - Metadata
type TBSLI64DataServicePutSetGenDataArgs struct {
  MetaID TMetaKey `thrift:"metaID,1" db:"metaID" json:"metaID"`
  Metadata *TBigSetLI64Data `thrift:"metadata,2" db:"metadata" json:"metadata"`
}

func NewTBSLI64DataServicePutSetGenDataArgs() *TBSLI64DataServicePutSetGenDataArgs {
  return &TBSLI64DataServicePutSetGenDataArgs{}
}


func (p *TBSLI64DataServicePutSetGenDataArgs) GetMetaID() TMetaKey {
  return p.MetaID
}
var TBSLI64DataServicePutSetGenDataArgs_Metadata_DEFAULT *TBigSetLI64Data
func (p *TBSLI64DataServicePutSetGenDataArgs) GetMetadata() *TBigSetLI64Data {
  if !p.IsSetMetadata() {
    return TBSLI64DataServicePutSetGenDataArgs_Metadata_DEFAULT
  }
return p.Metadata
}
func (p *TBSLI64DataServicePutSetGenDataArgs) IsSetMetadata() bool {
  return p.Metadata != nil
}

func (p *TBSLI64DataServicePutSetGenDataArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TBSLI64DataServicePutSetGenDataArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TMetaKey(v)
  p.MetaID = temp
}
  return nil
}

func (p *TBSLI64DataServicePutSetGenDataArgs)  ReadField2(iprot thrift.TProtocol) error {
  p.Metadata = &TBigSetLI64Data{}
  if err := p.Metadata.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Metadata), err)
  }
  return nil
}

func (p *TBSLI64DataServicePutSetGenDataArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("putSetGenData_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TBSLI64DataServicePutSetGenDataArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("metaID", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:metaID: ", p), err) }
  if err := oprot.WriteI64(int64(p.MetaID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.metaID (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:metaID: ", p), err) }
  return err
}

func (p *TBSLI64DataServicePutSetGenDataArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("metadata", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:metadata: ", p), err) }
  if err := p.Metadata.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Metadata), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:metadata: ", p), err) }
  return err
}

func (p *TBSLI64DataServicePutSetGenDataArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TBSLI64DataServicePutSetGenDataArgs(%+v)", *p)
}

type TBSLI64DataServicePutSetGenDataResult struct {
}

func NewTBSLI64DataServicePutSetGenDataResult() *TBSLI64DataServicePutSetGenDataResult {
  return &TBSLI64DataServicePutSetGenDataResult{}
}

func (p *TBSLI64DataServicePutSetGenDataResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TBSLI64DataServicePutSetGenDataResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("putSetGenData_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TBSLI64DataServicePutSetGenDataResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TBSLI64DataServicePutSetGenDataResult(%+v)", *p)
}

// Attributes:
//  - MetaID
type TBSLI64DataServiceGetTotalCountArgs struct {
  MetaID TMetaKey `thrift:"metaID,1" db:"metaID" json:"metaID"`
}

func NewTBSLI64DataServiceGetTotalCountArgs() *TBSLI64DataServiceGetTotalCountArgs {
  return &TBSLI64DataServiceGetTotalCountArgs{}
}


func (p *TBSLI64DataServiceGetTotalCountArgs) GetMetaID() TMetaKey {
  return p.MetaID
}
func (p *TBSLI64DataServiceGetTotalCountArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TBSLI64DataServiceGetTotalCountArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TMetaKey(v)
  p.MetaID = temp
}
  return nil
}

func (p *TBSLI64DataServiceGetTotalCountArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getTotalCount_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TBSLI64DataServiceGetTotalCountArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("metaID", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:metaID: ", p), err) }
  if err := oprot.WriteI64(int64(p.MetaID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.metaID (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:metaID: ", p), err) }
  return err
}

func (p *TBSLI64DataServiceGetTotalCountArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TBSLI64DataServiceGetTotalCountArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TBSLI64DataServiceGetTotalCountResult struct {
  Success *int64 `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTBSLI64DataServiceGetTotalCountResult() *TBSLI64DataServiceGetTotalCountResult {
  return &TBSLI64DataServiceGetTotalCountResult{}
}

var TBSLI64DataServiceGetTotalCountResult_Success_DEFAULT int64
func (p *TBSLI64DataServiceGetTotalCountResult) GetSuccess() int64 {
  if !p.IsSetSuccess() {
    return TBSLI64DataServiceGetTotalCountResult_Success_DEFAULT
  }
return *p.Success
}
func (p *TBSLI64DataServiceGetTotalCountResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TBSLI64DataServiceGetTotalCountResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TBSLI64DataServiceGetTotalCountResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *TBSLI64DataServiceGetTotalCountResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getTotalCount_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TBSLI64DataServiceGetTotalCountResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.I64, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI64(int64(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TBSLI64DataServiceGetTotalCountResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TBSLI64DataServiceGetTotalCountResult(%+v)", *p)
}

// Attributes:
//  - RootID
type TBSLI64DataServiceRemoveAllArgs struct {
  RootID TContainerKey `thrift:"rootID,1" db:"rootID" json:"rootID"`
}

func NewTBSLI64DataServiceRemoveAllArgs() *TBSLI64DataServiceRemoveAllArgs {
  return &TBSLI64DataServiceRemoveAllArgs{}
}


func (p *TBSLI64DataServiceRemoveAllArgs) GetRootID() TContainerKey {
  return p.RootID
}
func (p *TBSLI64DataServiceRemoveAllArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TBSLI64DataServiceRemoveAllArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TContainerKey(v)
  p.RootID = temp
}
  return nil
}

func (p *TBSLI64DataServiceRemoveAllArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("removeAll_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TBSLI64DataServiceRemoveAllArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("rootID", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rootID: ", p), err) }
  if err := oprot.WriteI64(int64(p.RootID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.rootID (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rootID: ", p), err) }
  return err
}

func (p *TBSLI64DataServiceRemoveAllArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TBSLI64DataServiceRemoveAllArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TBSLI64DataServiceRemoveAllResult struct {
  Success *int64 `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTBSLI64DataServiceRemoveAllResult() *TBSLI64DataServiceRemoveAllResult {
  return &TBSLI64DataServiceRemoveAllResult{}
}

var TBSLI64DataServiceRemoveAllResult_Success_DEFAULT int64
func (p *TBSLI64DataServiceRemoveAllResult) GetSuccess() int64 {
  if !p.IsSetSuccess() {
    return TBSLI64DataServiceRemoveAllResult_Success_DEFAULT
  }
return *p.Success
}
func (p *TBSLI64DataServiceRemoveAllResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TBSLI64DataServiceRemoveAllResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TBSLI64DataServiceRemoveAllResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *TBSLI64DataServiceRemoveAllResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("removeAll_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TBSLI64DataServiceRemoveAllResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.I64, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI64(int64(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TBSLI64DataServiceRemoveAllResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TBSLI64DataServiceRemoveAllResult(%+v)", *p)
}


type TStringBSListI64Service interface {
  // Parameters:
  //  - BsName
  CreateStringBigSet(ctx context.Context, bsName TStringKey) (r *TBigSetInfoResult_, err error)
  // Parameters:
  //  - BsName
  GetBigSetInfoByName(ctx context.Context, bsName TStringKey) (r *TBigSetInfoResult_, err error)
  // Parameters:
  //  - BsName
  //  - BigsetID
  AssignBigSetName(ctx context.Context, bsName TStringKey, bigsetID TContainerKey) (r *TBigSetInfoResult_, err error)
  // Parameters:
  //  - BsName
  //  - Item
  BsPutItem(ctx context.Context, bsName TStringKey, item *TItem) (r *TPutItemResult_, err error)
  // Parameters:
  //  - BsName
  //  - ItemKey
  //  - AChild
  //  - OpOption
  AddChildItem(ctx context.Context, bsName TStringKey, itemKey TItemKey, aChild TItemChild, opOption TChildItemOptions) (r *TChildItemResult_, err error)
  // Parameters:
  //  - BsName
  //  - ItemKey
  //  - AChild
  //  - OpOption
  AddChildrenItem(ctx context.Context, bsName TStringKey, itemKey TItemKey, aChild []TItemChild, opOption TChildItemOptions) (r *TChildItemResult_, err error)
  // Parameters:
  //  - BsName
  //  - ItemKey
  //  - AChild
  //  - OpOption
  RemoveChildItem(ctx context.Context, bsName TStringKey, itemKey TItemKey, aChild TItemChild, opOption TChildItemOptions) (r *TChildItemResult_, err error)
  // Parameters:
  //  - BsName
  //  - ItemKey
  BsRemoveItem(ctx context.Context, bsName TStringKey, itemKey TItemKey) (r bool, err error)
  // Parameters:
  //  - BsName
  //  - ItemKey
  BsExisted(ctx context.Context, bsName TStringKey, itemKey TItemKey) (r *TExistedResult_, err error)
  // Parameters:
  //  - BsName
  //  - ItemKey
  BsGetItem(ctx context.Context, bsName TStringKey, itemKey TItemKey) (r *TItemResult_, err error)
  // Parameters:
  //  - BsName
  //  - FromPos
  //  - Count
  BsGetSlice(ctx context.Context, bsName TStringKey, fromPos int32, count int32) (r *TItemSetResult_, err error)
  // Parameters:
  //  - BsName
  //  - FromKey
  //  - Count
  BsGetSliceFromItem(ctx context.Context, bsName TStringKey, fromKey TItemKey, count int32) (r *TItemSetResult_, err error)
  // Parameters:
  //  - BsName
  //  - FromPos
  //  - Count
  BsGetSliceR(ctx context.Context, bsName TStringKey, fromPos int32, count int32) (r *TItemSetResult_, err error)
  // Parameters:
  //  - BsName
  //  - FromKey
  //  - Count
  BsGetSliceFromItemR(ctx context.Context, bsName TStringKey, fromKey TItemKey, count int32) (r *TItemSetResult_, err error)
  // Parameters:
  //  - BsName
  //  - StartKey
  //  - EndKey
  BsRangeQuery(ctx context.Context, bsName TStringKey, startKey TItemKey, endKey TItemKey) (r *TItemSetResult_, err error)
  // Parameters:
  //  - BsName
  //  - SetData
  BsBulkLoad(ctx context.Context, bsName TStringKey, setData *TItemSet) (r bool, err error)
  // Parameters:
  //  - BsName
  //  - SetData
  //  - GetAddedItems
  //  - GetReplacedItems
  BsMultiPut(ctx context.Context, bsName TStringKey, setData *TItemSet, getAddedItems bool, getReplacedItems bool) (r *TMultiPutItemResult_, err error)
  // Parameters:
  //  - BsName
  GetTotalCount(ctx context.Context, bsName TStringKey) (r int64, err error)
  // Parameters:
  //  - BsName
  RemoveAll(ctx context.Context, bsName TStringKey) (r int64, err error)
  TotalStringKeyCount(ctx context.Context) (r int64, err error)
  // Parameters:
  //  - FromIndex
  //  - Count
  GetListKey(ctx context.Context, fromIndex int64, count int32) (r []TStringKey, err error)
  // Parameters:
  //  - KeyFrom
  //  - Count
  GetListKeyFrom(ctx context.Context, keyFrom TStringKey, count int32) (r []TStringKey, err error)
}

type TStringBSListI64ServiceClient struct {
  c thrift.TClient
}

func NewTStringBSListI64ServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *TStringBSListI64ServiceClient {
  return &TStringBSListI64ServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewTStringBSListI64ServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *TStringBSListI64ServiceClient {
  return &TStringBSListI64ServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewTStringBSListI64ServiceClient(c thrift.TClient) *TStringBSListI64ServiceClient {
  return &TStringBSListI64ServiceClient{
    c: c,
  }
}

func (p *TStringBSListI64ServiceClient) Client_() thrift.TClient {
  return p.c
}
// Parameters:
//  - BsName
func (p *TStringBSListI64ServiceClient) CreateStringBigSet(ctx context.Context, bsName TStringKey) (r *TBigSetInfoResult_, err error) {
  var _args108 TStringBSListI64ServiceCreateStringBigSetArgs
  _args108.BsName = bsName
  var _result109 TStringBSListI64ServiceCreateStringBigSetResult
  if err = p.Client_().Call(ctx, "createStringBigSet", &_args108, &_result109); err != nil {
    return
  }
  return _result109.GetSuccess(), nil
}

// Parameters:
//  - BsName
func (p *TStringBSListI64ServiceClient) GetBigSetInfoByName(ctx context.Context, bsName TStringKey) (r *TBigSetInfoResult_, err error) {
  var _args110 TStringBSListI64ServiceGetBigSetInfoByNameArgs
  _args110.BsName = bsName
  var _result111 TStringBSListI64ServiceGetBigSetInfoByNameResult
  if err = p.Client_().Call(ctx, "getBigSetInfoByName", &_args110, &_result111); err != nil {
    return
  }
  return _result111.GetSuccess(), nil
}

// Parameters:
//  - BsName
//  - BigsetID
func (p *TStringBSListI64ServiceClient) AssignBigSetName(ctx context.Context, bsName TStringKey, bigsetID TContainerKey) (r *TBigSetInfoResult_, err error) {
  var _args112 TStringBSListI64ServiceAssignBigSetNameArgs
  _args112.BsName = bsName
  _args112.BigsetID = bigsetID
  var _result113 TStringBSListI64ServiceAssignBigSetNameResult
  if err = p.Client_().Call(ctx, "assignBigSetName", &_args112, &_result113); err != nil {
    return
  }
  return _result113.GetSuccess(), nil
}

// Parameters:
//  - BsName
//  - Item
func (p *TStringBSListI64ServiceClient) BsPutItem(ctx context.Context, bsName TStringKey, item *TItem) (r *TPutItemResult_, err error) {
  var _args114 TStringBSListI64ServiceBsPutItemArgs
  _args114.BsName = bsName
  _args114.Item = item
  var _result115 TStringBSListI64ServiceBsPutItemResult
  if err = p.Client_().Call(ctx, "bsPutItem", &_args114, &_result115); err != nil {
    return
  }
  return _result115.GetSuccess(), nil
}

// Parameters:
//  - BsName
//  - ItemKey
//  - AChild
//  - OpOption
func (p *TStringBSListI64ServiceClient) AddChildItem(ctx context.Context, bsName TStringKey, itemKey TItemKey, aChild TItemChild, opOption TChildItemOptions) (r *TChildItemResult_, err error) {
  var _args116 TStringBSListI64ServiceAddChildItemArgs
  _args116.BsName = bsName
  _args116.ItemKey = itemKey
  _args116.AChild = aChild
  _args116.OpOption = opOption
  var _result117 TStringBSListI64ServiceAddChildItemResult
  if err = p.Client_().Call(ctx, "addChildItem", &_args116, &_result117); err != nil {
    return
  }
  return _result117.GetSuccess(), nil
}

// Parameters:
//  - BsName
//  - ItemKey
//  - AChild
//  - OpOption
func (p *TStringBSListI64ServiceClient) AddChildrenItem(ctx context.Context, bsName TStringKey, itemKey TItemKey, aChild []TItemChild, opOption TChildItemOptions) (r *TChildItemResult_, err error) {
  var _args118 TStringBSListI64ServiceAddChildrenItemArgs
  _args118.BsName = bsName
  _args118.ItemKey = itemKey
  _args118.AChild = aChild
  _args118.OpOption = opOption
  var _result119 TStringBSListI64ServiceAddChildrenItemResult
  if err = p.Client_().Call(ctx, "addChildrenItem", &_args118, &_result119); err != nil {
    return
  }
  return _result119.GetSuccess(), nil
}

// Parameters:
//  - BsName
//  - ItemKey
//  - AChild
//  - OpOption
func (p *TStringBSListI64ServiceClient) RemoveChildItem(ctx context.Context, bsName TStringKey, itemKey TItemKey, aChild TItemChild, opOption TChildItemOptions) (r *TChildItemResult_, err error) {
  var _args120 TStringBSListI64ServiceRemoveChildItemArgs
  _args120.BsName = bsName
  _args120.ItemKey = itemKey
  _args120.AChild = aChild
  _args120.OpOption = opOption
  var _result121 TStringBSListI64ServiceRemoveChildItemResult
  if err = p.Client_().Call(ctx, "removeChildItem", &_args120, &_result121); err != nil {
    return
  }
  return _result121.GetSuccess(), nil
}

// Parameters:
//  - BsName
//  - ItemKey
func (p *TStringBSListI64ServiceClient) BsRemoveItem(ctx context.Context, bsName TStringKey, itemKey TItemKey) (r bool, err error) {
  var _args122 TStringBSListI64ServiceBsRemoveItemArgs
  _args122.BsName = bsName
  _args122.ItemKey = itemKey
  var _result123 TStringBSListI64ServiceBsRemoveItemResult
  if err = p.Client_().Call(ctx, "bsRemoveItem", &_args122, &_result123); err != nil {
    return
  }
  return _result123.GetSuccess(), nil
}

// Parameters:
//  - BsName
//  - ItemKey
func (p *TStringBSListI64ServiceClient) BsExisted(ctx context.Context, bsName TStringKey, itemKey TItemKey) (r *TExistedResult_, err error) {
  var _args124 TStringBSListI64ServiceBsExistedArgs
  _args124.BsName = bsName
  _args124.ItemKey = itemKey
  var _result125 TStringBSListI64ServiceBsExistedResult
  if err = p.Client_().Call(ctx, "bsExisted", &_args124, &_result125); err != nil {
    return
  }
  return _result125.GetSuccess(), nil
}

// Parameters:
//  - BsName
//  - ItemKey
func (p *TStringBSListI64ServiceClient) BsGetItem(ctx context.Context, bsName TStringKey, itemKey TItemKey) (r *TItemResult_, err error) {
  var _args126 TStringBSListI64ServiceBsGetItemArgs
  _args126.BsName = bsName
  _args126.ItemKey = itemKey
  var _result127 TStringBSListI64ServiceBsGetItemResult
  if err = p.Client_().Call(ctx, "bsGetItem", &_args126, &_result127); err != nil {
    return
  }
  return _result127.GetSuccess(), nil
}

// Parameters:
//  - BsName
//  - FromPos
//  - Count
func (p *TStringBSListI64ServiceClient) BsGetSlice(ctx context.Context, bsName TStringKey, fromPos int32, count int32) (r *TItemSetResult_, err error) {
  var _args128 TStringBSListI64ServiceBsGetSliceArgs
  _args128.BsName = bsName
  _args128.FromPos = fromPos
  _args128.Count = count
  var _result129 TStringBSListI64ServiceBsGetSliceResult
  if err = p.Client_().Call(ctx, "bsGetSlice", &_args128, &_result129); err != nil {
    return
  }
  return _result129.GetSuccess(), nil
}

// Parameters:
//  - BsName
//  - FromKey
//  - Count
func (p *TStringBSListI64ServiceClient) BsGetSliceFromItem(ctx context.Context, bsName TStringKey, fromKey TItemKey, count int32) (r *TItemSetResult_, err error) {
  var _args130 TStringBSListI64ServiceBsGetSliceFromItemArgs
  _args130.BsName = bsName
  _args130.FromKey = fromKey
  _args130.Count = count
  var _result131 TStringBSListI64ServiceBsGetSliceFromItemResult
  if err = p.Client_().Call(ctx, "bsGetSliceFromItem", &_args130, &_result131); err != nil {
    return
  }
  return _result131.GetSuccess(), nil
}

// Parameters:
//  - BsName
//  - FromPos
//  - Count
func (p *TStringBSListI64ServiceClient) BsGetSliceR(ctx context.Context, bsName TStringKey, fromPos int32, count int32) (r *TItemSetResult_, err error) {
  var _args132 TStringBSListI64ServiceBsGetSliceRArgs
  _args132.BsName = bsName
  _args132.FromPos = fromPos
  _args132.Count = count
  var _result133 TStringBSListI64ServiceBsGetSliceRResult
  if err = p.Client_().Call(ctx, "bsGetSliceR", &_args132, &_result133); err != nil {
    return
  }
  return _result133.GetSuccess(), nil
}

// Parameters:
//  - BsName
//  - FromKey
//  - Count
func (p *TStringBSListI64ServiceClient) BsGetSliceFromItemR(ctx context.Context, bsName TStringKey, fromKey TItemKey, count int32) (r *TItemSetResult_, err error) {
  var _args134 TStringBSListI64ServiceBsGetSliceFromItemRArgs
  _args134.BsName = bsName
  _args134.FromKey = fromKey
  _args134.Count = count
  var _result135 TStringBSListI64ServiceBsGetSliceFromItemRResult
  if err = p.Client_().Call(ctx, "bsGetSliceFromItemR", &_args134, &_result135); err != nil {
    return
  }
  return _result135.GetSuccess(), nil
}

// Parameters:
//  - BsName
//  - StartKey
//  - EndKey
func (p *TStringBSListI64ServiceClient) BsRangeQuery(ctx context.Context, bsName TStringKey, startKey TItemKey, endKey TItemKey) (r *TItemSetResult_, err error) {
  var _args136 TStringBSListI64ServiceBsRangeQueryArgs
  _args136.BsName = bsName
  _args136.StartKey = startKey
  _args136.EndKey = endKey
  var _result137 TStringBSListI64ServiceBsRangeQueryResult
  if err = p.Client_().Call(ctx, "bsRangeQuery", &_args136, &_result137); err != nil {
    return
  }
  return _result137.GetSuccess(), nil
}

// Parameters:
//  - BsName
//  - SetData
func (p *TStringBSListI64ServiceClient) BsBulkLoad(ctx context.Context, bsName TStringKey, setData *TItemSet) (r bool, err error) {
  var _args138 TStringBSListI64ServiceBsBulkLoadArgs
  _args138.BsName = bsName
  _args138.SetData = setData
  var _result139 TStringBSListI64ServiceBsBulkLoadResult
  if err = p.Client_().Call(ctx, "bsBulkLoad", &_args138, &_result139); err != nil {
    return
  }
  return _result139.GetSuccess(), nil
}

// Parameters:
//  - BsName
//  - SetData
//  - GetAddedItems
//  - GetReplacedItems
func (p *TStringBSListI64ServiceClient) BsMultiPut(ctx context.Context, bsName TStringKey, setData *TItemSet, getAddedItems bool, getReplacedItems bool) (r *TMultiPutItemResult_, err error) {
  var _args140 TStringBSListI64ServiceBsMultiPutArgs
  _args140.BsName = bsName
  _args140.SetData = setData
  _args140.GetAddedItems = getAddedItems
  _args140.GetReplacedItems = getReplacedItems
  var _result141 TStringBSListI64ServiceBsMultiPutResult
  if err = p.Client_().Call(ctx, "bsMultiPut", &_args140, &_result141); err != nil {
    return
  }
  return _result141.GetSuccess(), nil
}

// Parameters:
//  - BsName
func (p *TStringBSListI64ServiceClient) GetTotalCount(ctx context.Context, bsName TStringKey) (r int64, err error) {
  var _args142 TStringBSListI64ServiceGetTotalCountArgs
  _args142.BsName = bsName
  var _result143 TStringBSListI64ServiceGetTotalCountResult
  if err = p.Client_().Call(ctx, "getTotalCount", &_args142, &_result143); err != nil {
    return
  }
  return _result143.GetSuccess(), nil
}

// Parameters:
//  - BsName
func (p *TStringBSListI64ServiceClient) RemoveAll(ctx context.Context, bsName TStringKey) (r int64, err error) {
  var _args144 TStringBSListI64ServiceRemoveAllArgs
  _args144.BsName = bsName
  var _result145 TStringBSListI64ServiceRemoveAllResult
  if err = p.Client_().Call(ctx, "removeAll", &_args144, &_result145); err != nil {
    return
  }
  return _result145.GetSuccess(), nil
}

func (p *TStringBSListI64ServiceClient) TotalStringKeyCount(ctx context.Context) (r int64, err error) {
  var _args146 TStringBSListI64ServiceTotalStringKeyCountArgs
  var _result147 TStringBSListI64ServiceTotalStringKeyCountResult
  if err = p.Client_().Call(ctx, "totalStringKeyCount", &_args146, &_result147); err != nil {
    return
  }
  return _result147.GetSuccess(), nil
}

// Parameters:
//  - FromIndex
//  - Count
func (p *TStringBSListI64ServiceClient) GetListKey(ctx context.Context, fromIndex int64, count int32) (r []TStringKey, err error) {
  var _args148 TStringBSListI64ServiceGetListKeyArgs
  _args148.FromIndex = fromIndex
  _args148.Count = count
  var _result149 TStringBSListI64ServiceGetListKeyResult
  if err = p.Client_().Call(ctx, "getListKey", &_args148, &_result149); err != nil {
    return
  }
  return _result149.GetSuccess(), nil
}

// Parameters:
//  - KeyFrom
//  - Count
func (p *TStringBSListI64ServiceClient) GetListKeyFrom(ctx context.Context, keyFrom TStringKey, count int32) (r []TStringKey, err error) {
  var _args150 TStringBSListI64ServiceGetListKeyFromArgs
  _args150.KeyFrom = keyFrom
  _args150.Count = count
  var _result151 TStringBSListI64ServiceGetListKeyFromResult
  if err = p.Client_().Call(ctx, "getListKeyFrom", &_args150, &_result151); err != nil {
    return
  }
  return _result151.GetSuccess(), nil
}

type TStringBSListI64ServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler TStringBSListI64Service
}

func (p *TStringBSListI64ServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *TStringBSListI64ServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *TStringBSListI64ServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewTStringBSListI64ServiceProcessor(handler TStringBSListI64Service) *TStringBSListI64ServiceProcessor {

  self152 := &TStringBSListI64ServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self152.processorMap["createStringBigSet"] = &tStringBSListI64ServiceProcessorCreateStringBigSet{handler:handler}
  self152.processorMap["getBigSetInfoByName"] = &tStringBSListI64ServiceProcessorGetBigSetInfoByName{handler:handler}
  self152.processorMap["assignBigSetName"] = &tStringBSListI64ServiceProcessorAssignBigSetName{handler:handler}
  self152.processorMap["bsPutItem"] = &tStringBSListI64ServiceProcessorBsPutItem{handler:handler}
  self152.processorMap["addChildItem"] = &tStringBSListI64ServiceProcessorAddChildItem{handler:handler}
  self152.processorMap["addChildrenItem"] = &tStringBSListI64ServiceProcessorAddChildrenItem{handler:handler}
  self152.processorMap["removeChildItem"] = &tStringBSListI64ServiceProcessorRemoveChildItem{handler:handler}
  self152.processorMap["bsRemoveItem"] = &tStringBSListI64ServiceProcessorBsRemoveItem{handler:handler}
  self152.processorMap["bsExisted"] = &tStringBSListI64ServiceProcessorBsExisted{handler:handler}
  self152.processorMap["bsGetItem"] = &tStringBSListI64ServiceProcessorBsGetItem{handler:handler}
  self152.processorMap["bsGetSlice"] = &tStringBSListI64ServiceProcessorBsGetSlice{handler:handler}
  self152.processorMap["bsGetSliceFromItem"] = &tStringBSListI64ServiceProcessorBsGetSliceFromItem{handler:handler}
  self152.processorMap["bsGetSliceR"] = &tStringBSListI64ServiceProcessorBsGetSliceR{handler:handler}
  self152.processorMap["bsGetSliceFromItemR"] = &tStringBSListI64ServiceProcessorBsGetSliceFromItemR{handler:handler}
  self152.processorMap["bsRangeQuery"] = &tStringBSListI64ServiceProcessorBsRangeQuery{handler:handler}
  self152.processorMap["bsBulkLoad"] = &tStringBSListI64ServiceProcessorBsBulkLoad{handler:handler}
  self152.processorMap["bsMultiPut"] = &tStringBSListI64ServiceProcessorBsMultiPut{handler:handler}
  self152.processorMap["getTotalCount"] = &tStringBSListI64ServiceProcessorGetTotalCount{handler:handler}
  self152.processorMap["removeAll"] = &tStringBSListI64ServiceProcessorRemoveAll{handler:handler}
  self152.processorMap["totalStringKeyCount"] = &tStringBSListI64ServiceProcessorTotalStringKeyCount{handler:handler}
  self152.processorMap["getListKey"] = &tStringBSListI64ServiceProcessorGetListKey{handler:handler}
  self152.processorMap["getListKeyFrom"] = &tStringBSListI64ServiceProcessorGetListKeyFrom{handler:handler}
return self152
}

func (p *TStringBSListI64ServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x153 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x153.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush(ctx)
  return false, x153

}

type tStringBSListI64ServiceProcessorCreateStringBigSet struct {
  handler TStringBSListI64Service
}

func (p *tStringBSListI64ServiceProcessorCreateStringBigSet) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TStringBSListI64ServiceCreateStringBigSetArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("createStringBigSet", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TStringBSListI64ServiceCreateStringBigSetResult{}
var retval *TBigSetInfoResult_
  var err2 error
  if retval, err2 = p.handler.CreateStringBigSet(ctx, args.BsName); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing createStringBigSet: " + err2.Error())
    oprot.WriteMessageBegin("createStringBigSet", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("createStringBigSet", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tStringBSListI64ServiceProcessorGetBigSetInfoByName struct {
  handler TStringBSListI64Service
}

func (p *tStringBSListI64ServiceProcessorGetBigSetInfoByName) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TStringBSListI64ServiceGetBigSetInfoByNameArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getBigSetInfoByName", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TStringBSListI64ServiceGetBigSetInfoByNameResult{}
var retval *TBigSetInfoResult_
  var err2 error
  if retval, err2 = p.handler.GetBigSetInfoByName(ctx, args.BsName); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getBigSetInfoByName: " + err2.Error())
    oprot.WriteMessageBegin("getBigSetInfoByName", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getBigSetInfoByName", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tStringBSListI64ServiceProcessorAssignBigSetName struct {
  handler TStringBSListI64Service
}

func (p *tStringBSListI64ServiceProcessorAssignBigSetName) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TStringBSListI64ServiceAssignBigSetNameArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("assignBigSetName", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TStringBSListI64ServiceAssignBigSetNameResult{}
var retval *TBigSetInfoResult_
  var err2 error
  if retval, err2 = p.handler.AssignBigSetName(ctx, args.BsName, args.BigsetID); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing assignBigSetName: " + err2.Error())
    oprot.WriteMessageBegin("assignBigSetName", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("assignBigSetName", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tStringBSListI64ServiceProcessorBsPutItem struct {
  handler TStringBSListI64Service
}

func (p *tStringBSListI64ServiceProcessorBsPutItem) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TStringBSListI64ServiceBsPutItemArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("bsPutItem", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TStringBSListI64ServiceBsPutItemResult{}
var retval *TPutItemResult_
  var err2 error
  if retval, err2 = p.handler.BsPutItem(ctx, args.BsName, args.Item); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing bsPutItem: " + err2.Error())
    oprot.WriteMessageBegin("bsPutItem", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("bsPutItem", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tStringBSListI64ServiceProcessorAddChildItem struct {
  handler TStringBSListI64Service
}

func (p *tStringBSListI64ServiceProcessorAddChildItem) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TStringBSListI64ServiceAddChildItemArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("addChildItem", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TStringBSListI64ServiceAddChildItemResult{}
var retval *TChildItemResult_
  var err2 error
  if retval, err2 = p.handler.AddChildItem(ctx, args.BsName, args.ItemKey, args.AChild, args.OpOption); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing addChildItem: " + err2.Error())
    oprot.WriteMessageBegin("addChildItem", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("addChildItem", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tStringBSListI64ServiceProcessorAddChildrenItem struct {
  handler TStringBSListI64Service
}

func (p *tStringBSListI64ServiceProcessorAddChildrenItem) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TStringBSListI64ServiceAddChildrenItemArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("addChildrenItem", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TStringBSListI64ServiceAddChildrenItemResult{}
var retval *TChildItemResult_
  var err2 error
  if retval, err2 = p.handler.AddChildrenItem(ctx, args.BsName, args.ItemKey, args.AChild, args.OpOption); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing addChildrenItem: " + err2.Error())
    oprot.WriteMessageBegin("addChildrenItem", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("addChildrenItem", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tStringBSListI64ServiceProcessorRemoveChildItem struct {
  handler TStringBSListI64Service
}

func (p *tStringBSListI64ServiceProcessorRemoveChildItem) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TStringBSListI64ServiceRemoveChildItemArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("removeChildItem", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TStringBSListI64ServiceRemoveChildItemResult{}
var retval *TChildItemResult_
  var err2 error
  if retval, err2 = p.handler.RemoveChildItem(ctx, args.BsName, args.ItemKey, args.AChild, args.OpOption); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing removeChildItem: " + err2.Error())
    oprot.WriteMessageBegin("removeChildItem", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("removeChildItem", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tStringBSListI64ServiceProcessorBsRemoveItem struct {
  handler TStringBSListI64Service
}

func (p *tStringBSListI64ServiceProcessorBsRemoveItem) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TStringBSListI64ServiceBsRemoveItemArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("bsRemoveItem", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TStringBSListI64ServiceBsRemoveItemResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.BsRemoveItem(ctx, args.BsName, args.ItemKey); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing bsRemoveItem: " + err2.Error())
    oprot.WriteMessageBegin("bsRemoveItem", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("bsRemoveItem", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tStringBSListI64ServiceProcessorBsExisted struct {
  handler TStringBSListI64Service
}

func (p *tStringBSListI64ServiceProcessorBsExisted) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TStringBSListI64ServiceBsExistedArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("bsExisted", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TStringBSListI64ServiceBsExistedResult{}
var retval *TExistedResult_
  var err2 error
  if retval, err2 = p.handler.BsExisted(ctx, args.BsName, args.ItemKey); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing bsExisted: " + err2.Error())
    oprot.WriteMessageBegin("bsExisted", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("bsExisted", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tStringBSListI64ServiceProcessorBsGetItem struct {
  handler TStringBSListI64Service
}

func (p *tStringBSListI64ServiceProcessorBsGetItem) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TStringBSListI64ServiceBsGetItemArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("bsGetItem", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TStringBSListI64ServiceBsGetItemResult{}
var retval *TItemResult_
  var err2 error
  if retval, err2 = p.handler.BsGetItem(ctx, args.BsName, args.ItemKey); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing bsGetItem: " + err2.Error())
    oprot.WriteMessageBegin("bsGetItem", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("bsGetItem", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tStringBSListI64ServiceProcessorBsGetSlice struct {
  handler TStringBSListI64Service
}

func (p *tStringBSListI64ServiceProcessorBsGetSlice) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TStringBSListI64ServiceBsGetSliceArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("bsGetSlice", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TStringBSListI64ServiceBsGetSliceResult{}
var retval *TItemSetResult_
  var err2 error
  if retval, err2 = p.handler.BsGetSlice(ctx, args.BsName, args.FromPos, args.Count); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing bsGetSlice: " + err2.Error())
    oprot.WriteMessageBegin("bsGetSlice", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("bsGetSlice", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tStringBSListI64ServiceProcessorBsGetSliceFromItem struct {
  handler TStringBSListI64Service
}

func (p *tStringBSListI64ServiceProcessorBsGetSliceFromItem) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TStringBSListI64ServiceBsGetSliceFromItemArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("bsGetSliceFromItem", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TStringBSListI64ServiceBsGetSliceFromItemResult{}
var retval *TItemSetResult_
  var err2 error
  if retval, err2 = p.handler.BsGetSliceFromItem(ctx, args.BsName, args.FromKey, args.Count); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing bsGetSliceFromItem: " + err2.Error())
    oprot.WriteMessageBegin("bsGetSliceFromItem", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("bsGetSliceFromItem", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tStringBSListI64ServiceProcessorBsGetSliceR struct {
  handler TStringBSListI64Service
}

func (p *tStringBSListI64ServiceProcessorBsGetSliceR) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TStringBSListI64ServiceBsGetSliceRArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("bsGetSliceR", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TStringBSListI64ServiceBsGetSliceRResult{}
var retval *TItemSetResult_
  var err2 error
  if retval, err2 = p.handler.BsGetSliceR(ctx, args.BsName, args.FromPos, args.Count); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing bsGetSliceR: " + err2.Error())
    oprot.WriteMessageBegin("bsGetSliceR", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("bsGetSliceR", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tStringBSListI64ServiceProcessorBsGetSliceFromItemR struct {
  handler TStringBSListI64Service
}

func (p *tStringBSListI64ServiceProcessorBsGetSliceFromItemR) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TStringBSListI64ServiceBsGetSliceFromItemRArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("bsGetSliceFromItemR", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TStringBSListI64ServiceBsGetSliceFromItemRResult{}
var retval *TItemSetResult_
  var err2 error
  if retval, err2 = p.handler.BsGetSliceFromItemR(ctx, args.BsName, args.FromKey, args.Count); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing bsGetSliceFromItemR: " + err2.Error())
    oprot.WriteMessageBegin("bsGetSliceFromItemR", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("bsGetSliceFromItemR", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tStringBSListI64ServiceProcessorBsRangeQuery struct {
  handler TStringBSListI64Service
}

func (p *tStringBSListI64ServiceProcessorBsRangeQuery) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TStringBSListI64ServiceBsRangeQueryArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("bsRangeQuery", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TStringBSListI64ServiceBsRangeQueryResult{}
var retval *TItemSetResult_
  var err2 error
  if retval, err2 = p.handler.BsRangeQuery(ctx, args.BsName, args.StartKey, args.EndKey); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing bsRangeQuery: " + err2.Error())
    oprot.WriteMessageBegin("bsRangeQuery", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("bsRangeQuery", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tStringBSListI64ServiceProcessorBsBulkLoad struct {
  handler TStringBSListI64Service
}

func (p *tStringBSListI64ServiceProcessorBsBulkLoad) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TStringBSListI64ServiceBsBulkLoadArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("bsBulkLoad", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TStringBSListI64ServiceBsBulkLoadResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.BsBulkLoad(ctx, args.BsName, args.SetData); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing bsBulkLoad: " + err2.Error())
    oprot.WriteMessageBegin("bsBulkLoad", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("bsBulkLoad", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tStringBSListI64ServiceProcessorBsMultiPut struct {
  handler TStringBSListI64Service
}

func (p *tStringBSListI64ServiceProcessorBsMultiPut) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TStringBSListI64ServiceBsMultiPutArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("bsMultiPut", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TStringBSListI64ServiceBsMultiPutResult{}
var retval *TMultiPutItemResult_
  var err2 error
  if retval, err2 = p.handler.BsMultiPut(ctx, args.BsName, args.SetData, args.GetAddedItems, args.GetReplacedItems); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing bsMultiPut: " + err2.Error())
    oprot.WriteMessageBegin("bsMultiPut", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("bsMultiPut", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tStringBSListI64ServiceProcessorGetTotalCount struct {
  handler TStringBSListI64Service
}

func (p *tStringBSListI64ServiceProcessorGetTotalCount) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TStringBSListI64ServiceGetTotalCountArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getTotalCount", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TStringBSListI64ServiceGetTotalCountResult{}
var retval int64
  var err2 error
  if retval, err2 = p.handler.GetTotalCount(ctx, args.BsName); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getTotalCount: " + err2.Error())
    oprot.WriteMessageBegin("getTotalCount", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("getTotalCount", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tStringBSListI64ServiceProcessorRemoveAll struct {
  handler TStringBSListI64Service
}

func (p *tStringBSListI64ServiceProcessorRemoveAll) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TStringBSListI64ServiceRemoveAllArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("removeAll", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TStringBSListI64ServiceRemoveAllResult{}
var retval int64
  var err2 error
  if retval, err2 = p.handler.RemoveAll(ctx, args.BsName); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing removeAll: " + err2.Error())
    oprot.WriteMessageBegin("removeAll", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("removeAll", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tStringBSListI64ServiceProcessorTotalStringKeyCount struct {
  handler TStringBSListI64Service
}

func (p *tStringBSListI64ServiceProcessorTotalStringKeyCount) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TStringBSListI64ServiceTotalStringKeyCountArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("totalStringKeyCount", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TStringBSListI64ServiceTotalStringKeyCountResult{}
var retval int64
  var err2 error
  if retval, err2 = p.handler.TotalStringKeyCount(ctx); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing totalStringKeyCount: " + err2.Error())
    oprot.WriteMessageBegin("totalStringKeyCount", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("totalStringKeyCount", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tStringBSListI64ServiceProcessorGetListKey struct {
  handler TStringBSListI64Service
}

func (p *tStringBSListI64ServiceProcessorGetListKey) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TStringBSListI64ServiceGetListKeyArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getListKey", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TStringBSListI64ServiceGetListKeyResult{}
var retval []TStringKey
  var err2 error
  if retval, err2 = p.handler.GetListKey(ctx, args.FromIndex, args.Count); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getListKey: " + err2.Error())
    oprot.WriteMessageBegin("getListKey", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getListKey", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tStringBSListI64ServiceProcessorGetListKeyFrom struct {
  handler TStringBSListI64Service
}

func (p *tStringBSListI64ServiceProcessorGetListKeyFrom) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TStringBSListI64ServiceGetListKeyFromArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getListKeyFrom", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TStringBSListI64ServiceGetListKeyFromResult{}
var retval []TStringKey
  var err2 error
  if retval, err2 = p.handler.GetListKeyFrom(ctx, args.KeyFrom, args.Count); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getListKeyFrom: " + err2.Error())
    oprot.WriteMessageBegin("getListKeyFrom", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getListKeyFrom", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - BsName
type TStringBSListI64ServiceCreateStringBigSetArgs struct {
  BsName TStringKey `thrift:"bsName,1" db:"bsName" json:"bsName"`
}

func NewTStringBSListI64ServiceCreateStringBigSetArgs() *TStringBSListI64ServiceCreateStringBigSetArgs {
  return &TStringBSListI64ServiceCreateStringBigSetArgs{}
}


func (p *TStringBSListI64ServiceCreateStringBigSetArgs) GetBsName() TStringKey {
  return p.BsName
}
func (p *TStringBSListI64ServiceCreateStringBigSetArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TStringBSListI64ServiceCreateStringBigSetArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TStringKey(v)
  p.BsName = temp
}
  return nil
}

func (p *TStringBSListI64ServiceCreateStringBigSetArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("createStringBigSet_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TStringBSListI64ServiceCreateStringBigSetArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("bsName", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:bsName: ", p), err) }
  if err := oprot.WriteString(string(p.BsName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.bsName (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:bsName: ", p), err) }
  return err
}

func (p *TStringBSListI64ServiceCreateStringBigSetArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TStringBSListI64ServiceCreateStringBigSetArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TStringBSListI64ServiceCreateStringBigSetResult struct {
  Success *TBigSetInfoResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTStringBSListI64ServiceCreateStringBigSetResult() *TStringBSListI64ServiceCreateStringBigSetResult {
  return &TStringBSListI64ServiceCreateStringBigSetResult{}
}

var TStringBSListI64ServiceCreateStringBigSetResult_Success_DEFAULT *TBigSetInfoResult_
func (p *TStringBSListI64ServiceCreateStringBigSetResult) GetSuccess() *TBigSetInfoResult_ {
  if !p.IsSetSuccess() {
    return TStringBSListI64ServiceCreateStringBigSetResult_Success_DEFAULT
  }
return p.Success
}
func (p *TStringBSListI64ServiceCreateStringBigSetResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TStringBSListI64ServiceCreateStringBigSetResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TStringBSListI64ServiceCreateStringBigSetResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TBigSetInfoResult_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TStringBSListI64ServiceCreateStringBigSetResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("createStringBigSet_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TStringBSListI64ServiceCreateStringBigSetResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TStringBSListI64ServiceCreateStringBigSetResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TStringBSListI64ServiceCreateStringBigSetResult(%+v)", *p)
}

// Attributes:
//  - BsName
type TStringBSListI64ServiceGetBigSetInfoByNameArgs struct {
  BsName TStringKey `thrift:"bsName,1" db:"bsName" json:"bsName"`
}

func NewTStringBSListI64ServiceGetBigSetInfoByNameArgs() *TStringBSListI64ServiceGetBigSetInfoByNameArgs {
  return &TStringBSListI64ServiceGetBigSetInfoByNameArgs{}
}


func (p *TStringBSListI64ServiceGetBigSetInfoByNameArgs) GetBsName() TStringKey {
  return p.BsName
}
func (p *TStringBSListI64ServiceGetBigSetInfoByNameArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TStringBSListI64ServiceGetBigSetInfoByNameArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TStringKey(v)
  p.BsName = temp
}
  return nil
}

func (p *TStringBSListI64ServiceGetBigSetInfoByNameArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getBigSetInfoByName_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TStringBSListI64ServiceGetBigSetInfoByNameArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("bsName", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:bsName: ", p), err) }
  if err := oprot.WriteString(string(p.BsName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.bsName (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:bsName: ", p), err) }
  return err
}

func (p *TStringBSListI64ServiceGetBigSetInfoByNameArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TStringBSListI64ServiceGetBigSetInfoByNameArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TStringBSListI64ServiceGetBigSetInfoByNameResult struct {
  Success *TBigSetInfoResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTStringBSListI64ServiceGetBigSetInfoByNameResult() *TStringBSListI64ServiceGetBigSetInfoByNameResult {
  return &TStringBSListI64ServiceGetBigSetInfoByNameResult{}
}

var TStringBSListI64ServiceGetBigSetInfoByNameResult_Success_DEFAULT *TBigSetInfoResult_
func (p *TStringBSListI64ServiceGetBigSetInfoByNameResult) GetSuccess() *TBigSetInfoResult_ {
  if !p.IsSetSuccess() {
    return TStringBSListI64ServiceGetBigSetInfoByNameResult_Success_DEFAULT
  }
return p.Success
}
func (p *TStringBSListI64ServiceGetBigSetInfoByNameResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TStringBSListI64ServiceGetBigSetInfoByNameResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TStringBSListI64ServiceGetBigSetInfoByNameResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TBigSetInfoResult_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TStringBSListI64ServiceGetBigSetInfoByNameResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getBigSetInfoByName_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TStringBSListI64ServiceGetBigSetInfoByNameResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TStringBSListI64ServiceGetBigSetInfoByNameResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TStringBSListI64ServiceGetBigSetInfoByNameResult(%+v)", *p)
}

// Attributes:
//  - BsName
//  - BigsetID
type TStringBSListI64ServiceAssignBigSetNameArgs struct {
  BsName TStringKey `thrift:"bsName,1" db:"bsName" json:"bsName"`
  BigsetID TContainerKey `thrift:"bigsetID,2" db:"bigsetID" json:"bigsetID"`
}

func NewTStringBSListI64ServiceAssignBigSetNameArgs() *TStringBSListI64ServiceAssignBigSetNameArgs {
  return &TStringBSListI64ServiceAssignBigSetNameArgs{}
}


func (p *TStringBSListI64ServiceAssignBigSetNameArgs) GetBsName() TStringKey {
  return p.BsName
}

func (p *TStringBSListI64ServiceAssignBigSetNameArgs) GetBigsetID() TContainerKey {
  return p.BigsetID
}
func (p *TStringBSListI64ServiceAssignBigSetNameArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TStringBSListI64ServiceAssignBigSetNameArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TStringKey(v)
  p.BsName = temp
}
  return nil
}

func (p *TStringBSListI64ServiceAssignBigSetNameArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := TContainerKey(v)
  p.BigsetID = temp
}
  return nil
}

func (p *TStringBSListI64ServiceAssignBigSetNameArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("assignBigSetName_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TStringBSListI64ServiceAssignBigSetNameArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("bsName", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:bsName: ", p), err) }
  if err := oprot.WriteString(string(p.BsName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.bsName (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:bsName: ", p), err) }
  return err
}

func (p *TStringBSListI64ServiceAssignBigSetNameArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("bigsetID", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:bigsetID: ", p), err) }
  if err := oprot.WriteI64(int64(p.BigsetID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.bigsetID (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:bigsetID: ", p), err) }
  return err
}

func (p *TStringBSListI64ServiceAssignBigSetNameArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TStringBSListI64ServiceAssignBigSetNameArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TStringBSListI64ServiceAssignBigSetNameResult struct {
  Success *TBigSetInfoResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTStringBSListI64ServiceAssignBigSetNameResult() *TStringBSListI64ServiceAssignBigSetNameResult {
  return &TStringBSListI64ServiceAssignBigSetNameResult{}
}

var TStringBSListI64ServiceAssignBigSetNameResult_Success_DEFAULT *TBigSetInfoResult_
func (p *TStringBSListI64ServiceAssignBigSetNameResult) GetSuccess() *TBigSetInfoResult_ {
  if !p.IsSetSuccess() {
    return TStringBSListI64ServiceAssignBigSetNameResult_Success_DEFAULT
  }
return p.Success
}
func (p *TStringBSListI64ServiceAssignBigSetNameResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TStringBSListI64ServiceAssignBigSetNameResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TStringBSListI64ServiceAssignBigSetNameResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TBigSetInfoResult_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TStringBSListI64ServiceAssignBigSetNameResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("assignBigSetName_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TStringBSListI64ServiceAssignBigSetNameResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TStringBSListI64ServiceAssignBigSetNameResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TStringBSListI64ServiceAssignBigSetNameResult(%+v)", *p)
}

// Attributes:
//  - BsName
//  - Item
type TStringBSListI64ServiceBsPutItemArgs struct {
  BsName TStringKey `thrift:"bsName,1" db:"bsName" json:"bsName"`
  Item *TItem `thrift:"item,2" db:"item" json:"item"`
}

func NewTStringBSListI64ServiceBsPutItemArgs() *TStringBSListI64ServiceBsPutItemArgs {
  return &TStringBSListI64ServiceBsPutItemArgs{}
}


func (p *TStringBSListI64ServiceBsPutItemArgs) GetBsName() TStringKey {
  return p.BsName
}
var TStringBSListI64ServiceBsPutItemArgs_Item_DEFAULT *TItem
func (p *TStringBSListI64ServiceBsPutItemArgs) GetItem() *TItem {
  if !p.IsSetItem() {
    return TStringBSListI64ServiceBsPutItemArgs_Item_DEFAULT
  }
return p.Item
}
func (p *TStringBSListI64ServiceBsPutItemArgs) IsSetItem() bool {
  return p.Item != nil
}

func (p *TStringBSListI64ServiceBsPutItemArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TStringBSListI64ServiceBsPutItemArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TStringKey(v)
  p.BsName = temp
}
  return nil
}

func (p *TStringBSListI64ServiceBsPutItemArgs)  ReadField2(iprot thrift.TProtocol) error {
  p.Item = &TItem{}
  if err := p.Item.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Item), err)
  }
  return nil
}

func (p *TStringBSListI64ServiceBsPutItemArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("bsPutItem_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TStringBSListI64ServiceBsPutItemArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("bsName", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:bsName: ", p), err) }
  if err := oprot.WriteString(string(p.BsName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.bsName (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:bsName: ", p), err) }
  return err
}

func (p *TStringBSListI64ServiceBsPutItemArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("item", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:item: ", p), err) }
  if err := p.Item.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Item), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:item: ", p), err) }
  return err
}

func (p *TStringBSListI64ServiceBsPutItemArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TStringBSListI64ServiceBsPutItemArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TStringBSListI64ServiceBsPutItemResult struct {
  Success *TPutItemResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTStringBSListI64ServiceBsPutItemResult() *TStringBSListI64ServiceBsPutItemResult {
  return &TStringBSListI64ServiceBsPutItemResult{}
}

var TStringBSListI64ServiceBsPutItemResult_Success_DEFAULT *TPutItemResult_
func (p *TStringBSListI64ServiceBsPutItemResult) GetSuccess() *TPutItemResult_ {
  if !p.IsSetSuccess() {
    return TStringBSListI64ServiceBsPutItemResult_Success_DEFAULT
  }
return p.Success
}
func (p *TStringBSListI64ServiceBsPutItemResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TStringBSListI64ServiceBsPutItemResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TStringBSListI64ServiceBsPutItemResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TPutItemResult_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TStringBSListI64ServiceBsPutItemResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("bsPutItem_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TStringBSListI64ServiceBsPutItemResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TStringBSListI64ServiceBsPutItemResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TStringBSListI64ServiceBsPutItemResult(%+v)", *p)
}

// Attributes:
//  - BsName
//  - ItemKey
//  - AChild
//  - OpOption
type TStringBSListI64ServiceAddChildItemArgs struct {
  BsName TStringKey `thrift:"bsName,1" db:"bsName" json:"bsName"`
  ItemKey TItemKey `thrift:"itemKey,2" db:"itemKey" json:"itemKey"`
  AChild TItemChild `thrift:"aChild,3" db:"aChild" json:"aChild"`
  OpOption TChildItemOptions `thrift:"opOption,4" db:"opOption" json:"opOption"`
}

func NewTStringBSListI64ServiceAddChildItemArgs() *TStringBSListI64ServiceAddChildItemArgs {
  return &TStringBSListI64ServiceAddChildItemArgs{}
}


func (p *TStringBSListI64ServiceAddChildItemArgs) GetBsName() TStringKey {
  return p.BsName
}

func (p *TStringBSListI64ServiceAddChildItemArgs) GetItemKey() TItemKey {
  return p.ItemKey
}

func (p *TStringBSListI64ServiceAddChildItemArgs) GetAChild() TItemChild {
  return p.AChild
}

func (p *TStringBSListI64ServiceAddChildItemArgs) GetOpOption() TChildItemOptions {
  return p.OpOption
}
func (p *TStringBSListI64ServiceAddChildItemArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TStringBSListI64ServiceAddChildItemArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TStringKey(v)
  p.BsName = temp
}
  return nil
}

func (p *TStringBSListI64ServiceAddChildItemArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := TItemKey(v)
  p.ItemKey = temp
}
  return nil
}

func (p *TStringBSListI64ServiceAddChildItemArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := TItemChild(v)
  p.AChild = temp
}
  return nil
}

func (p *TStringBSListI64ServiceAddChildItemArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  temp := TChildItemOptions(v)
  p.OpOption = temp
}
  return nil
}

func (p *TStringBSListI64ServiceAddChildItemArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("addChildItem_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TStringBSListI64ServiceAddChildItemArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("bsName", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:bsName: ", p), err) }
  if err := oprot.WriteString(string(p.BsName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.bsName (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:bsName: ", p), err) }
  return err
}

func (p *TStringBSListI64ServiceAddChildItemArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("itemKey", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:itemKey: ", p), err) }
  if err := oprot.WriteBinary(p.ItemKey); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.itemKey (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:itemKey: ", p), err) }
  return err
}

func (p *TStringBSListI64ServiceAddChildItemArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("aChild", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:aChild: ", p), err) }
  if err := oprot.WriteI64(int64(p.AChild)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.aChild (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:aChild: ", p), err) }
  return err
}

func (p *TStringBSListI64ServiceAddChildItemArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("opOption", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:opOption: ", p), err) }
  if err := oprot.WriteI32(int32(p.OpOption)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.opOption (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:opOption: ", p), err) }
  return err
}

func (p *TStringBSListI64ServiceAddChildItemArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TStringBSListI64ServiceAddChildItemArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TStringBSListI64ServiceAddChildItemResult struct {
  Success *TChildItemResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTStringBSListI64ServiceAddChildItemResult() *TStringBSListI64ServiceAddChildItemResult {
  return &TStringBSListI64ServiceAddChildItemResult{}
}

var TStringBSListI64ServiceAddChildItemResult_Success_DEFAULT *TChildItemResult_
func (p *TStringBSListI64ServiceAddChildItemResult) GetSuccess() *TChildItemResult_ {
  if !p.IsSetSuccess() {
    return TStringBSListI64ServiceAddChildItemResult_Success_DEFAULT
  }
return p.Success
}
func (p *TStringBSListI64ServiceAddChildItemResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TStringBSListI64ServiceAddChildItemResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TStringBSListI64ServiceAddChildItemResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TChildItemResult_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TStringBSListI64ServiceAddChildItemResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("addChildItem_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TStringBSListI64ServiceAddChildItemResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TStringBSListI64ServiceAddChildItemResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TStringBSListI64ServiceAddChildItemResult(%+v)", *p)
}

// Attributes:
//  - BsName
//  - ItemKey
//  - AChild
//  - OpOption
type TStringBSListI64ServiceAddChildrenItemArgs struct {
  BsName TStringKey `thrift:"bsName,1" db:"bsName" json:"bsName"`
  ItemKey TItemKey `thrift:"itemKey,2" db:"itemKey" json:"itemKey"`
  AChild []TItemChild `thrift:"aChild,3" db:"aChild" json:"aChild"`
  OpOption TChildItemOptions `thrift:"opOption,4" db:"opOption" json:"opOption"`
}

func NewTStringBSListI64ServiceAddChildrenItemArgs() *TStringBSListI64ServiceAddChildrenItemArgs {
  return &TStringBSListI64ServiceAddChildrenItemArgs{}
}


func (p *TStringBSListI64ServiceAddChildrenItemArgs) GetBsName() TStringKey {
  return p.BsName
}

func (p *TStringBSListI64ServiceAddChildrenItemArgs) GetItemKey() TItemKey {
  return p.ItemKey
}

func (p *TStringBSListI64ServiceAddChildrenItemArgs) GetAChild() []TItemChild {
  return p.AChild
}

func (p *TStringBSListI64ServiceAddChildrenItemArgs) GetOpOption() TChildItemOptions {
  return p.OpOption
}
func (p *TStringBSListI64ServiceAddChildrenItemArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TStringBSListI64ServiceAddChildrenItemArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TStringKey(v)
  p.BsName = temp
}
  return nil
}

func (p *TStringBSListI64ServiceAddChildrenItemArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := TItemKey(v)
  p.ItemKey = temp
}
  return nil
}

func (p *TStringBSListI64ServiceAddChildrenItemArgs)  ReadField3(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]TItemChild, 0, size)
  p.AChild =  tSlice
  for i := 0; i < size; i ++ {
var _elem154 TItemChild
    if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := TItemChild(v)
    _elem154 = temp
}
    p.AChild = append(p.AChild, _elem154)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TStringBSListI64ServiceAddChildrenItemArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  temp := TChildItemOptions(v)
  p.OpOption = temp
}
  return nil
}

func (p *TStringBSListI64ServiceAddChildrenItemArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("addChildrenItem_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TStringBSListI64ServiceAddChildrenItemArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("bsName", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:bsName: ", p), err) }
  if err := oprot.WriteString(string(p.BsName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.bsName (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:bsName: ", p), err) }
  return err
}

func (p *TStringBSListI64ServiceAddChildrenItemArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("itemKey", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:itemKey: ", p), err) }
  if err := oprot.WriteBinary(p.ItemKey); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.itemKey (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:itemKey: ", p), err) }
  return err
}

func (p *TStringBSListI64ServiceAddChildrenItemArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("aChild", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:aChild: ", p), err) }
  if err := oprot.WriteListBegin(thrift.I64, len(p.AChild)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.AChild {
    if err := oprot.WriteI64(int64(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:aChild: ", p), err) }
  return err
}

func (p *TStringBSListI64ServiceAddChildrenItemArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("opOption", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:opOption: ", p), err) }
  if err := oprot.WriteI32(int32(p.OpOption)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.opOption (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:opOption: ", p), err) }
  return err
}

func (p *TStringBSListI64ServiceAddChildrenItemArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TStringBSListI64ServiceAddChildrenItemArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TStringBSListI64ServiceAddChildrenItemResult struct {
  Success *TChildItemResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTStringBSListI64ServiceAddChildrenItemResult() *TStringBSListI64ServiceAddChildrenItemResult {
  return &TStringBSListI64ServiceAddChildrenItemResult{}
}

var TStringBSListI64ServiceAddChildrenItemResult_Success_DEFAULT *TChildItemResult_
func (p *TStringBSListI64ServiceAddChildrenItemResult) GetSuccess() *TChildItemResult_ {
  if !p.IsSetSuccess() {
    return TStringBSListI64ServiceAddChildrenItemResult_Success_DEFAULT
  }
return p.Success
}
func (p *TStringBSListI64ServiceAddChildrenItemResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TStringBSListI64ServiceAddChildrenItemResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TStringBSListI64ServiceAddChildrenItemResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TChildItemResult_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TStringBSListI64ServiceAddChildrenItemResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("addChildrenItem_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TStringBSListI64ServiceAddChildrenItemResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TStringBSListI64ServiceAddChildrenItemResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TStringBSListI64ServiceAddChildrenItemResult(%+v)", *p)
}

// Attributes:
//  - BsName
//  - ItemKey
//  - AChild
//  - OpOption
type TStringBSListI64ServiceRemoveChildItemArgs struct {
  BsName TStringKey `thrift:"bsName,1" db:"bsName" json:"bsName"`
  ItemKey TItemKey `thrift:"itemKey,2" db:"itemKey" json:"itemKey"`
  AChild TItemChild `thrift:"aChild,3" db:"aChild" json:"aChild"`
  OpOption TChildItemOptions `thrift:"opOption,4" db:"opOption" json:"opOption"`
}

func NewTStringBSListI64ServiceRemoveChildItemArgs() *TStringBSListI64ServiceRemoveChildItemArgs {
  return &TStringBSListI64ServiceRemoveChildItemArgs{}
}


func (p *TStringBSListI64ServiceRemoveChildItemArgs) GetBsName() TStringKey {
  return p.BsName
}

func (p *TStringBSListI64ServiceRemoveChildItemArgs) GetItemKey() TItemKey {
  return p.ItemKey
}

func (p *TStringBSListI64ServiceRemoveChildItemArgs) GetAChild() TItemChild {
  return p.AChild
}

func (p *TStringBSListI64ServiceRemoveChildItemArgs) GetOpOption() TChildItemOptions {
  return p.OpOption
}
func (p *TStringBSListI64ServiceRemoveChildItemArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TStringBSListI64ServiceRemoveChildItemArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TStringKey(v)
  p.BsName = temp
}
  return nil
}

func (p *TStringBSListI64ServiceRemoveChildItemArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := TItemKey(v)
  p.ItemKey = temp
}
  return nil
}

func (p *TStringBSListI64ServiceRemoveChildItemArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := TItemChild(v)
  p.AChild = temp
}
  return nil
}

func (p *TStringBSListI64ServiceRemoveChildItemArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  temp := TChildItemOptions(v)
  p.OpOption = temp
}
  return nil
}

func (p *TStringBSListI64ServiceRemoveChildItemArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("removeChildItem_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TStringBSListI64ServiceRemoveChildItemArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("bsName", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:bsName: ", p), err) }
  if err := oprot.WriteString(string(p.BsName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.bsName (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:bsName: ", p), err) }
  return err
}

func (p *TStringBSListI64ServiceRemoveChildItemArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("itemKey", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:itemKey: ", p), err) }
  if err := oprot.WriteBinary(p.ItemKey); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.itemKey (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:itemKey: ", p), err) }
  return err
}

func (p *TStringBSListI64ServiceRemoveChildItemArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("aChild", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:aChild: ", p), err) }
  if err := oprot.WriteI64(int64(p.AChild)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.aChild (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:aChild: ", p), err) }
  return err
}

func (p *TStringBSListI64ServiceRemoveChildItemArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("opOption", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:opOption: ", p), err) }
  if err := oprot.WriteI32(int32(p.OpOption)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.opOption (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:opOption: ", p), err) }
  return err
}

func (p *TStringBSListI64ServiceRemoveChildItemArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TStringBSListI64ServiceRemoveChildItemArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TStringBSListI64ServiceRemoveChildItemResult struct {
  Success *TChildItemResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTStringBSListI64ServiceRemoveChildItemResult() *TStringBSListI64ServiceRemoveChildItemResult {
  return &TStringBSListI64ServiceRemoveChildItemResult{}
}

var TStringBSListI64ServiceRemoveChildItemResult_Success_DEFAULT *TChildItemResult_
func (p *TStringBSListI64ServiceRemoveChildItemResult) GetSuccess() *TChildItemResult_ {
  if !p.IsSetSuccess() {
    return TStringBSListI64ServiceRemoveChildItemResult_Success_DEFAULT
  }
return p.Success
}
func (p *TStringBSListI64ServiceRemoveChildItemResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TStringBSListI64ServiceRemoveChildItemResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TStringBSListI64ServiceRemoveChildItemResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TChildItemResult_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TStringBSListI64ServiceRemoveChildItemResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("removeChildItem_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TStringBSListI64ServiceRemoveChildItemResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TStringBSListI64ServiceRemoveChildItemResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TStringBSListI64ServiceRemoveChildItemResult(%+v)", *p)
}

// Attributes:
//  - BsName
//  - ItemKey
type TStringBSListI64ServiceBsRemoveItemArgs struct {
  BsName TStringKey `thrift:"bsName,1" db:"bsName" json:"bsName"`
  ItemKey TItemKey `thrift:"itemKey,2" db:"itemKey" json:"itemKey"`
}

func NewTStringBSListI64ServiceBsRemoveItemArgs() *TStringBSListI64ServiceBsRemoveItemArgs {
  return &TStringBSListI64ServiceBsRemoveItemArgs{}
}


func (p *TStringBSListI64ServiceBsRemoveItemArgs) GetBsName() TStringKey {
  return p.BsName
}

func (p *TStringBSListI64ServiceBsRemoveItemArgs) GetItemKey() TItemKey {
  return p.ItemKey
}
func (p *TStringBSListI64ServiceBsRemoveItemArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TStringBSListI64ServiceBsRemoveItemArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TStringKey(v)
  p.BsName = temp
}
  return nil
}

func (p *TStringBSListI64ServiceBsRemoveItemArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := TItemKey(v)
  p.ItemKey = temp
}
  return nil
}

func (p *TStringBSListI64ServiceBsRemoveItemArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("bsRemoveItem_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TStringBSListI64ServiceBsRemoveItemArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("bsName", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:bsName: ", p), err) }
  if err := oprot.WriteString(string(p.BsName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.bsName (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:bsName: ", p), err) }
  return err
}

func (p *TStringBSListI64ServiceBsRemoveItemArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("itemKey", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:itemKey: ", p), err) }
  if err := oprot.WriteBinary(p.ItemKey); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.itemKey (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:itemKey: ", p), err) }
  return err
}

func (p *TStringBSListI64ServiceBsRemoveItemArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TStringBSListI64ServiceBsRemoveItemArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TStringBSListI64ServiceBsRemoveItemResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTStringBSListI64ServiceBsRemoveItemResult() *TStringBSListI64ServiceBsRemoveItemResult {
  return &TStringBSListI64ServiceBsRemoveItemResult{}
}

var TStringBSListI64ServiceBsRemoveItemResult_Success_DEFAULT bool
func (p *TStringBSListI64ServiceBsRemoveItemResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return TStringBSListI64ServiceBsRemoveItemResult_Success_DEFAULT
  }
return *p.Success
}
func (p *TStringBSListI64ServiceBsRemoveItemResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TStringBSListI64ServiceBsRemoveItemResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TStringBSListI64ServiceBsRemoveItemResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *TStringBSListI64ServiceBsRemoveItemResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("bsRemoveItem_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TStringBSListI64ServiceBsRemoveItemResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TStringBSListI64ServiceBsRemoveItemResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TStringBSListI64ServiceBsRemoveItemResult(%+v)", *p)
}

// Attributes:
//  - BsName
//  - ItemKey
type TStringBSListI64ServiceBsExistedArgs struct {
  BsName TStringKey `thrift:"bsName,1" db:"bsName" json:"bsName"`
  ItemKey TItemKey `thrift:"itemKey,2" db:"itemKey" json:"itemKey"`
}

func NewTStringBSListI64ServiceBsExistedArgs() *TStringBSListI64ServiceBsExistedArgs {
  return &TStringBSListI64ServiceBsExistedArgs{}
}


func (p *TStringBSListI64ServiceBsExistedArgs) GetBsName() TStringKey {
  return p.BsName
}

func (p *TStringBSListI64ServiceBsExistedArgs) GetItemKey() TItemKey {
  return p.ItemKey
}
func (p *TStringBSListI64ServiceBsExistedArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TStringBSListI64ServiceBsExistedArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TStringKey(v)
  p.BsName = temp
}
  return nil
}

func (p *TStringBSListI64ServiceBsExistedArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := TItemKey(v)
  p.ItemKey = temp
}
  return nil
}

func (p *TStringBSListI64ServiceBsExistedArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("bsExisted_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TStringBSListI64ServiceBsExistedArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("bsName", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:bsName: ", p), err) }
  if err := oprot.WriteString(string(p.BsName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.bsName (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:bsName: ", p), err) }
  return err
}

func (p *TStringBSListI64ServiceBsExistedArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("itemKey", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:itemKey: ", p), err) }
  if err := oprot.WriteBinary(p.ItemKey); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.itemKey (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:itemKey: ", p), err) }
  return err
}

func (p *TStringBSListI64ServiceBsExistedArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TStringBSListI64ServiceBsExistedArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TStringBSListI64ServiceBsExistedResult struct {
  Success *TExistedResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTStringBSListI64ServiceBsExistedResult() *TStringBSListI64ServiceBsExistedResult {
  return &TStringBSListI64ServiceBsExistedResult{}
}

var TStringBSListI64ServiceBsExistedResult_Success_DEFAULT *TExistedResult_
func (p *TStringBSListI64ServiceBsExistedResult) GetSuccess() *TExistedResult_ {
  if !p.IsSetSuccess() {
    return TStringBSListI64ServiceBsExistedResult_Success_DEFAULT
  }
return p.Success
}
func (p *TStringBSListI64ServiceBsExistedResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TStringBSListI64ServiceBsExistedResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TStringBSListI64ServiceBsExistedResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TExistedResult_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TStringBSListI64ServiceBsExistedResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("bsExisted_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TStringBSListI64ServiceBsExistedResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TStringBSListI64ServiceBsExistedResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TStringBSListI64ServiceBsExistedResult(%+v)", *p)
}

// Attributes:
//  - BsName
//  - ItemKey
type TStringBSListI64ServiceBsGetItemArgs struct {
  BsName TStringKey `thrift:"bsName,1" db:"bsName" json:"bsName"`
  ItemKey TItemKey `thrift:"itemKey,2" db:"itemKey" json:"itemKey"`
}

func NewTStringBSListI64ServiceBsGetItemArgs() *TStringBSListI64ServiceBsGetItemArgs {
  return &TStringBSListI64ServiceBsGetItemArgs{}
}


func (p *TStringBSListI64ServiceBsGetItemArgs) GetBsName() TStringKey {
  return p.BsName
}

func (p *TStringBSListI64ServiceBsGetItemArgs) GetItemKey() TItemKey {
  return p.ItemKey
}
func (p *TStringBSListI64ServiceBsGetItemArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TStringBSListI64ServiceBsGetItemArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TStringKey(v)
  p.BsName = temp
}
  return nil
}

func (p *TStringBSListI64ServiceBsGetItemArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := TItemKey(v)
  p.ItemKey = temp
}
  return nil
}

func (p *TStringBSListI64ServiceBsGetItemArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("bsGetItem_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TStringBSListI64ServiceBsGetItemArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("bsName", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:bsName: ", p), err) }
  if err := oprot.WriteString(string(p.BsName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.bsName (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:bsName: ", p), err) }
  return err
}

func (p *TStringBSListI64ServiceBsGetItemArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("itemKey", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:itemKey: ", p), err) }
  if err := oprot.WriteBinary(p.ItemKey); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.itemKey (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:itemKey: ", p), err) }
  return err
}

func (p *TStringBSListI64ServiceBsGetItemArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TStringBSListI64ServiceBsGetItemArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TStringBSListI64ServiceBsGetItemResult struct {
  Success *TItemResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTStringBSListI64ServiceBsGetItemResult() *TStringBSListI64ServiceBsGetItemResult {
  return &TStringBSListI64ServiceBsGetItemResult{}
}

var TStringBSListI64ServiceBsGetItemResult_Success_DEFAULT *TItemResult_
func (p *TStringBSListI64ServiceBsGetItemResult) GetSuccess() *TItemResult_ {
  if !p.IsSetSuccess() {
    return TStringBSListI64ServiceBsGetItemResult_Success_DEFAULT
  }
return p.Success
}
func (p *TStringBSListI64ServiceBsGetItemResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TStringBSListI64ServiceBsGetItemResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TStringBSListI64ServiceBsGetItemResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TItemResult_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TStringBSListI64ServiceBsGetItemResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("bsGetItem_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TStringBSListI64ServiceBsGetItemResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TStringBSListI64ServiceBsGetItemResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TStringBSListI64ServiceBsGetItemResult(%+v)", *p)
}

// Attributes:
//  - BsName
//  - FromPos
//  - Count
type TStringBSListI64ServiceBsGetSliceArgs struct {
  BsName TStringKey `thrift:"bsName,1" db:"bsName" json:"bsName"`
  FromPos int32 `thrift:"fromPos,2" db:"fromPos" json:"fromPos"`
  Count int32 `thrift:"count,3" db:"count" json:"count"`
}

func NewTStringBSListI64ServiceBsGetSliceArgs() *TStringBSListI64ServiceBsGetSliceArgs {
  return &TStringBSListI64ServiceBsGetSliceArgs{}
}


func (p *TStringBSListI64ServiceBsGetSliceArgs) GetBsName() TStringKey {
  return p.BsName
}

func (p *TStringBSListI64ServiceBsGetSliceArgs) GetFromPos() int32 {
  return p.FromPos
}

func (p *TStringBSListI64ServiceBsGetSliceArgs) GetCount() int32 {
  return p.Count
}
func (p *TStringBSListI64ServiceBsGetSliceArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TStringBSListI64ServiceBsGetSliceArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TStringKey(v)
  p.BsName = temp
}
  return nil
}

func (p *TStringBSListI64ServiceBsGetSliceArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.FromPos = v
}
  return nil
}

func (p *TStringBSListI64ServiceBsGetSliceArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Count = v
}
  return nil
}

func (p *TStringBSListI64ServiceBsGetSliceArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("bsGetSlice_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TStringBSListI64ServiceBsGetSliceArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("bsName", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:bsName: ", p), err) }
  if err := oprot.WriteString(string(p.BsName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.bsName (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:bsName: ", p), err) }
  return err
}

func (p *TStringBSListI64ServiceBsGetSliceArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("fromPos", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:fromPos: ", p), err) }
  if err := oprot.WriteI32(int32(p.FromPos)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.fromPos (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:fromPos: ", p), err) }
  return err
}

func (p *TStringBSListI64ServiceBsGetSliceArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("count", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:count: ", p), err) }
  if err := oprot.WriteI32(int32(p.Count)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.count (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:count: ", p), err) }
  return err
}

func (p *TStringBSListI64ServiceBsGetSliceArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TStringBSListI64ServiceBsGetSliceArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TStringBSListI64ServiceBsGetSliceResult struct {
  Success *TItemSetResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTStringBSListI64ServiceBsGetSliceResult() *TStringBSListI64ServiceBsGetSliceResult {
  return &TStringBSListI64ServiceBsGetSliceResult{}
}

var TStringBSListI64ServiceBsGetSliceResult_Success_DEFAULT *TItemSetResult_
func (p *TStringBSListI64ServiceBsGetSliceResult) GetSuccess() *TItemSetResult_ {
  if !p.IsSetSuccess() {
    return TStringBSListI64ServiceBsGetSliceResult_Success_DEFAULT
  }
return p.Success
}
func (p *TStringBSListI64ServiceBsGetSliceResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TStringBSListI64ServiceBsGetSliceResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TStringBSListI64ServiceBsGetSliceResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TItemSetResult_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TStringBSListI64ServiceBsGetSliceResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("bsGetSlice_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TStringBSListI64ServiceBsGetSliceResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TStringBSListI64ServiceBsGetSliceResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TStringBSListI64ServiceBsGetSliceResult(%+v)", *p)
}

// Attributes:
//  - BsName
//  - FromKey
//  - Count
type TStringBSListI64ServiceBsGetSliceFromItemArgs struct {
  BsName TStringKey `thrift:"bsName,1" db:"bsName" json:"bsName"`
  FromKey TItemKey `thrift:"fromKey,2" db:"fromKey" json:"fromKey"`
  Count int32 `thrift:"count,3" db:"count" json:"count"`
}

func NewTStringBSListI64ServiceBsGetSliceFromItemArgs() *TStringBSListI64ServiceBsGetSliceFromItemArgs {
  return &TStringBSListI64ServiceBsGetSliceFromItemArgs{}
}


func (p *TStringBSListI64ServiceBsGetSliceFromItemArgs) GetBsName() TStringKey {
  return p.BsName
}

func (p *TStringBSListI64ServiceBsGetSliceFromItemArgs) GetFromKey() TItemKey {
  return p.FromKey
}

func (p *TStringBSListI64ServiceBsGetSliceFromItemArgs) GetCount() int32 {
  return p.Count
}
func (p *TStringBSListI64ServiceBsGetSliceFromItemArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TStringBSListI64ServiceBsGetSliceFromItemArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TStringKey(v)
  p.BsName = temp
}
  return nil
}

func (p *TStringBSListI64ServiceBsGetSliceFromItemArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := TItemKey(v)
  p.FromKey = temp
}
  return nil
}

func (p *TStringBSListI64ServiceBsGetSliceFromItemArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Count = v
}
  return nil
}

func (p *TStringBSListI64ServiceBsGetSliceFromItemArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("bsGetSliceFromItem_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TStringBSListI64ServiceBsGetSliceFromItemArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("bsName", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:bsName: ", p), err) }
  if err := oprot.WriteString(string(p.BsName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.bsName (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:bsName: ", p), err) }
  return err
}

func (p *TStringBSListI64ServiceBsGetSliceFromItemArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("fromKey", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:fromKey: ", p), err) }
  if err := oprot.WriteBinary(p.FromKey); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.fromKey (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:fromKey: ", p), err) }
  return err
}

func (p *TStringBSListI64ServiceBsGetSliceFromItemArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("count", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:count: ", p), err) }
  if err := oprot.WriteI32(int32(p.Count)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.count (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:count: ", p), err) }
  return err
}

func (p *TStringBSListI64ServiceBsGetSliceFromItemArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TStringBSListI64ServiceBsGetSliceFromItemArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TStringBSListI64ServiceBsGetSliceFromItemResult struct {
  Success *TItemSetResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTStringBSListI64ServiceBsGetSliceFromItemResult() *TStringBSListI64ServiceBsGetSliceFromItemResult {
  return &TStringBSListI64ServiceBsGetSliceFromItemResult{}
}

var TStringBSListI64ServiceBsGetSliceFromItemResult_Success_DEFAULT *TItemSetResult_
func (p *TStringBSListI64ServiceBsGetSliceFromItemResult) GetSuccess() *TItemSetResult_ {
  if !p.IsSetSuccess() {
    return TStringBSListI64ServiceBsGetSliceFromItemResult_Success_DEFAULT
  }
return p.Success
}
func (p *TStringBSListI64ServiceBsGetSliceFromItemResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TStringBSListI64ServiceBsGetSliceFromItemResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TStringBSListI64ServiceBsGetSliceFromItemResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TItemSetResult_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TStringBSListI64ServiceBsGetSliceFromItemResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("bsGetSliceFromItem_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TStringBSListI64ServiceBsGetSliceFromItemResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TStringBSListI64ServiceBsGetSliceFromItemResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TStringBSListI64ServiceBsGetSliceFromItemResult(%+v)", *p)
}

// Attributes:
//  - BsName
//  - FromPos
//  - Count
type TStringBSListI64ServiceBsGetSliceRArgs struct {
  BsName TStringKey `thrift:"bsName,1" db:"bsName" json:"bsName"`
  FromPos int32 `thrift:"fromPos,2" db:"fromPos" json:"fromPos"`
  Count int32 `thrift:"count,3" db:"count" json:"count"`
}

func NewTStringBSListI64ServiceBsGetSliceRArgs() *TStringBSListI64ServiceBsGetSliceRArgs {
  return &TStringBSListI64ServiceBsGetSliceRArgs{}
}


func (p *TStringBSListI64ServiceBsGetSliceRArgs) GetBsName() TStringKey {
  return p.BsName
}

func (p *TStringBSListI64ServiceBsGetSliceRArgs) GetFromPos() int32 {
  return p.FromPos
}

func (p *TStringBSListI64ServiceBsGetSliceRArgs) GetCount() int32 {
  return p.Count
}
func (p *TStringBSListI64ServiceBsGetSliceRArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TStringBSListI64ServiceBsGetSliceRArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TStringKey(v)
  p.BsName = temp
}
  return nil
}

func (p *TStringBSListI64ServiceBsGetSliceRArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.FromPos = v
}
  return nil
}

func (p *TStringBSListI64ServiceBsGetSliceRArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Count = v
}
  return nil
}

func (p *TStringBSListI64ServiceBsGetSliceRArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("bsGetSliceR_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TStringBSListI64ServiceBsGetSliceRArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("bsName", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:bsName: ", p), err) }
  if err := oprot.WriteString(string(p.BsName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.bsName (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:bsName: ", p), err) }
  return err
}

func (p *TStringBSListI64ServiceBsGetSliceRArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("fromPos", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:fromPos: ", p), err) }
  if err := oprot.WriteI32(int32(p.FromPos)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.fromPos (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:fromPos: ", p), err) }
  return err
}

func (p *TStringBSListI64ServiceBsGetSliceRArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("count", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:count: ", p), err) }
  if err := oprot.WriteI32(int32(p.Count)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.count (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:count: ", p), err) }
  return err
}

func (p *TStringBSListI64ServiceBsGetSliceRArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TStringBSListI64ServiceBsGetSliceRArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TStringBSListI64ServiceBsGetSliceRResult struct {
  Success *TItemSetResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTStringBSListI64ServiceBsGetSliceRResult() *TStringBSListI64ServiceBsGetSliceRResult {
  return &TStringBSListI64ServiceBsGetSliceRResult{}
}

var TStringBSListI64ServiceBsGetSliceRResult_Success_DEFAULT *TItemSetResult_
func (p *TStringBSListI64ServiceBsGetSliceRResult) GetSuccess() *TItemSetResult_ {
  if !p.IsSetSuccess() {
    return TStringBSListI64ServiceBsGetSliceRResult_Success_DEFAULT
  }
return p.Success
}
func (p *TStringBSListI64ServiceBsGetSliceRResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TStringBSListI64ServiceBsGetSliceRResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TStringBSListI64ServiceBsGetSliceRResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TItemSetResult_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TStringBSListI64ServiceBsGetSliceRResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("bsGetSliceR_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TStringBSListI64ServiceBsGetSliceRResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TStringBSListI64ServiceBsGetSliceRResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TStringBSListI64ServiceBsGetSliceRResult(%+v)", *p)
}

// Attributes:
//  - BsName
//  - FromKey
//  - Count
type TStringBSListI64ServiceBsGetSliceFromItemRArgs struct {
  BsName TStringKey `thrift:"bsName,1" db:"bsName" json:"bsName"`
  FromKey TItemKey `thrift:"fromKey,2" db:"fromKey" json:"fromKey"`
  Count int32 `thrift:"count,3" db:"count" json:"count"`
}

func NewTStringBSListI64ServiceBsGetSliceFromItemRArgs() *TStringBSListI64ServiceBsGetSliceFromItemRArgs {
  return &TStringBSListI64ServiceBsGetSliceFromItemRArgs{}
}


func (p *TStringBSListI64ServiceBsGetSliceFromItemRArgs) GetBsName() TStringKey {
  return p.BsName
}

func (p *TStringBSListI64ServiceBsGetSliceFromItemRArgs) GetFromKey() TItemKey {
  return p.FromKey
}

func (p *TStringBSListI64ServiceBsGetSliceFromItemRArgs) GetCount() int32 {
  return p.Count
}
func (p *TStringBSListI64ServiceBsGetSliceFromItemRArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TStringBSListI64ServiceBsGetSliceFromItemRArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TStringKey(v)
  p.BsName = temp
}
  return nil
}

func (p *TStringBSListI64ServiceBsGetSliceFromItemRArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := TItemKey(v)
  p.FromKey = temp
}
  return nil
}

func (p *TStringBSListI64ServiceBsGetSliceFromItemRArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Count = v
}
  return nil
}

func (p *TStringBSListI64ServiceBsGetSliceFromItemRArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("bsGetSliceFromItemR_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TStringBSListI64ServiceBsGetSliceFromItemRArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("bsName", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:bsName: ", p), err) }
  if err := oprot.WriteString(string(p.BsName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.bsName (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:bsName: ", p), err) }
  return err
}

func (p *TStringBSListI64ServiceBsGetSliceFromItemRArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("fromKey", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:fromKey: ", p), err) }
  if err := oprot.WriteBinary(p.FromKey); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.fromKey (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:fromKey: ", p), err) }
  return err
}

func (p *TStringBSListI64ServiceBsGetSliceFromItemRArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("count", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:count: ", p), err) }
  if err := oprot.WriteI32(int32(p.Count)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.count (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:count: ", p), err) }
  return err
}

func (p *TStringBSListI64ServiceBsGetSliceFromItemRArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TStringBSListI64ServiceBsGetSliceFromItemRArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TStringBSListI64ServiceBsGetSliceFromItemRResult struct {
  Success *TItemSetResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTStringBSListI64ServiceBsGetSliceFromItemRResult() *TStringBSListI64ServiceBsGetSliceFromItemRResult {
  return &TStringBSListI64ServiceBsGetSliceFromItemRResult{}
}

var TStringBSListI64ServiceBsGetSliceFromItemRResult_Success_DEFAULT *TItemSetResult_
func (p *TStringBSListI64ServiceBsGetSliceFromItemRResult) GetSuccess() *TItemSetResult_ {
  if !p.IsSetSuccess() {
    return TStringBSListI64ServiceBsGetSliceFromItemRResult_Success_DEFAULT
  }
return p.Success
}
func (p *TStringBSListI64ServiceBsGetSliceFromItemRResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TStringBSListI64ServiceBsGetSliceFromItemRResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TStringBSListI64ServiceBsGetSliceFromItemRResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TItemSetResult_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TStringBSListI64ServiceBsGetSliceFromItemRResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("bsGetSliceFromItemR_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TStringBSListI64ServiceBsGetSliceFromItemRResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TStringBSListI64ServiceBsGetSliceFromItemRResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TStringBSListI64ServiceBsGetSliceFromItemRResult(%+v)", *p)
}

// Attributes:
//  - BsName
//  - StartKey
//  - EndKey
type TStringBSListI64ServiceBsRangeQueryArgs struct {
  BsName TStringKey `thrift:"bsName,1" db:"bsName" json:"bsName"`
  StartKey TItemKey `thrift:"startKey,2" db:"startKey" json:"startKey"`
  EndKey TItemKey `thrift:"endKey,3" db:"endKey" json:"endKey"`
}

func NewTStringBSListI64ServiceBsRangeQueryArgs() *TStringBSListI64ServiceBsRangeQueryArgs {
  return &TStringBSListI64ServiceBsRangeQueryArgs{}
}


func (p *TStringBSListI64ServiceBsRangeQueryArgs) GetBsName() TStringKey {
  return p.BsName
}

func (p *TStringBSListI64ServiceBsRangeQueryArgs) GetStartKey() TItemKey {
  return p.StartKey
}

func (p *TStringBSListI64ServiceBsRangeQueryArgs) GetEndKey() TItemKey {
  return p.EndKey
}
func (p *TStringBSListI64ServiceBsRangeQueryArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TStringBSListI64ServiceBsRangeQueryArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TStringKey(v)
  p.BsName = temp
}
  return nil
}

func (p *TStringBSListI64ServiceBsRangeQueryArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := TItemKey(v)
  p.StartKey = temp
}
  return nil
}

func (p *TStringBSListI64ServiceBsRangeQueryArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := TItemKey(v)
  p.EndKey = temp
}
  return nil
}

func (p *TStringBSListI64ServiceBsRangeQueryArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("bsRangeQuery_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TStringBSListI64ServiceBsRangeQueryArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("bsName", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:bsName: ", p), err) }
  if err := oprot.WriteString(string(p.BsName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.bsName (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:bsName: ", p), err) }
  return err
}

func (p *TStringBSListI64ServiceBsRangeQueryArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("startKey", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:startKey: ", p), err) }
  if err := oprot.WriteBinary(p.StartKey); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.startKey (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:startKey: ", p), err) }
  return err
}

func (p *TStringBSListI64ServiceBsRangeQueryArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("endKey", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:endKey: ", p), err) }
  if err := oprot.WriteBinary(p.EndKey); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.endKey (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:endKey: ", p), err) }
  return err
}

func (p *TStringBSListI64ServiceBsRangeQueryArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TStringBSListI64ServiceBsRangeQueryArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TStringBSListI64ServiceBsRangeQueryResult struct {
  Success *TItemSetResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTStringBSListI64ServiceBsRangeQueryResult() *TStringBSListI64ServiceBsRangeQueryResult {
  return &TStringBSListI64ServiceBsRangeQueryResult{}
}

var TStringBSListI64ServiceBsRangeQueryResult_Success_DEFAULT *TItemSetResult_
func (p *TStringBSListI64ServiceBsRangeQueryResult) GetSuccess() *TItemSetResult_ {
  if !p.IsSetSuccess() {
    return TStringBSListI64ServiceBsRangeQueryResult_Success_DEFAULT
  }
return p.Success
}
func (p *TStringBSListI64ServiceBsRangeQueryResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TStringBSListI64ServiceBsRangeQueryResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TStringBSListI64ServiceBsRangeQueryResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TItemSetResult_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TStringBSListI64ServiceBsRangeQueryResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("bsRangeQuery_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TStringBSListI64ServiceBsRangeQueryResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TStringBSListI64ServiceBsRangeQueryResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TStringBSListI64ServiceBsRangeQueryResult(%+v)", *p)
}

// Attributes:
//  - BsName
//  - SetData
type TStringBSListI64ServiceBsBulkLoadArgs struct {
  BsName TStringKey `thrift:"bsName,1" db:"bsName" json:"bsName"`
  SetData *TItemSet `thrift:"setData,2" db:"setData" json:"setData"`
}

func NewTStringBSListI64ServiceBsBulkLoadArgs() *TStringBSListI64ServiceBsBulkLoadArgs {
  return &TStringBSListI64ServiceBsBulkLoadArgs{}
}


func (p *TStringBSListI64ServiceBsBulkLoadArgs) GetBsName() TStringKey {
  return p.BsName
}
var TStringBSListI64ServiceBsBulkLoadArgs_SetData_DEFAULT *TItemSet
func (p *TStringBSListI64ServiceBsBulkLoadArgs) GetSetData() *TItemSet {
  if !p.IsSetSetData() {
    return TStringBSListI64ServiceBsBulkLoadArgs_SetData_DEFAULT
  }
return p.SetData
}
func (p *TStringBSListI64ServiceBsBulkLoadArgs) IsSetSetData() bool {
  return p.SetData != nil
}

func (p *TStringBSListI64ServiceBsBulkLoadArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TStringBSListI64ServiceBsBulkLoadArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TStringKey(v)
  p.BsName = temp
}
  return nil
}

func (p *TStringBSListI64ServiceBsBulkLoadArgs)  ReadField2(iprot thrift.TProtocol) error {
  p.SetData = &TItemSet{}
  if err := p.SetData.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SetData), err)
  }
  return nil
}

func (p *TStringBSListI64ServiceBsBulkLoadArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("bsBulkLoad_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TStringBSListI64ServiceBsBulkLoadArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("bsName", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:bsName: ", p), err) }
  if err := oprot.WriteString(string(p.BsName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.bsName (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:bsName: ", p), err) }
  return err
}

func (p *TStringBSListI64ServiceBsBulkLoadArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("setData", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:setData: ", p), err) }
  if err := p.SetData.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SetData), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:setData: ", p), err) }
  return err
}

func (p *TStringBSListI64ServiceBsBulkLoadArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TStringBSListI64ServiceBsBulkLoadArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TStringBSListI64ServiceBsBulkLoadResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTStringBSListI64ServiceBsBulkLoadResult() *TStringBSListI64ServiceBsBulkLoadResult {
  return &TStringBSListI64ServiceBsBulkLoadResult{}
}

var TStringBSListI64ServiceBsBulkLoadResult_Success_DEFAULT bool
func (p *TStringBSListI64ServiceBsBulkLoadResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return TStringBSListI64ServiceBsBulkLoadResult_Success_DEFAULT
  }
return *p.Success
}
func (p *TStringBSListI64ServiceBsBulkLoadResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TStringBSListI64ServiceBsBulkLoadResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TStringBSListI64ServiceBsBulkLoadResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *TStringBSListI64ServiceBsBulkLoadResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("bsBulkLoad_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TStringBSListI64ServiceBsBulkLoadResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TStringBSListI64ServiceBsBulkLoadResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TStringBSListI64ServiceBsBulkLoadResult(%+v)", *p)
}

// Attributes:
//  - BsName
//  - SetData
//  - GetAddedItems
//  - GetReplacedItems
type TStringBSListI64ServiceBsMultiPutArgs struct {
  BsName TStringKey `thrift:"bsName,1" db:"bsName" json:"bsName"`
  SetData *TItemSet `thrift:"setData,2" db:"setData" json:"setData"`
  GetAddedItems bool `thrift:"getAddedItems,3" db:"getAddedItems" json:"getAddedItems"`
  GetReplacedItems bool `thrift:"getReplacedItems,4" db:"getReplacedItems" json:"getReplacedItems"`
}

func NewTStringBSListI64ServiceBsMultiPutArgs() *TStringBSListI64ServiceBsMultiPutArgs {
  return &TStringBSListI64ServiceBsMultiPutArgs{}
}


func (p *TStringBSListI64ServiceBsMultiPutArgs) GetBsName() TStringKey {
  return p.BsName
}
var TStringBSListI64ServiceBsMultiPutArgs_SetData_DEFAULT *TItemSet
func (p *TStringBSListI64ServiceBsMultiPutArgs) GetSetData() *TItemSet {
  if !p.IsSetSetData() {
    return TStringBSListI64ServiceBsMultiPutArgs_SetData_DEFAULT
  }
return p.SetData
}

func (p *TStringBSListI64ServiceBsMultiPutArgs) GetGetAddedItems() bool {
  return p.GetAddedItems
}

func (p *TStringBSListI64ServiceBsMultiPutArgs) GetGetReplacedItems() bool {
  return p.GetReplacedItems
}
func (p *TStringBSListI64ServiceBsMultiPutArgs) IsSetSetData() bool {
  return p.SetData != nil
}

func (p *TStringBSListI64ServiceBsMultiPutArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TStringBSListI64ServiceBsMultiPutArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TStringKey(v)
  p.BsName = temp
}
  return nil
}

func (p *TStringBSListI64ServiceBsMultiPutArgs)  ReadField2(iprot thrift.TProtocol) error {
  p.SetData = &TItemSet{}
  if err := p.SetData.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SetData), err)
  }
  return nil
}

func (p *TStringBSListI64ServiceBsMultiPutArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.GetAddedItems = v
}
  return nil
}

func (p *TStringBSListI64ServiceBsMultiPutArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.GetReplacedItems = v
}
  return nil
}

func (p *TStringBSListI64ServiceBsMultiPutArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("bsMultiPut_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TStringBSListI64ServiceBsMultiPutArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("bsName", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:bsName: ", p), err) }
  if err := oprot.WriteString(string(p.BsName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.bsName (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:bsName: ", p), err) }
  return err
}

func (p *TStringBSListI64ServiceBsMultiPutArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("setData", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:setData: ", p), err) }
  if err := p.SetData.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SetData), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:setData: ", p), err) }
  return err
}

func (p *TStringBSListI64ServiceBsMultiPutArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("getAddedItems", thrift.BOOL, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:getAddedItems: ", p), err) }
  if err := oprot.WriteBool(bool(p.GetAddedItems)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.getAddedItems (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:getAddedItems: ", p), err) }
  return err
}

func (p *TStringBSListI64ServiceBsMultiPutArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("getReplacedItems", thrift.BOOL, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:getReplacedItems: ", p), err) }
  if err := oprot.WriteBool(bool(p.GetReplacedItems)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.getReplacedItems (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:getReplacedItems: ", p), err) }
  return err
}

func (p *TStringBSListI64ServiceBsMultiPutArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TStringBSListI64ServiceBsMultiPutArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TStringBSListI64ServiceBsMultiPutResult struct {
  Success *TMultiPutItemResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTStringBSListI64ServiceBsMultiPutResult() *TStringBSListI64ServiceBsMultiPutResult {
  return &TStringBSListI64ServiceBsMultiPutResult{}
}

var TStringBSListI64ServiceBsMultiPutResult_Success_DEFAULT *TMultiPutItemResult_
func (p *TStringBSListI64ServiceBsMultiPutResult) GetSuccess() *TMultiPutItemResult_ {
  if !p.IsSetSuccess() {
    return TStringBSListI64ServiceBsMultiPutResult_Success_DEFAULT
  }
return p.Success
}
func (p *TStringBSListI64ServiceBsMultiPutResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TStringBSListI64ServiceBsMultiPutResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TStringBSListI64ServiceBsMultiPutResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TMultiPutItemResult_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TStringBSListI64ServiceBsMultiPutResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("bsMultiPut_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TStringBSListI64ServiceBsMultiPutResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TStringBSListI64ServiceBsMultiPutResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TStringBSListI64ServiceBsMultiPutResult(%+v)", *p)
}

// Attributes:
//  - BsName
type TStringBSListI64ServiceGetTotalCountArgs struct {
  BsName TStringKey `thrift:"bsName,1" db:"bsName" json:"bsName"`
}

func NewTStringBSListI64ServiceGetTotalCountArgs() *TStringBSListI64ServiceGetTotalCountArgs {
  return &TStringBSListI64ServiceGetTotalCountArgs{}
}


func (p *TStringBSListI64ServiceGetTotalCountArgs) GetBsName() TStringKey {
  return p.BsName
}
func (p *TStringBSListI64ServiceGetTotalCountArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TStringBSListI64ServiceGetTotalCountArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TStringKey(v)
  p.BsName = temp
}
  return nil
}

func (p *TStringBSListI64ServiceGetTotalCountArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getTotalCount_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TStringBSListI64ServiceGetTotalCountArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("bsName", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:bsName: ", p), err) }
  if err := oprot.WriteString(string(p.BsName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.bsName (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:bsName: ", p), err) }
  return err
}

func (p *TStringBSListI64ServiceGetTotalCountArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TStringBSListI64ServiceGetTotalCountArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TStringBSListI64ServiceGetTotalCountResult struct {
  Success *int64 `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTStringBSListI64ServiceGetTotalCountResult() *TStringBSListI64ServiceGetTotalCountResult {
  return &TStringBSListI64ServiceGetTotalCountResult{}
}

var TStringBSListI64ServiceGetTotalCountResult_Success_DEFAULT int64
func (p *TStringBSListI64ServiceGetTotalCountResult) GetSuccess() int64 {
  if !p.IsSetSuccess() {
    return TStringBSListI64ServiceGetTotalCountResult_Success_DEFAULT
  }
return *p.Success
}
func (p *TStringBSListI64ServiceGetTotalCountResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TStringBSListI64ServiceGetTotalCountResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TStringBSListI64ServiceGetTotalCountResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *TStringBSListI64ServiceGetTotalCountResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getTotalCount_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TStringBSListI64ServiceGetTotalCountResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.I64, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI64(int64(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TStringBSListI64ServiceGetTotalCountResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TStringBSListI64ServiceGetTotalCountResult(%+v)", *p)
}

// Attributes:
//  - BsName
type TStringBSListI64ServiceRemoveAllArgs struct {
  BsName TStringKey `thrift:"bsName,1" db:"bsName" json:"bsName"`
}

func NewTStringBSListI64ServiceRemoveAllArgs() *TStringBSListI64ServiceRemoveAllArgs {
  return &TStringBSListI64ServiceRemoveAllArgs{}
}


func (p *TStringBSListI64ServiceRemoveAllArgs) GetBsName() TStringKey {
  return p.BsName
}
func (p *TStringBSListI64ServiceRemoveAllArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TStringBSListI64ServiceRemoveAllArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TStringKey(v)
  p.BsName = temp
}
  return nil
}

func (p *TStringBSListI64ServiceRemoveAllArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("removeAll_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TStringBSListI64ServiceRemoveAllArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("bsName", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:bsName: ", p), err) }
  if err := oprot.WriteString(string(p.BsName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.bsName (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:bsName: ", p), err) }
  return err
}

func (p *TStringBSListI64ServiceRemoveAllArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TStringBSListI64ServiceRemoveAllArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TStringBSListI64ServiceRemoveAllResult struct {
  Success *int64 `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTStringBSListI64ServiceRemoveAllResult() *TStringBSListI64ServiceRemoveAllResult {
  return &TStringBSListI64ServiceRemoveAllResult{}
}

var TStringBSListI64ServiceRemoveAllResult_Success_DEFAULT int64
func (p *TStringBSListI64ServiceRemoveAllResult) GetSuccess() int64 {
  if !p.IsSetSuccess() {
    return TStringBSListI64ServiceRemoveAllResult_Success_DEFAULT
  }
return *p.Success
}
func (p *TStringBSListI64ServiceRemoveAllResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TStringBSListI64ServiceRemoveAllResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TStringBSListI64ServiceRemoveAllResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *TStringBSListI64ServiceRemoveAllResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("removeAll_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TStringBSListI64ServiceRemoveAllResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.I64, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI64(int64(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TStringBSListI64ServiceRemoveAllResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TStringBSListI64ServiceRemoveAllResult(%+v)", *p)
}

type TStringBSListI64ServiceTotalStringKeyCountArgs struct {
}

func NewTStringBSListI64ServiceTotalStringKeyCountArgs() *TStringBSListI64ServiceTotalStringKeyCountArgs {
  return &TStringBSListI64ServiceTotalStringKeyCountArgs{}
}

func (p *TStringBSListI64ServiceTotalStringKeyCountArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TStringBSListI64ServiceTotalStringKeyCountArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("totalStringKeyCount_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TStringBSListI64ServiceTotalStringKeyCountArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TStringBSListI64ServiceTotalStringKeyCountArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TStringBSListI64ServiceTotalStringKeyCountResult struct {
  Success *int64 `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTStringBSListI64ServiceTotalStringKeyCountResult() *TStringBSListI64ServiceTotalStringKeyCountResult {
  return &TStringBSListI64ServiceTotalStringKeyCountResult{}
}

var TStringBSListI64ServiceTotalStringKeyCountResult_Success_DEFAULT int64
func (p *TStringBSListI64ServiceTotalStringKeyCountResult) GetSuccess() int64 {
  if !p.IsSetSuccess() {
    return TStringBSListI64ServiceTotalStringKeyCountResult_Success_DEFAULT
  }
return *p.Success
}
func (p *TStringBSListI64ServiceTotalStringKeyCountResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TStringBSListI64ServiceTotalStringKeyCountResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TStringBSListI64ServiceTotalStringKeyCountResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *TStringBSListI64ServiceTotalStringKeyCountResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("totalStringKeyCount_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TStringBSListI64ServiceTotalStringKeyCountResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.I64, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI64(int64(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TStringBSListI64ServiceTotalStringKeyCountResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TStringBSListI64ServiceTotalStringKeyCountResult(%+v)", *p)
}

// Attributes:
//  - FromIndex
//  - Count
type TStringBSListI64ServiceGetListKeyArgs struct {
  FromIndex int64 `thrift:"fromIndex,1" db:"fromIndex" json:"fromIndex"`
  Count int32 `thrift:"count,2" db:"count" json:"count"`
}

func NewTStringBSListI64ServiceGetListKeyArgs() *TStringBSListI64ServiceGetListKeyArgs {
  return &TStringBSListI64ServiceGetListKeyArgs{}
}


func (p *TStringBSListI64ServiceGetListKeyArgs) GetFromIndex() int64 {
  return p.FromIndex
}

func (p *TStringBSListI64ServiceGetListKeyArgs) GetCount() int32 {
  return p.Count
}
func (p *TStringBSListI64ServiceGetListKeyArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TStringBSListI64ServiceGetListKeyArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.FromIndex = v
}
  return nil
}

func (p *TStringBSListI64ServiceGetListKeyArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Count = v
}
  return nil
}

func (p *TStringBSListI64ServiceGetListKeyArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getListKey_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TStringBSListI64ServiceGetListKeyArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("fromIndex", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:fromIndex: ", p), err) }
  if err := oprot.WriteI64(int64(p.FromIndex)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.fromIndex (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:fromIndex: ", p), err) }
  return err
}

func (p *TStringBSListI64ServiceGetListKeyArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("count", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:count: ", p), err) }
  if err := oprot.WriteI32(int32(p.Count)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.count (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:count: ", p), err) }
  return err
}

func (p *TStringBSListI64ServiceGetListKeyArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TStringBSListI64ServiceGetListKeyArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TStringBSListI64ServiceGetListKeyResult struct {
  Success []TStringKey `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTStringBSListI64ServiceGetListKeyResult() *TStringBSListI64ServiceGetListKeyResult {
  return &TStringBSListI64ServiceGetListKeyResult{}
}

var TStringBSListI64ServiceGetListKeyResult_Success_DEFAULT []TStringKey

func (p *TStringBSListI64ServiceGetListKeyResult) GetSuccess() []TStringKey {
  return p.Success
}
func (p *TStringBSListI64ServiceGetListKeyResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TStringBSListI64ServiceGetListKeyResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TStringBSListI64ServiceGetListKeyResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]TStringKey, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
var _elem155 TStringKey
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := TStringKey(v)
    _elem155 = temp
}
    p.Success = append(p.Success, _elem155)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TStringBSListI64ServiceGetListKeyResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getListKey_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TStringBSListI64ServiceGetListKeyResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRING, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TStringBSListI64ServiceGetListKeyResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TStringBSListI64ServiceGetListKeyResult(%+v)", *p)
}

// Attributes:
//  - KeyFrom
//  - Count
type TStringBSListI64ServiceGetListKeyFromArgs struct {
  KeyFrom TStringKey `thrift:"keyFrom,1" db:"keyFrom" json:"keyFrom"`
  Count int32 `thrift:"count,2" db:"count" json:"count"`
}

func NewTStringBSListI64ServiceGetListKeyFromArgs() *TStringBSListI64ServiceGetListKeyFromArgs {
  return &TStringBSListI64ServiceGetListKeyFromArgs{}
}


func (p *TStringBSListI64ServiceGetListKeyFromArgs) GetKeyFrom() TStringKey {
  return p.KeyFrom
}

func (p *TStringBSListI64ServiceGetListKeyFromArgs) GetCount() int32 {
  return p.Count
}
func (p *TStringBSListI64ServiceGetListKeyFromArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TStringBSListI64ServiceGetListKeyFromArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TStringKey(v)
  p.KeyFrom = temp
}
  return nil
}

func (p *TStringBSListI64ServiceGetListKeyFromArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Count = v
}
  return nil
}

func (p *TStringBSListI64ServiceGetListKeyFromArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getListKeyFrom_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TStringBSListI64ServiceGetListKeyFromArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("keyFrom", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:keyFrom: ", p), err) }
  if err := oprot.WriteString(string(p.KeyFrom)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.keyFrom (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:keyFrom: ", p), err) }
  return err
}

func (p *TStringBSListI64ServiceGetListKeyFromArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("count", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:count: ", p), err) }
  if err := oprot.WriteI32(int32(p.Count)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.count (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:count: ", p), err) }
  return err
}

func (p *TStringBSListI64ServiceGetListKeyFromArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TStringBSListI64ServiceGetListKeyFromArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TStringBSListI64ServiceGetListKeyFromResult struct {
  Success []TStringKey `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTStringBSListI64ServiceGetListKeyFromResult() *TStringBSListI64ServiceGetListKeyFromResult {
  return &TStringBSListI64ServiceGetListKeyFromResult{}
}

var TStringBSListI64ServiceGetListKeyFromResult_Success_DEFAULT []TStringKey

func (p *TStringBSListI64ServiceGetListKeyFromResult) GetSuccess() []TStringKey {
  return p.Success
}
func (p *TStringBSListI64ServiceGetListKeyFromResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TStringBSListI64ServiceGetListKeyFromResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TStringBSListI64ServiceGetListKeyFromResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]TStringKey, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
var _elem156 TStringKey
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := TStringKey(v)
    _elem156 = temp
}
    p.Success = append(p.Success, _elem156)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TStringBSListI64ServiceGetListKeyFromResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getListKeyFrom_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TStringBSListI64ServiceGetListKeyFromResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRING, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TStringBSListI64ServiceGetListKeyFromResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TStringBSListI64ServiceGetListKeyFromResult(%+v)", *p)
}


type TIBSListI64Service interface {
  // Parameters:
  //  - BigsetID
  //  - Item
  PutItem(ctx context.Context, bigsetID TKey, item *TItem) (r *TPutItemResult_, err error)
  // Parameters:
  //  - BsName
  //  - ItemKey
  //  - AChild
  //  - OpOption
  AddChildItem(ctx context.Context, bsName TKey, itemKey TItemKey, aChild TItemChild, opOption TChildItemOptions) (r *TChildItemResult_, err error)
  // Parameters:
  //  - BsName
  //  - ItemKey
  //  - AChild
  //  - OpOption
  AddChildrenItem(ctx context.Context, bsName TKey, itemKey TItemKey, aChild []TItemChild, opOption TChildItemOptions) (r *TChildItemResult_, err error)
  // Parameters:
  //  - BsName
  //  - ItemKey
  //  - AChild
  //  - OpOption
  RemoveChildItem(ctx context.Context, bsName TKey, itemKey TItemKey, aChild TItemChild, opOption TChildItemOptions) (r *TChildItemResult_, err error)
  // Parameters:
  //  - BigsetID
  //  - ItemKey
  RemoveItem(ctx context.Context, bigsetID TKey, itemKey TItemKey) (r bool, err error)
  // Parameters:
  //  - BigsetID
  //  - ItemKey
  Existed(ctx context.Context, bigsetID TKey, itemKey TItemKey) (r *TExistedResult_, err error)
  // Parameters:
  //  - BigsetID
  //  - ItemKey
  GetItem(ctx context.Context, bigsetID TKey, itemKey TItemKey) (r *TItemResult_, err error)
  // Parameters:
  //  - BigsetID
  //  - FromIDX
  //  - Count
  GetSlice(ctx context.Context, bigsetID TKey, fromIDX int32, count int32) (r *TItemSetResult_, err error)
  // Parameters:
  //  - BigsetID
  //  - FromKey
  //  - Count
  GetSliceFromItem(ctx context.Context, bigsetID TKey, fromKey TItemKey, count int32) (r *TItemSetResult_, err error)
  // Parameters:
  //  - BigsetID
  //  - FromIDX
  //  - Count
  GetSliceR(ctx context.Context, bigsetID TKey, fromIDX int32, count int32) (r *TItemSetResult_, err error)
  // Parameters:
  //  - BigsetID
  //  - FromKey
  //  - Count
  GetSliceFromItemR(ctx context.Context, bigsetID TKey, fromKey TItemKey, count int32) (r *TItemSetResult_, err error)
  // Parameters:
  //  - BigsetID
  //  - StartKey
  //  - EndKey
  RangeQuery(ctx context.Context, bigsetID TKey, startKey TItemKey, endKey TItemKey) (r *TItemSetResult_, err error)
  // Parameters:
  //  - BigsetID
  //  - SetData
  BulkLoad(ctx context.Context, bigsetID TKey, setData *TItemSet) (r bool, err error)
  // Parameters:
  //  - BigsetID
  //  - SetData
  //  - GetAddedItems
  //  - GetReplacedItems
  MultiPut(ctx context.Context, bigsetID TKey, setData *TItemSet, getAddedItems bool, getReplacedItems bool) (r *TMultiPutItemResult_, err error)
  // Parameters:
  //  - BigsetID
  GetTotalCount(ctx context.Context, bigsetID TKey) (r int64, err error)
  // Parameters:
  //  - BigsetID
  RemoveAll(ctx context.Context, bigsetID TKey) (r int64, err error)
}

type TIBSListI64ServiceClient struct {
  c thrift.TClient
}

func NewTIBSListI64ServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *TIBSListI64ServiceClient {
  return &TIBSListI64ServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewTIBSListI64ServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *TIBSListI64ServiceClient {
  return &TIBSListI64ServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewTIBSListI64ServiceClient(c thrift.TClient) *TIBSListI64ServiceClient {
  return &TIBSListI64ServiceClient{
    c: c,
  }
}

func (p *TIBSListI64ServiceClient) Client_() thrift.TClient {
  return p.c
}
// Parameters:
//  - BigsetID
//  - Item
func (p *TIBSListI64ServiceClient) PutItem(ctx context.Context, bigsetID TKey, item *TItem) (r *TPutItemResult_, err error) {
  var _args225 TIBSListI64ServicePutItemArgs
  _args225.BigsetID = bigsetID
  _args225.Item = item
  var _result226 TIBSListI64ServicePutItemResult
  if err = p.Client_().Call(ctx, "putItem", &_args225, &_result226); err != nil {
    return
  }
  return _result226.GetSuccess(), nil
}

// Parameters:
//  - BsName
//  - ItemKey
//  - AChild
//  - OpOption
func (p *TIBSListI64ServiceClient) AddChildItem(ctx context.Context, bsName TKey, itemKey TItemKey, aChild TItemChild, opOption TChildItemOptions) (r *TChildItemResult_, err error) {
  var _args227 TIBSListI64ServiceAddChildItemArgs
  _args227.BsName = bsName
  _args227.ItemKey = itemKey
  _args227.AChild = aChild
  _args227.OpOption = opOption
  var _result228 TIBSListI64ServiceAddChildItemResult
  if err = p.Client_().Call(ctx, "addChildItem", &_args227, &_result228); err != nil {
    return
  }
  return _result228.GetSuccess(), nil
}

// Parameters:
//  - BsName
//  - ItemKey
//  - AChild
//  - OpOption
func (p *TIBSListI64ServiceClient) AddChildrenItem(ctx context.Context, bsName TKey, itemKey TItemKey, aChild []TItemChild, opOption TChildItemOptions) (r *TChildItemResult_, err error) {
  var _args229 TIBSListI64ServiceAddChildrenItemArgs
  _args229.BsName = bsName
  _args229.ItemKey = itemKey
  _args229.AChild = aChild
  _args229.OpOption = opOption
  var _result230 TIBSListI64ServiceAddChildrenItemResult
  if err = p.Client_().Call(ctx, "addChildrenItem", &_args229, &_result230); err != nil {
    return
  }
  return _result230.GetSuccess(), nil
}

// Parameters:
//  - BsName
//  - ItemKey
//  - AChild
//  - OpOption
func (p *TIBSListI64ServiceClient) RemoveChildItem(ctx context.Context, bsName TKey, itemKey TItemKey, aChild TItemChild, opOption TChildItemOptions) (r *TChildItemResult_, err error) {
  var _args231 TIBSListI64ServiceRemoveChildItemArgs
  _args231.BsName = bsName
  _args231.ItemKey = itemKey
  _args231.AChild = aChild
  _args231.OpOption = opOption
  var _result232 TIBSListI64ServiceRemoveChildItemResult
  if err = p.Client_().Call(ctx, "removeChildItem", &_args231, &_result232); err != nil {
    return
  }
  return _result232.GetSuccess(), nil
}

// Parameters:
//  - BigsetID
//  - ItemKey
func (p *TIBSListI64ServiceClient) RemoveItem(ctx context.Context, bigsetID TKey, itemKey TItemKey) (r bool, err error) {
  var _args233 TIBSListI64ServiceRemoveItemArgs
  _args233.BigsetID = bigsetID
  _args233.ItemKey = itemKey
  var _result234 TIBSListI64ServiceRemoveItemResult
  if err = p.Client_().Call(ctx, "removeItem", &_args233, &_result234); err != nil {
    return
  }
  return _result234.GetSuccess(), nil
}

// Parameters:
//  - BigsetID
//  - ItemKey
func (p *TIBSListI64ServiceClient) Existed(ctx context.Context, bigsetID TKey, itemKey TItemKey) (r *TExistedResult_, err error) {
  var _args235 TIBSListI64ServiceExistedArgs
  _args235.BigsetID = bigsetID
  _args235.ItemKey = itemKey
  var _result236 TIBSListI64ServiceExistedResult
  if err = p.Client_().Call(ctx, "existed", &_args235, &_result236); err != nil {
    return
  }
  return _result236.GetSuccess(), nil
}

// Parameters:
//  - BigsetID
//  - ItemKey
func (p *TIBSListI64ServiceClient) GetItem(ctx context.Context, bigsetID TKey, itemKey TItemKey) (r *TItemResult_, err error) {
  var _args237 TIBSListI64ServiceGetItemArgs
  _args237.BigsetID = bigsetID
  _args237.ItemKey = itemKey
  var _result238 TIBSListI64ServiceGetItemResult
  if err = p.Client_().Call(ctx, "getItem", &_args237, &_result238); err != nil {
    return
  }
  return _result238.GetSuccess(), nil
}

// Parameters:
//  - BigsetID
//  - FromIDX
//  - Count
func (p *TIBSListI64ServiceClient) GetSlice(ctx context.Context, bigsetID TKey, fromIDX int32, count int32) (r *TItemSetResult_, err error) {
  var _args239 TIBSListI64ServiceGetSliceArgs
  _args239.BigsetID = bigsetID
  _args239.FromIDX = fromIDX
  _args239.Count = count
  var _result240 TIBSListI64ServiceGetSliceResult
  if err = p.Client_().Call(ctx, "getSlice", &_args239, &_result240); err != nil {
    return
  }
  return _result240.GetSuccess(), nil
}

// Parameters:
//  - BigsetID
//  - FromKey
//  - Count
func (p *TIBSListI64ServiceClient) GetSliceFromItem(ctx context.Context, bigsetID TKey, fromKey TItemKey, count int32) (r *TItemSetResult_, err error) {
  var _args241 TIBSListI64ServiceGetSliceFromItemArgs
  _args241.BigsetID = bigsetID
  _args241.FromKey = fromKey
  _args241.Count = count
  var _result242 TIBSListI64ServiceGetSliceFromItemResult
  if err = p.Client_().Call(ctx, "getSliceFromItem", &_args241, &_result242); err != nil {
    return
  }
  return _result242.GetSuccess(), nil
}

// Parameters:
//  - BigsetID
//  - FromIDX
//  - Count
func (p *TIBSListI64ServiceClient) GetSliceR(ctx context.Context, bigsetID TKey, fromIDX int32, count int32) (r *TItemSetResult_, err error) {
  var _args243 TIBSListI64ServiceGetSliceRArgs
  _args243.BigsetID = bigsetID
  _args243.FromIDX = fromIDX
  _args243.Count = count
  var _result244 TIBSListI64ServiceGetSliceRResult
  if err = p.Client_().Call(ctx, "getSliceR", &_args243, &_result244); err != nil {
    return
  }
  return _result244.GetSuccess(), nil
}

// Parameters:
//  - BigsetID
//  - FromKey
//  - Count
func (p *TIBSListI64ServiceClient) GetSliceFromItemR(ctx context.Context, bigsetID TKey, fromKey TItemKey, count int32) (r *TItemSetResult_, err error) {
  var _args245 TIBSListI64ServiceGetSliceFromItemRArgs
  _args245.BigsetID = bigsetID
  _args245.FromKey = fromKey
  _args245.Count = count
  var _result246 TIBSListI64ServiceGetSliceFromItemRResult
  if err = p.Client_().Call(ctx, "getSliceFromItemR", &_args245, &_result246); err != nil {
    return
  }
  return _result246.GetSuccess(), nil
}

// Parameters:
//  - BigsetID
//  - StartKey
//  - EndKey
func (p *TIBSListI64ServiceClient) RangeQuery(ctx context.Context, bigsetID TKey, startKey TItemKey, endKey TItemKey) (r *TItemSetResult_, err error) {
  var _args247 TIBSListI64ServiceRangeQueryArgs
  _args247.BigsetID = bigsetID
  _args247.StartKey = startKey
  _args247.EndKey = endKey
  var _result248 TIBSListI64ServiceRangeQueryResult
  if err = p.Client_().Call(ctx, "rangeQuery", &_args247, &_result248); err != nil {
    return
  }
  return _result248.GetSuccess(), nil
}

// Parameters:
//  - BigsetID
//  - SetData
func (p *TIBSListI64ServiceClient) BulkLoad(ctx context.Context, bigsetID TKey, setData *TItemSet) (r bool, err error) {
  var _args249 TIBSListI64ServiceBulkLoadArgs
  _args249.BigsetID = bigsetID
  _args249.SetData = setData
  var _result250 TIBSListI64ServiceBulkLoadResult
  if err = p.Client_().Call(ctx, "bulkLoad", &_args249, &_result250); err != nil {
    return
  }
  return _result250.GetSuccess(), nil
}

// Parameters:
//  - BigsetID
//  - SetData
//  - GetAddedItems
//  - GetReplacedItems
func (p *TIBSListI64ServiceClient) MultiPut(ctx context.Context, bigsetID TKey, setData *TItemSet, getAddedItems bool, getReplacedItems bool) (r *TMultiPutItemResult_, err error) {
  var _args251 TIBSListI64ServiceMultiPutArgs
  _args251.BigsetID = bigsetID
  _args251.SetData = setData
  _args251.GetAddedItems = getAddedItems
  _args251.GetReplacedItems = getReplacedItems
  var _result252 TIBSListI64ServiceMultiPutResult
  if err = p.Client_().Call(ctx, "multiPut", &_args251, &_result252); err != nil {
    return
  }
  return _result252.GetSuccess(), nil
}

// Parameters:
//  - BigsetID
func (p *TIBSListI64ServiceClient) GetTotalCount(ctx context.Context, bigsetID TKey) (r int64, err error) {
  var _args253 TIBSListI64ServiceGetTotalCountArgs
  _args253.BigsetID = bigsetID
  var _result254 TIBSListI64ServiceGetTotalCountResult
  if err = p.Client_().Call(ctx, "getTotalCount", &_args253, &_result254); err != nil {
    return
  }
  return _result254.GetSuccess(), nil
}

// Parameters:
//  - BigsetID
func (p *TIBSListI64ServiceClient) RemoveAll(ctx context.Context, bigsetID TKey) (r int64, err error) {
  var _args255 TIBSListI64ServiceRemoveAllArgs
  _args255.BigsetID = bigsetID
  var _result256 TIBSListI64ServiceRemoveAllResult
  if err = p.Client_().Call(ctx, "removeAll", &_args255, &_result256); err != nil {
    return
  }
  return _result256.GetSuccess(), nil
}

type TIBSListI64ServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler TIBSListI64Service
}

func (p *TIBSListI64ServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *TIBSListI64ServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *TIBSListI64ServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewTIBSListI64ServiceProcessor(handler TIBSListI64Service) *TIBSListI64ServiceProcessor {

  self257 := &TIBSListI64ServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self257.processorMap["putItem"] = &tIBSListI64ServiceProcessorPutItem{handler:handler}
  self257.processorMap["addChildItem"] = &tIBSListI64ServiceProcessorAddChildItem{handler:handler}
  self257.processorMap["addChildrenItem"] = &tIBSListI64ServiceProcessorAddChildrenItem{handler:handler}
  self257.processorMap["removeChildItem"] = &tIBSListI64ServiceProcessorRemoveChildItem{handler:handler}
  self257.processorMap["removeItem"] = &tIBSListI64ServiceProcessorRemoveItem{handler:handler}
  self257.processorMap["existed"] = &tIBSListI64ServiceProcessorExisted{handler:handler}
  self257.processorMap["getItem"] = &tIBSListI64ServiceProcessorGetItem{handler:handler}
  self257.processorMap["getSlice"] = &tIBSListI64ServiceProcessorGetSlice{handler:handler}
  self257.processorMap["getSliceFromItem"] = &tIBSListI64ServiceProcessorGetSliceFromItem{handler:handler}
  self257.processorMap["getSliceR"] = &tIBSListI64ServiceProcessorGetSliceR{handler:handler}
  self257.processorMap["getSliceFromItemR"] = &tIBSListI64ServiceProcessorGetSliceFromItemR{handler:handler}
  self257.processorMap["rangeQuery"] = &tIBSListI64ServiceProcessorRangeQuery{handler:handler}
  self257.processorMap["bulkLoad"] = &tIBSListI64ServiceProcessorBulkLoad{handler:handler}
  self257.processorMap["multiPut"] = &tIBSListI64ServiceProcessorMultiPut{handler:handler}
  self257.processorMap["getTotalCount"] = &tIBSListI64ServiceProcessorGetTotalCount{handler:handler}
  self257.processorMap["removeAll"] = &tIBSListI64ServiceProcessorRemoveAll{handler:handler}
return self257
}

func (p *TIBSListI64ServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x258 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x258.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush(ctx)
  return false, x258

}

type tIBSListI64ServiceProcessorPutItem struct {
  handler TIBSListI64Service
}

func (p *tIBSListI64ServiceProcessorPutItem) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TIBSListI64ServicePutItemArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("putItem", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TIBSListI64ServicePutItemResult{}
var retval *TPutItemResult_
  var err2 error
  if retval, err2 = p.handler.PutItem(ctx, args.BigsetID, args.Item); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing putItem: " + err2.Error())
    oprot.WriteMessageBegin("putItem", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("putItem", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tIBSListI64ServiceProcessorAddChildItem struct {
  handler TIBSListI64Service
}

func (p *tIBSListI64ServiceProcessorAddChildItem) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TIBSListI64ServiceAddChildItemArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("addChildItem", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TIBSListI64ServiceAddChildItemResult{}
var retval *TChildItemResult_
  var err2 error
  if retval, err2 = p.handler.AddChildItem(ctx, args.BsName, args.ItemKey, args.AChild, args.OpOption); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing addChildItem: " + err2.Error())
    oprot.WriteMessageBegin("addChildItem", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("addChildItem", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tIBSListI64ServiceProcessorAddChildrenItem struct {
  handler TIBSListI64Service
}

func (p *tIBSListI64ServiceProcessorAddChildrenItem) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TIBSListI64ServiceAddChildrenItemArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("addChildrenItem", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TIBSListI64ServiceAddChildrenItemResult{}
var retval *TChildItemResult_
  var err2 error
  if retval, err2 = p.handler.AddChildrenItem(ctx, args.BsName, args.ItemKey, args.AChild, args.OpOption); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing addChildrenItem: " + err2.Error())
    oprot.WriteMessageBegin("addChildrenItem", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("addChildrenItem", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tIBSListI64ServiceProcessorRemoveChildItem struct {
  handler TIBSListI64Service
}

func (p *tIBSListI64ServiceProcessorRemoveChildItem) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TIBSListI64ServiceRemoveChildItemArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("removeChildItem", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TIBSListI64ServiceRemoveChildItemResult{}
var retval *TChildItemResult_
  var err2 error
  if retval, err2 = p.handler.RemoveChildItem(ctx, args.BsName, args.ItemKey, args.AChild, args.OpOption); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing removeChildItem: " + err2.Error())
    oprot.WriteMessageBegin("removeChildItem", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("removeChildItem", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tIBSListI64ServiceProcessorRemoveItem struct {
  handler TIBSListI64Service
}

func (p *tIBSListI64ServiceProcessorRemoveItem) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TIBSListI64ServiceRemoveItemArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("removeItem", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TIBSListI64ServiceRemoveItemResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.RemoveItem(ctx, args.BigsetID, args.ItemKey); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing removeItem: " + err2.Error())
    oprot.WriteMessageBegin("removeItem", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("removeItem", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tIBSListI64ServiceProcessorExisted struct {
  handler TIBSListI64Service
}

func (p *tIBSListI64ServiceProcessorExisted) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TIBSListI64ServiceExistedArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("existed", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TIBSListI64ServiceExistedResult{}
var retval *TExistedResult_
  var err2 error
  if retval, err2 = p.handler.Existed(ctx, args.BigsetID, args.ItemKey); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing existed: " + err2.Error())
    oprot.WriteMessageBegin("existed", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("existed", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tIBSListI64ServiceProcessorGetItem struct {
  handler TIBSListI64Service
}

func (p *tIBSListI64ServiceProcessorGetItem) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TIBSListI64ServiceGetItemArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getItem", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TIBSListI64ServiceGetItemResult{}
var retval *TItemResult_
  var err2 error
  if retval, err2 = p.handler.GetItem(ctx, args.BigsetID, args.ItemKey); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getItem: " + err2.Error())
    oprot.WriteMessageBegin("getItem", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getItem", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tIBSListI64ServiceProcessorGetSlice struct {
  handler TIBSListI64Service
}

func (p *tIBSListI64ServiceProcessorGetSlice) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TIBSListI64ServiceGetSliceArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getSlice", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TIBSListI64ServiceGetSliceResult{}
var retval *TItemSetResult_
  var err2 error
  if retval, err2 = p.handler.GetSlice(ctx, args.BigsetID, args.FromIDX, args.Count); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getSlice: " + err2.Error())
    oprot.WriteMessageBegin("getSlice", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getSlice", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tIBSListI64ServiceProcessorGetSliceFromItem struct {
  handler TIBSListI64Service
}

func (p *tIBSListI64ServiceProcessorGetSliceFromItem) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TIBSListI64ServiceGetSliceFromItemArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getSliceFromItem", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TIBSListI64ServiceGetSliceFromItemResult{}
var retval *TItemSetResult_
  var err2 error
  if retval, err2 = p.handler.GetSliceFromItem(ctx, args.BigsetID, args.FromKey, args.Count); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getSliceFromItem: " + err2.Error())
    oprot.WriteMessageBegin("getSliceFromItem", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getSliceFromItem", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tIBSListI64ServiceProcessorGetSliceR struct {
  handler TIBSListI64Service
}

func (p *tIBSListI64ServiceProcessorGetSliceR) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TIBSListI64ServiceGetSliceRArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getSliceR", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TIBSListI64ServiceGetSliceRResult{}
var retval *TItemSetResult_
  var err2 error
  if retval, err2 = p.handler.GetSliceR(ctx, args.BigsetID, args.FromIDX, args.Count); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getSliceR: " + err2.Error())
    oprot.WriteMessageBegin("getSliceR", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getSliceR", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tIBSListI64ServiceProcessorGetSliceFromItemR struct {
  handler TIBSListI64Service
}

func (p *tIBSListI64ServiceProcessorGetSliceFromItemR) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TIBSListI64ServiceGetSliceFromItemRArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getSliceFromItemR", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TIBSListI64ServiceGetSliceFromItemRResult{}
var retval *TItemSetResult_
  var err2 error
  if retval, err2 = p.handler.GetSliceFromItemR(ctx, args.BigsetID, args.FromKey, args.Count); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getSliceFromItemR: " + err2.Error())
    oprot.WriteMessageBegin("getSliceFromItemR", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getSliceFromItemR", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tIBSListI64ServiceProcessorRangeQuery struct {
  handler TIBSListI64Service
}

func (p *tIBSListI64ServiceProcessorRangeQuery) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TIBSListI64ServiceRangeQueryArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("rangeQuery", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TIBSListI64ServiceRangeQueryResult{}
var retval *TItemSetResult_
  var err2 error
  if retval, err2 = p.handler.RangeQuery(ctx, args.BigsetID, args.StartKey, args.EndKey); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing rangeQuery: " + err2.Error())
    oprot.WriteMessageBegin("rangeQuery", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("rangeQuery", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tIBSListI64ServiceProcessorBulkLoad struct {
  handler TIBSListI64Service
}

func (p *tIBSListI64ServiceProcessorBulkLoad) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TIBSListI64ServiceBulkLoadArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("bulkLoad", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TIBSListI64ServiceBulkLoadResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.BulkLoad(ctx, args.BigsetID, args.SetData); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing bulkLoad: " + err2.Error())
    oprot.WriteMessageBegin("bulkLoad", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("bulkLoad", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tIBSListI64ServiceProcessorMultiPut struct {
  handler TIBSListI64Service
}

func (p *tIBSListI64ServiceProcessorMultiPut) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TIBSListI64ServiceMultiPutArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("multiPut", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TIBSListI64ServiceMultiPutResult{}
var retval *TMultiPutItemResult_
  var err2 error
  if retval, err2 = p.handler.MultiPut(ctx, args.BigsetID, args.SetData, args.GetAddedItems, args.GetReplacedItems); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing multiPut: " + err2.Error())
    oprot.WriteMessageBegin("multiPut", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("multiPut", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tIBSListI64ServiceProcessorGetTotalCount struct {
  handler TIBSListI64Service
}

func (p *tIBSListI64ServiceProcessorGetTotalCount) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TIBSListI64ServiceGetTotalCountArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getTotalCount", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TIBSListI64ServiceGetTotalCountResult{}
var retval int64
  var err2 error
  if retval, err2 = p.handler.GetTotalCount(ctx, args.BigsetID); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getTotalCount: " + err2.Error())
    oprot.WriteMessageBegin("getTotalCount", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("getTotalCount", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tIBSListI64ServiceProcessorRemoveAll struct {
  handler TIBSListI64Service
}

func (p *tIBSListI64ServiceProcessorRemoveAll) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TIBSListI64ServiceRemoveAllArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("removeAll", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TIBSListI64ServiceRemoveAllResult{}
var retval int64
  var err2 error
  if retval, err2 = p.handler.RemoveAll(ctx, args.BigsetID); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing removeAll: " + err2.Error())
    oprot.WriteMessageBegin("removeAll", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("removeAll", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - BigsetID
//  - Item
type TIBSListI64ServicePutItemArgs struct {
  BigsetID TKey `thrift:"bigsetID,1" db:"bigsetID" json:"bigsetID"`
  Item *TItem `thrift:"item,2" db:"item" json:"item"`
}

func NewTIBSListI64ServicePutItemArgs() *TIBSListI64ServicePutItemArgs {
  return &TIBSListI64ServicePutItemArgs{}
}


func (p *TIBSListI64ServicePutItemArgs) GetBigsetID() TKey {
  return p.BigsetID
}
var TIBSListI64ServicePutItemArgs_Item_DEFAULT *TItem
func (p *TIBSListI64ServicePutItemArgs) GetItem() *TItem {
  if !p.IsSetItem() {
    return TIBSListI64ServicePutItemArgs_Item_DEFAULT
  }
return p.Item
}
func (p *TIBSListI64ServicePutItemArgs) IsSetItem() bool {
  return p.Item != nil
}

func (p *TIBSListI64ServicePutItemArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TIBSListI64ServicePutItemArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TKey(v)
  p.BigsetID = temp
}
  return nil
}

func (p *TIBSListI64ServicePutItemArgs)  ReadField2(iprot thrift.TProtocol) error {
  p.Item = &TItem{}
  if err := p.Item.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Item), err)
  }
  return nil
}

func (p *TIBSListI64ServicePutItemArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("putItem_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TIBSListI64ServicePutItemArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("bigsetID", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:bigsetID: ", p), err) }
  if err := oprot.WriteI64(int64(p.BigsetID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.bigsetID (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:bigsetID: ", p), err) }
  return err
}

func (p *TIBSListI64ServicePutItemArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("item", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:item: ", p), err) }
  if err := p.Item.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Item), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:item: ", p), err) }
  return err
}

func (p *TIBSListI64ServicePutItemArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TIBSListI64ServicePutItemArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TIBSListI64ServicePutItemResult struct {
  Success *TPutItemResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTIBSListI64ServicePutItemResult() *TIBSListI64ServicePutItemResult {
  return &TIBSListI64ServicePutItemResult{}
}

var TIBSListI64ServicePutItemResult_Success_DEFAULT *TPutItemResult_
func (p *TIBSListI64ServicePutItemResult) GetSuccess() *TPutItemResult_ {
  if !p.IsSetSuccess() {
    return TIBSListI64ServicePutItemResult_Success_DEFAULT
  }
return p.Success
}
func (p *TIBSListI64ServicePutItemResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TIBSListI64ServicePutItemResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TIBSListI64ServicePutItemResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TPutItemResult_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TIBSListI64ServicePutItemResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("putItem_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TIBSListI64ServicePutItemResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TIBSListI64ServicePutItemResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TIBSListI64ServicePutItemResult(%+v)", *p)
}

// Attributes:
//  - BsName
//  - ItemKey
//  - AChild
//  - OpOption
type TIBSListI64ServiceAddChildItemArgs struct {
  BsName TKey `thrift:"bsName,1" db:"bsName" json:"bsName"`
  ItemKey TItemKey `thrift:"itemKey,2" db:"itemKey" json:"itemKey"`
  AChild TItemChild `thrift:"aChild,3" db:"aChild" json:"aChild"`
  OpOption TChildItemOptions `thrift:"opOption,4" db:"opOption" json:"opOption"`
}

func NewTIBSListI64ServiceAddChildItemArgs() *TIBSListI64ServiceAddChildItemArgs {
  return &TIBSListI64ServiceAddChildItemArgs{}
}


func (p *TIBSListI64ServiceAddChildItemArgs) GetBsName() TKey {
  return p.BsName
}

func (p *TIBSListI64ServiceAddChildItemArgs) GetItemKey() TItemKey {
  return p.ItemKey
}

func (p *TIBSListI64ServiceAddChildItemArgs) GetAChild() TItemChild {
  return p.AChild
}

func (p *TIBSListI64ServiceAddChildItemArgs) GetOpOption() TChildItemOptions {
  return p.OpOption
}
func (p *TIBSListI64ServiceAddChildItemArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TIBSListI64ServiceAddChildItemArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TKey(v)
  p.BsName = temp
}
  return nil
}

func (p *TIBSListI64ServiceAddChildItemArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := TItemKey(v)
  p.ItemKey = temp
}
  return nil
}

func (p *TIBSListI64ServiceAddChildItemArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := TItemChild(v)
  p.AChild = temp
}
  return nil
}

func (p *TIBSListI64ServiceAddChildItemArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  temp := TChildItemOptions(v)
  p.OpOption = temp
}
  return nil
}

func (p *TIBSListI64ServiceAddChildItemArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("addChildItem_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TIBSListI64ServiceAddChildItemArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("bsName", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:bsName: ", p), err) }
  if err := oprot.WriteI64(int64(p.BsName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.bsName (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:bsName: ", p), err) }
  return err
}

func (p *TIBSListI64ServiceAddChildItemArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("itemKey", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:itemKey: ", p), err) }
  if err := oprot.WriteBinary(p.ItemKey); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.itemKey (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:itemKey: ", p), err) }
  return err
}

func (p *TIBSListI64ServiceAddChildItemArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("aChild", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:aChild: ", p), err) }
  if err := oprot.WriteI64(int64(p.AChild)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.aChild (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:aChild: ", p), err) }
  return err
}

func (p *TIBSListI64ServiceAddChildItemArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("opOption", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:opOption: ", p), err) }
  if err := oprot.WriteI32(int32(p.OpOption)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.opOption (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:opOption: ", p), err) }
  return err
}

func (p *TIBSListI64ServiceAddChildItemArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TIBSListI64ServiceAddChildItemArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TIBSListI64ServiceAddChildItemResult struct {
  Success *TChildItemResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTIBSListI64ServiceAddChildItemResult() *TIBSListI64ServiceAddChildItemResult {
  return &TIBSListI64ServiceAddChildItemResult{}
}

var TIBSListI64ServiceAddChildItemResult_Success_DEFAULT *TChildItemResult_
func (p *TIBSListI64ServiceAddChildItemResult) GetSuccess() *TChildItemResult_ {
  if !p.IsSetSuccess() {
    return TIBSListI64ServiceAddChildItemResult_Success_DEFAULT
  }
return p.Success
}
func (p *TIBSListI64ServiceAddChildItemResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TIBSListI64ServiceAddChildItemResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TIBSListI64ServiceAddChildItemResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TChildItemResult_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TIBSListI64ServiceAddChildItemResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("addChildItem_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TIBSListI64ServiceAddChildItemResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TIBSListI64ServiceAddChildItemResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TIBSListI64ServiceAddChildItemResult(%+v)", *p)
}

// Attributes:
//  - BsName
//  - ItemKey
//  - AChild
//  - OpOption
type TIBSListI64ServiceAddChildrenItemArgs struct {
  BsName TKey `thrift:"bsName,1" db:"bsName" json:"bsName"`
  ItemKey TItemKey `thrift:"itemKey,2" db:"itemKey" json:"itemKey"`
  AChild []TItemChild `thrift:"aChild,3" db:"aChild" json:"aChild"`
  OpOption TChildItemOptions `thrift:"opOption,4" db:"opOption" json:"opOption"`
}

func NewTIBSListI64ServiceAddChildrenItemArgs() *TIBSListI64ServiceAddChildrenItemArgs {
  return &TIBSListI64ServiceAddChildrenItemArgs{}
}


func (p *TIBSListI64ServiceAddChildrenItemArgs) GetBsName() TKey {
  return p.BsName
}

func (p *TIBSListI64ServiceAddChildrenItemArgs) GetItemKey() TItemKey {
  return p.ItemKey
}

func (p *TIBSListI64ServiceAddChildrenItemArgs) GetAChild() []TItemChild {
  return p.AChild
}

func (p *TIBSListI64ServiceAddChildrenItemArgs) GetOpOption() TChildItemOptions {
  return p.OpOption
}
func (p *TIBSListI64ServiceAddChildrenItemArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TIBSListI64ServiceAddChildrenItemArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TKey(v)
  p.BsName = temp
}
  return nil
}

func (p *TIBSListI64ServiceAddChildrenItemArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := TItemKey(v)
  p.ItemKey = temp
}
  return nil
}

func (p *TIBSListI64ServiceAddChildrenItemArgs)  ReadField3(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]TItemChild, 0, size)
  p.AChild =  tSlice
  for i := 0; i < size; i ++ {
var _elem259 TItemChild
    if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := TItemChild(v)
    _elem259 = temp
}
    p.AChild = append(p.AChild, _elem259)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TIBSListI64ServiceAddChildrenItemArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  temp := TChildItemOptions(v)
  p.OpOption = temp
}
  return nil
}

func (p *TIBSListI64ServiceAddChildrenItemArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("addChildrenItem_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TIBSListI64ServiceAddChildrenItemArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("bsName", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:bsName: ", p), err) }
  if err := oprot.WriteI64(int64(p.BsName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.bsName (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:bsName: ", p), err) }
  return err
}

func (p *TIBSListI64ServiceAddChildrenItemArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("itemKey", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:itemKey: ", p), err) }
  if err := oprot.WriteBinary(p.ItemKey); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.itemKey (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:itemKey: ", p), err) }
  return err
}

func (p *TIBSListI64ServiceAddChildrenItemArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("aChild", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:aChild: ", p), err) }
  if err := oprot.WriteListBegin(thrift.I64, len(p.AChild)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.AChild {
    if err := oprot.WriteI64(int64(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:aChild: ", p), err) }
  return err
}

func (p *TIBSListI64ServiceAddChildrenItemArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("opOption", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:opOption: ", p), err) }
  if err := oprot.WriteI32(int32(p.OpOption)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.opOption (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:opOption: ", p), err) }
  return err
}

func (p *TIBSListI64ServiceAddChildrenItemArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TIBSListI64ServiceAddChildrenItemArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TIBSListI64ServiceAddChildrenItemResult struct {
  Success *TChildItemResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTIBSListI64ServiceAddChildrenItemResult() *TIBSListI64ServiceAddChildrenItemResult {
  return &TIBSListI64ServiceAddChildrenItemResult{}
}

var TIBSListI64ServiceAddChildrenItemResult_Success_DEFAULT *TChildItemResult_
func (p *TIBSListI64ServiceAddChildrenItemResult) GetSuccess() *TChildItemResult_ {
  if !p.IsSetSuccess() {
    return TIBSListI64ServiceAddChildrenItemResult_Success_DEFAULT
  }
return p.Success
}
func (p *TIBSListI64ServiceAddChildrenItemResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TIBSListI64ServiceAddChildrenItemResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TIBSListI64ServiceAddChildrenItemResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TChildItemResult_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TIBSListI64ServiceAddChildrenItemResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("addChildrenItem_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TIBSListI64ServiceAddChildrenItemResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TIBSListI64ServiceAddChildrenItemResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TIBSListI64ServiceAddChildrenItemResult(%+v)", *p)
}

// Attributes:
//  - BsName
//  - ItemKey
//  - AChild
//  - OpOption
type TIBSListI64ServiceRemoveChildItemArgs struct {
  BsName TKey `thrift:"bsName,1" db:"bsName" json:"bsName"`
  ItemKey TItemKey `thrift:"itemKey,2" db:"itemKey" json:"itemKey"`
  AChild TItemChild `thrift:"aChild,3" db:"aChild" json:"aChild"`
  OpOption TChildItemOptions `thrift:"opOption,4" db:"opOption" json:"opOption"`
}

func NewTIBSListI64ServiceRemoveChildItemArgs() *TIBSListI64ServiceRemoveChildItemArgs {
  return &TIBSListI64ServiceRemoveChildItemArgs{}
}


func (p *TIBSListI64ServiceRemoveChildItemArgs) GetBsName() TKey {
  return p.BsName
}

func (p *TIBSListI64ServiceRemoveChildItemArgs) GetItemKey() TItemKey {
  return p.ItemKey
}

func (p *TIBSListI64ServiceRemoveChildItemArgs) GetAChild() TItemChild {
  return p.AChild
}

func (p *TIBSListI64ServiceRemoveChildItemArgs) GetOpOption() TChildItemOptions {
  return p.OpOption
}
func (p *TIBSListI64ServiceRemoveChildItemArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TIBSListI64ServiceRemoveChildItemArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TKey(v)
  p.BsName = temp
}
  return nil
}

func (p *TIBSListI64ServiceRemoveChildItemArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := TItemKey(v)
  p.ItemKey = temp
}
  return nil
}

func (p *TIBSListI64ServiceRemoveChildItemArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := TItemChild(v)
  p.AChild = temp
}
  return nil
}

func (p *TIBSListI64ServiceRemoveChildItemArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  temp := TChildItemOptions(v)
  p.OpOption = temp
}
  return nil
}

func (p *TIBSListI64ServiceRemoveChildItemArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("removeChildItem_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TIBSListI64ServiceRemoveChildItemArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("bsName", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:bsName: ", p), err) }
  if err := oprot.WriteI64(int64(p.BsName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.bsName (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:bsName: ", p), err) }
  return err
}

func (p *TIBSListI64ServiceRemoveChildItemArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("itemKey", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:itemKey: ", p), err) }
  if err := oprot.WriteBinary(p.ItemKey); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.itemKey (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:itemKey: ", p), err) }
  return err
}

func (p *TIBSListI64ServiceRemoveChildItemArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("aChild", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:aChild: ", p), err) }
  if err := oprot.WriteI64(int64(p.AChild)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.aChild (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:aChild: ", p), err) }
  return err
}

func (p *TIBSListI64ServiceRemoveChildItemArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("opOption", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:opOption: ", p), err) }
  if err := oprot.WriteI32(int32(p.OpOption)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.opOption (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:opOption: ", p), err) }
  return err
}

func (p *TIBSListI64ServiceRemoveChildItemArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TIBSListI64ServiceRemoveChildItemArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TIBSListI64ServiceRemoveChildItemResult struct {
  Success *TChildItemResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTIBSListI64ServiceRemoveChildItemResult() *TIBSListI64ServiceRemoveChildItemResult {
  return &TIBSListI64ServiceRemoveChildItemResult{}
}

var TIBSListI64ServiceRemoveChildItemResult_Success_DEFAULT *TChildItemResult_
func (p *TIBSListI64ServiceRemoveChildItemResult) GetSuccess() *TChildItemResult_ {
  if !p.IsSetSuccess() {
    return TIBSListI64ServiceRemoveChildItemResult_Success_DEFAULT
  }
return p.Success
}
func (p *TIBSListI64ServiceRemoveChildItemResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TIBSListI64ServiceRemoveChildItemResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TIBSListI64ServiceRemoveChildItemResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TChildItemResult_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TIBSListI64ServiceRemoveChildItemResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("removeChildItem_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TIBSListI64ServiceRemoveChildItemResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TIBSListI64ServiceRemoveChildItemResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TIBSListI64ServiceRemoveChildItemResult(%+v)", *p)
}

// Attributes:
//  - BigsetID
//  - ItemKey
type TIBSListI64ServiceRemoveItemArgs struct {
  BigsetID TKey `thrift:"bigsetID,1" db:"bigsetID" json:"bigsetID"`
  ItemKey TItemKey `thrift:"itemKey,2" db:"itemKey" json:"itemKey"`
}

func NewTIBSListI64ServiceRemoveItemArgs() *TIBSListI64ServiceRemoveItemArgs {
  return &TIBSListI64ServiceRemoveItemArgs{}
}


func (p *TIBSListI64ServiceRemoveItemArgs) GetBigsetID() TKey {
  return p.BigsetID
}

func (p *TIBSListI64ServiceRemoveItemArgs) GetItemKey() TItemKey {
  return p.ItemKey
}
func (p *TIBSListI64ServiceRemoveItemArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TIBSListI64ServiceRemoveItemArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TKey(v)
  p.BigsetID = temp
}
  return nil
}

func (p *TIBSListI64ServiceRemoveItemArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := TItemKey(v)
  p.ItemKey = temp
}
  return nil
}

func (p *TIBSListI64ServiceRemoveItemArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("removeItem_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TIBSListI64ServiceRemoveItemArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("bigsetID", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:bigsetID: ", p), err) }
  if err := oprot.WriteI64(int64(p.BigsetID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.bigsetID (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:bigsetID: ", p), err) }
  return err
}

func (p *TIBSListI64ServiceRemoveItemArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("itemKey", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:itemKey: ", p), err) }
  if err := oprot.WriteBinary(p.ItemKey); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.itemKey (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:itemKey: ", p), err) }
  return err
}

func (p *TIBSListI64ServiceRemoveItemArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TIBSListI64ServiceRemoveItemArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TIBSListI64ServiceRemoveItemResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTIBSListI64ServiceRemoveItemResult() *TIBSListI64ServiceRemoveItemResult {
  return &TIBSListI64ServiceRemoveItemResult{}
}

var TIBSListI64ServiceRemoveItemResult_Success_DEFAULT bool
func (p *TIBSListI64ServiceRemoveItemResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return TIBSListI64ServiceRemoveItemResult_Success_DEFAULT
  }
return *p.Success
}
func (p *TIBSListI64ServiceRemoveItemResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TIBSListI64ServiceRemoveItemResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TIBSListI64ServiceRemoveItemResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *TIBSListI64ServiceRemoveItemResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("removeItem_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TIBSListI64ServiceRemoveItemResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TIBSListI64ServiceRemoveItemResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TIBSListI64ServiceRemoveItemResult(%+v)", *p)
}

// Attributes:
//  - BigsetID
//  - ItemKey
type TIBSListI64ServiceExistedArgs struct {
  BigsetID TKey `thrift:"bigsetID,1" db:"bigsetID" json:"bigsetID"`
  ItemKey TItemKey `thrift:"itemKey,2" db:"itemKey" json:"itemKey"`
}

func NewTIBSListI64ServiceExistedArgs() *TIBSListI64ServiceExistedArgs {
  return &TIBSListI64ServiceExistedArgs{}
}


func (p *TIBSListI64ServiceExistedArgs) GetBigsetID() TKey {
  return p.BigsetID
}

func (p *TIBSListI64ServiceExistedArgs) GetItemKey() TItemKey {
  return p.ItemKey
}
func (p *TIBSListI64ServiceExistedArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TIBSListI64ServiceExistedArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TKey(v)
  p.BigsetID = temp
}
  return nil
}

func (p *TIBSListI64ServiceExistedArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := TItemKey(v)
  p.ItemKey = temp
}
  return nil
}

func (p *TIBSListI64ServiceExistedArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("existed_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TIBSListI64ServiceExistedArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("bigsetID", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:bigsetID: ", p), err) }
  if err := oprot.WriteI64(int64(p.BigsetID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.bigsetID (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:bigsetID: ", p), err) }
  return err
}

func (p *TIBSListI64ServiceExistedArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("itemKey", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:itemKey: ", p), err) }
  if err := oprot.WriteBinary(p.ItemKey); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.itemKey (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:itemKey: ", p), err) }
  return err
}

func (p *TIBSListI64ServiceExistedArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TIBSListI64ServiceExistedArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TIBSListI64ServiceExistedResult struct {
  Success *TExistedResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTIBSListI64ServiceExistedResult() *TIBSListI64ServiceExistedResult {
  return &TIBSListI64ServiceExistedResult{}
}

var TIBSListI64ServiceExistedResult_Success_DEFAULT *TExistedResult_
func (p *TIBSListI64ServiceExistedResult) GetSuccess() *TExistedResult_ {
  if !p.IsSetSuccess() {
    return TIBSListI64ServiceExistedResult_Success_DEFAULT
  }
return p.Success
}
func (p *TIBSListI64ServiceExistedResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TIBSListI64ServiceExistedResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TIBSListI64ServiceExistedResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TExistedResult_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TIBSListI64ServiceExistedResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("existed_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TIBSListI64ServiceExistedResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TIBSListI64ServiceExistedResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TIBSListI64ServiceExistedResult(%+v)", *p)
}

// Attributes:
//  - BigsetID
//  - ItemKey
type TIBSListI64ServiceGetItemArgs struct {
  BigsetID TKey `thrift:"bigsetID,1" db:"bigsetID" json:"bigsetID"`
  ItemKey TItemKey `thrift:"itemKey,2" db:"itemKey" json:"itemKey"`
}

func NewTIBSListI64ServiceGetItemArgs() *TIBSListI64ServiceGetItemArgs {
  return &TIBSListI64ServiceGetItemArgs{}
}


func (p *TIBSListI64ServiceGetItemArgs) GetBigsetID() TKey {
  return p.BigsetID
}

func (p *TIBSListI64ServiceGetItemArgs) GetItemKey() TItemKey {
  return p.ItemKey
}
func (p *TIBSListI64ServiceGetItemArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TIBSListI64ServiceGetItemArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TKey(v)
  p.BigsetID = temp
}
  return nil
}

func (p *TIBSListI64ServiceGetItemArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := TItemKey(v)
  p.ItemKey = temp
}
  return nil
}

func (p *TIBSListI64ServiceGetItemArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getItem_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TIBSListI64ServiceGetItemArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("bigsetID", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:bigsetID: ", p), err) }
  if err := oprot.WriteI64(int64(p.BigsetID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.bigsetID (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:bigsetID: ", p), err) }
  return err
}

func (p *TIBSListI64ServiceGetItemArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("itemKey", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:itemKey: ", p), err) }
  if err := oprot.WriteBinary(p.ItemKey); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.itemKey (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:itemKey: ", p), err) }
  return err
}

func (p *TIBSListI64ServiceGetItemArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TIBSListI64ServiceGetItemArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TIBSListI64ServiceGetItemResult struct {
  Success *TItemResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTIBSListI64ServiceGetItemResult() *TIBSListI64ServiceGetItemResult {
  return &TIBSListI64ServiceGetItemResult{}
}

var TIBSListI64ServiceGetItemResult_Success_DEFAULT *TItemResult_
func (p *TIBSListI64ServiceGetItemResult) GetSuccess() *TItemResult_ {
  if !p.IsSetSuccess() {
    return TIBSListI64ServiceGetItemResult_Success_DEFAULT
  }
return p.Success
}
func (p *TIBSListI64ServiceGetItemResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TIBSListI64ServiceGetItemResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TIBSListI64ServiceGetItemResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TItemResult_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TIBSListI64ServiceGetItemResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getItem_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TIBSListI64ServiceGetItemResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TIBSListI64ServiceGetItemResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TIBSListI64ServiceGetItemResult(%+v)", *p)
}

// Attributes:
//  - BigsetID
//  - FromIDX
//  - Count
type TIBSListI64ServiceGetSliceArgs struct {
  BigsetID TKey `thrift:"bigsetID,1" db:"bigsetID" json:"bigsetID"`
  FromIDX int32 `thrift:"fromIDX,2" db:"fromIDX" json:"fromIDX"`
  Count int32 `thrift:"count,3" db:"count" json:"count"`
}

func NewTIBSListI64ServiceGetSliceArgs() *TIBSListI64ServiceGetSliceArgs {
  return &TIBSListI64ServiceGetSliceArgs{}
}


func (p *TIBSListI64ServiceGetSliceArgs) GetBigsetID() TKey {
  return p.BigsetID
}

func (p *TIBSListI64ServiceGetSliceArgs) GetFromIDX() int32 {
  return p.FromIDX
}

func (p *TIBSListI64ServiceGetSliceArgs) GetCount() int32 {
  return p.Count
}
func (p *TIBSListI64ServiceGetSliceArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TIBSListI64ServiceGetSliceArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TKey(v)
  p.BigsetID = temp
}
  return nil
}

func (p *TIBSListI64ServiceGetSliceArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.FromIDX = v
}
  return nil
}

func (p *TIBSListI64ServiceGetSliceArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Count = v
}
  return nil
}

func (p *TIBSListI64ServiceGetSliceArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getSlice_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TIBSListI64ServiceGetSliceArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("bigsetID", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:bigsetID: ", p), err) }
  if err := oprot.WriteI64(int64(p.BigsetID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.bigsetID (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:bigsetID: ", p), err) }
  return err
}

func (p *TIBSListI64ServiceGetSliceArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("fromIDX", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:fromIDX: ", p), err) }
  if err := oprot.WriteI32(int32(p.FromIDX)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.fromIDX (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:fromIDX: ", p), err) }
  return err
}

func (p *TIBSListI64ServiceGetSliceArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("count", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:count: ", p), err) }
  if err := oprot.WriteI32(int32(p.Count)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.count (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:count: ", p), err) }
  return err
}

func (p *TIBSListI64ServiceGetSliceArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TIBSListI64ServiceGetSliceArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TIBSListI64ServiceGetSliceResult struct {
  Success *TItemSetResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTIBSListI64ServiceGetSliceResult() *TIBSListI64ServiceGetSliceResult {
  return &TIBSListI64ServiceGetSliceResult{}
}

var TIBSListI64ServiceGetSliceResult_Success_DEFAULT *TItemSetResult_
func (p *TIBSListI64ServiceGetSliceResult) GetSuccess() *TItemSetResult_ {
  if !p.IsSetSuccess() {
    return TIBSListI64ServiceGetSliceResult_Success_DEFAULT
  }
return p.Success
}
func (p *TIBSListI64ServiceGetSliceResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TIBSListI64ServiceGetSliceResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TIBSListI64ServiceGetSliceResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TItemSetResult_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TIBSListI64ServiceGetSliceResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getSlice_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TIBSListI64ServiceGetSliceResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TIBSListI64ServiceGetSliceResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TIBSListI64ServiceGetSliceResult(%+v)", *p)
}

// Attributes:
//  - BigsetID
//  - FromKey
//  - Count
type TIBSListI64ServiceGetSliceFromItemArgs struct {
  BigsetID TKey `thrift:"bigsetID,1" db:"bigsetID" json:"bigsetID"`
  FromKey TItemKey `thrift:"fromKey,2" db:"fromKey" json:"fromKey"`
  Count int32 `thrift:"count,3" db:"count" json:"count"`
}

func NewTIBSListI64ServiceGetSliceFromItemArgs() *TIBSListI64ServiceGetSliceFromItemArgs {
  return &TIBSListI64ServiceGetSliceFromItemArgs{}
}


func (p *TIBSListI64ServiceGetSliceFromItemArgs) GetBigsetID() TKey {
  return p.BigsetID
}

func (p *TIBSListI64ServiceGetSliceFromItemArgs) GetFromKey() TItemKey {
  return p.FromKey
}

func (p *TIBSListI64ServiceGetSliceFromItemArgs) GetCount() int32 {
  return p.Count
}
func (p *TIBSListI64ServiceGetSliceFromItemArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TIBSListI64ServiceGetSliceFromItemArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TKey(v)
  p.BigsetID = temp
}
  return nil
}

func (p *TIBSListI64ServiceGetSliceFromItemArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := TItemKey(v)
  p.FromKey = temp
}
  return nil
}

func (p *TIBSListI64ServiceGetSliceFromItemArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Count = v
}
  return nil
}

func (p *TIBSListI64ServiceGetSliceFromItemArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getSliceFromItem_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TIBSListI64ServiceGetSliceFromItemArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("bigsetID", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:bigsetID: ", p), err) }
  if err := oprot.WriteI64(int64(p.BigsetID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.bigsetID (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:bigsetID: ", p), err) }
  return err
}

func (p *TIBSListI64ServiceGetSliceFromItemArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("fromKey", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:fromKey: ", p), err) }
  if err := oprot.WriteBinary(p.FromKey); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.fromKey (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:fromKey: ", p), err) }
  return err
}

func (p *TIBSListI64ServiceGetSliceFromItemArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("count", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:count: ", p), err) }
  if err := oprot.WriteI32(int32(p.Count)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.count (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:count: ", p), err) }
  return err
}

func (p *TIBSListI64ServiceGetSliceFromItemArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TIBSListI64ServiceGetSliceFromItemArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TIBSListI64ServiceGetSliceFromItemResult struct {
  Success *TItemSetResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTIBSListI64ServiceGetSliceFromItemResult() *TIBSListI64ServiceGetSliceFromItemResult {
  return &TIBSListI64ServiceGetSliceFromItemResult{}
}

var TIBSListI64ServiceGetSliceFromItemResult_Success_DEFAULT *TItemSetResult_
func (p *TIBSListI64ServiceGetSliceFromItemResult) GetSuccess() *TItemSetResult_ {
  if !p.IsSetSuccess() {
    return TIBSListI64ServiceGetSliceFromItemResult_Success_DEFAULT
  }
return p.Success
}
func (p *TIBSListI64ServiceGetSliceFromItemResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TIBSListI64ServiceGetSliceFromItemResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TIBSListI64ServiceGetSliceFromItemResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TItemSetResult_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TIBSListI64ServiceGetSliceFromItemResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getSliceFromItem_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TIBSListI64ServiceGetSliceFromItemResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TIBSListI64ServiceGetSliceFromItemResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TIBSListI64ServiceGetSliceFromItemResult(%+v)", *p)
}

// Attributes:
//  - BigsetID
//  - FromIDX
//  - Count
type TIBSListI64ServiceGetSliceRArgs struct {
  BigsetID TKey `thrift:"bigsetID,1" db:"bigsetID" json:"bigsetID"`
  FromIDX int32 `thrift:"fromIDX,2" db:"fromIDX" json:"fromIDX"`
  Count int32 `thrift:"count,3" db:"count" json:"count"`
}

func NewTIBSListI64ServiceGetSliceRArgs() *TIBSListI64ServiceGetSliceRArgs {
  return &TIBSListI64ServiceGetSliceRArgs{}
}


func (p *TIBSListI64ServiceGetSliceRArgs) GetBigsetID() TKey {
  return p.BigsetID
}

func (p *TIBSListI64ServiceGetSliceRArgs) GetFromIDX() int32 {
  return p.FromIDX
}

func (p *TIBSListI64ServiceGetSliceRArgs) GetCount() int32 {
  return p.Count
}
func (p *TIBSListI64ServiceGetSliceRArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TIBSListI64ServiceGetSliceRArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TKey(v)
  p.BigsetID = temp
}
  return nil
}

func (p *TIBSListI64ServiceGetSliceRArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.FromIDX = v
}
  return nil
}

func (p *TIBSListI64ServiceGetSliceRArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Count = v
}
  return nil
}

func (p *TIBSListI64ServiceGetSliceRArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getSliceR_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TIBSListI64ServiceGetSliceRArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("bigsetID", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:bigsetID: ", p), err) }
  if err := oprot.WriteI64(int64(p.BigsetID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.bigsetID (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:bigsetID: ", p), err) }
  return err
}

func (p *TIBSListI64ServiceGetSliceRArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("fromIDX", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:fromIDX: ", p), err) }
  if err := oprot.WriteI32(int32(p.FromIDX)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.fromIDX (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:fromIDX: ", p), err) }
  return err
}

func (p *TIBSListI64ServiceGetSliceRArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("count", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:count: ", p), err) }
  if err := oprot.WriteI32(int32(p.Count)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.count (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:count: ", p), err) }
  return err
}

func (p *TIBSListI64ServiceGetSliceRArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TIBSListI64ServiceGetSliceRArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TIBSListI64ServiceGetSliceRResult struct {
  Success *TItemSetResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTIBSListI64ServiceGetSliceRResult() *TIBSListI64ServiceGetSliceRResult {
  return &TIBSListI64ServiceGetSliceRResult{}
}

var TIBSListI64ServiceGetSliceRResult_Success_DEFAULT *TItemSetResult_
func (p *TIBSListI64ServiceGetSliceRResult) GetSuccess() *TItemSetResult_ {
  if !p.IsSetSuccess() {
    return TIBSListI64ServiceGetSliceRResult_Success_DEFAULT
  }
return p.Success
}
func (p *TIBSListI64ServiceGetSliceRResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TIBSListI64ServiceGetSliceRResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TIBSListI64ServiceGetSliceRResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TItemSetResult_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TIBSListI64ServiceGetSliceRResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getSliceR_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TIBSListI64ServiceGetSliceRResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TIBSListI64ServiceGetSliceRResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TIBSListI64ServiceGetSliceRResult(%+v)", *p)
}

// Attributes:
//  - BigsetID
//  - FromKey
//  - Count
type TIBSListI64ServiceGetSliceFromItemRArgs struct {
  BigsetID TKey `thrift:"bigsetID,1" db:"bigsetID" json:"bigsetID"`
  FromKey TItemKey `thrift:"fromKey,2" db:"fromKey" json:"fromKey"`
  Count int32 `thrift:"count,3" db:"count" json:"count"`
}

func NewTIBSListI64ServiceGetSliceFromItemRArgs() *TIBSListI64ServiceGetSliceFromItemRArgs {
  return &TIBSListI64ServiceGetSliceFromItemRArgs{}
}


func (p *TIBSListI64ServiceGetSliceFromItemRArgs) GetBigsetID() TKey {
  return p.BigsetID
}

func (p *TIBSListI64ServiceGetSliceFromItemRArgs) GetFromKey() TItemKey {
  return p.FromKey
}

func (p *TIBSListI64ServiceGetSliceFromItemRArgs) GetCount() int32 {
  return p.Count
}
func (p *TIBSListI64ServiceGetSliceFromItemRArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TIBSListI64ServiceGetSliceFromItemRArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TKey(v)
  p.BigsetID = temp
}
  return nil
}

func (p *TIBSListI64ServiceGetSliceFromItemRArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := TItemKey(v)
  p.FromKey = temp
}
  return nil
}

func (p *TIBSListI64ServiceGetSliceFromItemRArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Count = v
}
  return nil
}

func (p *TIBSListI64ServiceGetSliceFromItemRArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getSliceFromItemR_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TIBSListI64ServiceGetSliceFromItemRArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("bigsetID", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:bigsetID: ", p), err) }
  if err := oprot.WriteI64(int64(p.BigsetID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.bigsetID (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:bigsetID: ", p), err) }
  return err
}

func (p *TIBSListI64ServiceGetSliceFromItemRArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("fromKey", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:fromKey: ", p), err) }
  if err := oprot.WriteBinary(p.FromKey); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.fromKey (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:fromKey: ", p), err) }
  return err
}

func (p *TIBSListI64ServiceGetSliceFromItemRArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("count", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:count: ", p), err) }
  if err := oprot.WriteI32(int32(p.Count)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.count (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:count: ", p), err) }
  return err
}

func (p *TIBSListI64ServiceGetSliceFromItemRArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TIBSListI64ServiceGetSliceFromItemRArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TIBSListI64ServiceGetSliceFromItemRResult struct {
  Success *TItemSetResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTIBSListI64ServiceGetSliceFromItemRResult() *TIBSListI64ServiceGetSliceFromItemRResult {
  return &TIBSListI64ServiceGetSliceFromItemRResult{}
}

var TIBSListI64ServiceGetSliceFromItemRResult_Success_DEFAULT *TItemSetResult_
func (p *TIBSListI64ServiceGetSliceFromItemRResult) GetSuccess() *TItemSetResult_ {
  if !p.IsSetSuccess() {
    return TIBSListI64ServiceGetSliceFromItemRResult_Success_DEFAULT
  }
return p.Success
}
func (p *TIBSListI64ServiceGetSliceFromItemRResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TIBSListI64ServiceGetSliceFromItemRResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TIBSListI64ServiceGetSliceFromItemRResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TItemSetResult_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TIBSListI64ServiceGetSliceFromItemRResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getSliceFromItemR_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TIBSListI64ServiceGetSliceFromItemRResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TIBSListI64ServiceGetSliceFromItemRResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TIBSListI64ServiceGetSliceFromItemRResult(%+v)", *p)
}

// Attributes:
//  - BigsetID
//  - StartKey
//  - EndKey
type TIBSListI64ServiceRangeQueryArgs struct {
  BigsetID TKey `thrift:"bigsetID,1" db:"bigsetID" json:"bigsetID"`
  StartKey TItemKey `thrift:"startKey,2" db:"startKey" json:"startKey"`
  EndKey TItemKey `thrift:"endKey,3" db:"endKey" json:"endKey"`
}

func NewTIBSListI64ServiceRangeQueryArgs() *TIBSListI64ServiceRangeQueryArgs {
  return &TIBSListI64ServiceRangeQueryArgs{}
}


func (p *TIBSListI64ServiceRangeQueryArgs) GetBigsetID() TKey {
  return p.BigsetID
}

func (p *TIBSListI64ServiceRangeQueryArgs) GetStartKey() TItemKey {
  return p.StartKey
}

func (p *TIBSListI64ServiceRangeQueryArgs) GetEndKey() TItemKey {
  return p.EndKey
}
func (p *TIBSListI64ServiceRangeQueryArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TIBSListI64ServiceRangeQueryArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TKey(v)
  p.BigsetID = temp
}
  return nil
}

func (p *TIBSListI64ServiceRangeQueryArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := TItemKey(v)
  p.StartKey = temp
}
  return nil
}

func (p *TIBSListI64ServiceRangeQueryArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := TItemKey(v)
  p.EndKey = temp
}
  return nil
}

func (p *TIBSListI64ServiceRangeQueryArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("rangeQuery_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TIBSListI64ServiceRangeQueryArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("bigsetID", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:bigsetID: ", p), err) }
  if err := oprot.WriteI64(int64(p.BigsetID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.bigsetID (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:bigsetID: ", p), err) }
  return err
}

func (p *TIBSListI64ServiceRangeQueryArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("startKey", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:startKey: ", p), err) }
  if err := oprot.WriteBinary(p.StartKey); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.startKey (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:startKey: ", p), err) }
  return err
}

func (p *TIBSListI64ServiceRangeQueryArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("endKey", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:endKey: ", p), err) }
  if err := oprot.WriteBinary(p.EndKey); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.endKey (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:endKey: ", p), err) }
  return err
}

func (p *TIBSListI64ServiceRangeQueryArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TIBSListI64ServiceRangeQueryArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TIBSListI64ServiceRangeQueryResult struct {
  Success *TItemSetResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTIBSListI64ServiceRangeQueryResult() *TIBSListI64ServiceRangeQueryResult {
  return &TIBSListI64ServiceRangeQueryResult{}
}

var TIBSListI64ServiceRangeQueryResult_Success_DEFAULT *TItemSetResult_
func (p *TIBSListI64ServiceRangeQueryResult) GetSuccess() *TItemSetResult_ {
  if !p.IsSetSuccess() {
    return TIBSListI64ServiceRangeQueryResult_Success_DEFAULT
  }
return p.Success
}
func (p *TIBSListI64ServiceRangeQueryResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TIBSListI64ServiceRangeQueryResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TIBSListI64ServiceRangeQueryResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TItemSetResult_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TIBSListI64ServiceRangeQueryResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("rangeQuery_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TIBSListI64ServiceRangeQueryResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TIBSListI64ServiceRangeQueryResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TIBSListI64ServiceRangeQueryResult(%+v)", *p)
}

// Attributes:
//  - BigsetID
//  - SetData
type TIBSListI64ServiceBulkLoadArgs struct {
  BigsetID TKey `thrift:"bigsetID,1" db:"bigsetID" json:"bigsetID"`
  SetData *TItemSet `thrift:"setData,2" db:"setData" json:"setData"`
}

func NewTIBSListI64ServiceBulkLoadArgs() *TIBSListI64ServiceBulkLoadArgs {
  return &TIBSListI64ServiceBulkLoadArgs{}
}


func (p *TIBSListI64ServiceBulkLoadArgs) GetBigsetID() TKey {
  return p.BigsetID
}
var TIBSListI64ServiceBulkLoadArgs_SetData_DEFAULT *TItemSet
func (p *TIBSListI64ServiceBulkLoadArgs) GetSetData() *TItemSet {
  if !p.IsSetSetData() {
    return TIBSListI64ServiceBulkLoadArgs_SetData_DEFAULT
  }
return p.SetData
}
func (p *TIBSListI64ServiceBulkLoadArgs) IsSetSetData() bool {
  return p.SetData != nil
}

func (p *TIBSListI64ServiceBulkLoadArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TIBSListI64ServiceBulkLoadArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TKey(v)
  p.BigsetID = temp
}
  return nil
}

func (p *TIBSListI64ServiceBulkLoadArgs)  ReadField2(iprot thrift.TProtocol) error {
  p.SetData = &TItemSet{}
  if err := p.SetData.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SetData), err)
  }
  return nil
}

func (p *TIBSListI64ServiceBulkLoadArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("bulkLoad_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TIBSListI64ServiceBulkLoadArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("bigsetID", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:bigsetID: ", p), err) }
  if err := oprot.WriteI64(int64(p.BigsetID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.bigsetID (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:bigsetID: ", p), err) }
  return err
}

func (p *TIBSListI64ServiceBulkLoadArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("setData", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:setData: ", p), err) }
  if err := p.SetData.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SetData), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:setData: ", p), err) }
  return err
}

func (p *TIBSListI64ServiceBulkLoadArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TIBSListI64ServiceBulkLoadArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TIBSListI64ServiceBulkLoadResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTIBSListI64ServiceBulkLoadResult() *TIBSListI64ServiceBulkLoadResult {
  return &TIBSListI64ServiceBulkLoadResult{}
}

var TIBSListI64ServiceBulkLoadResult_Success_DEFAULT bool
func (p *TIBSListI64ServiceBulkLoadResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return TIBSListI64ServiceBulkLoadResult_Success_DEFAULT
  }
return *p.Success
}
func (p *TIBSListI64ServiceBulkLoadResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TIBSListI64ServiceBulkLoadResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TIBSListI64ServiceBulkLoadResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *TIBSListI64ServiceBulkLoadResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("bulkLoad_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TIBSListI64ServiceBulkLoadResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TIBSListI64ServiceBulkLoadResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TIBSListI64ServiceBulkLoadResult(%+v)", *p)
}

// Attributes:
//  - BigsetID
//  - SetData
//  - GetAddedItems
//  - GetReplacedItems
type TIBSListI64ServiceMultiPutArgs struct {
  BigsetID TKey `thrift:"bigsetID,1" db:"bigsetID" json:"bigsetID"`
  SetData *TItemSet `thrift:"setData,2" db:"setData" json:"setData"`
  GetAddedItems bool `thrift:"getAddedItems,3" db:"getAddedItems" json:"getAddedItems"`
  GetReplacedItems bool `thrift:"getReplacedItems,4" db:"getReplacedItems" json:"getReplacedItems"`
}

func NewTIBSListI64ServiceMultiPutArgs() *TIBSListI64ServiceMultiPutArgs {
  return &TIBSListI64ServiceMultiPutArgs{}
}


func (p *TIBSListI64ServiceMultiPutArgs) GetBigsetID() TKey {
  return p.BigsetID
}
var TIBSListI64ServiceMultiPutArgs_SetData_DEFAULT *TItemSet
func (p *TIBSListI64ServiceMultiPutArgs) GetSetData() *TItemSet {
  if !p.IsSetSetData() {
    return TIBSListI64ServiceMultiPutArgs_SetData_DEFAULT
  }
return p.SetData
}

func (p *TIBSListI64ServiceMultiPutArgs) GetGetAddedItems() bool {
  return p.GetAddedItems
}

func (p *TIBSListI64ServiceMultiPutArgs) GetGetReplacedItems() bool {
  return p.GetReplacedItems
}
func (p *TIBSListI64ServiceMultiPutArgs) IsSetSetData() bool {
  return p.SetData != nil
}

func (p *TIBSListI64ServiceMultiPutArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TIBSListI64ServiceMultiPutArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TKey(v)
  p.BigsetID = temp
}
  return nil
}

func (p *TIBSListI64ServiceMultiPutArgs)  ReadField2(iprot thrift.TProtocol) error {
  p.SetData = &TItemSet{}
  if err := p.SetData.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SetData), err)
  }
  return nil
}

func (p *TIBSListI64ServiceMultiPutArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.GetAddedItems = v
}
  return nil
}

func (p *TIBSListI64ServiceMultiPutArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.GetReplacedItems = v
}
  return nil
}

func (p *TIBSListI64ServiceMultiPutArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("multiPut_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TIBSListI64ServiceMultiPutArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("bigsetID", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:bigsetID: ", p), err) }
  if err := oprot.WriteI64(int64(p.BigsetID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.bigsetID (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:bigsetID: ", p), err) }
  return err
}

func (p *TIBSListI64ServiceMultiPutArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("setData", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:setData: ", p), err) }
  if err := p.SetData.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SetData), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:setData: ", p), err) }
  return err
}

func (p *TIBSListI64ServiceMultiPutArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("getAddedItems", thrift.BOOL, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:getAddedItems: ", p), err) }
  if err := oprot.WriteBool(bool(p.GetAddedItems)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.getAddedItems (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:getAddedItems: ", p), err) }
  return err
}

func (p *TIBSListI64ServiceMultiPutArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("getReplacedItems", thrift.BOOL, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:getReplacedItems: ", p), err) }
  if err := oprot.WriteBool(bool(p.GetReplacedItems)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.getReplacedItems (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:getReplacedItems: ", p), err) }
  return err
}

func (p *TIBSListI64ServiceMultiPutArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TIBSListI64ServiceMultiPutArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TIBSListI64ServiceMultiPutResult struct {
  Success *TMultiPutItemResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTIBSListI64ServiceMultiPutResult() *TIBSListI64ServiceMultiPutResult {
  return &TIBSListI64ServiceMultiPutResult{}
}

var TIBSListI64ServiceMultiPutResult_Success_DEFAULT *TMultiPutItemResult_
func (p *TIBSListI64ServiceMultiPutResult) GetSuccess() *TMultiPutItemResult_ {
  if !p.IsSetSuccess() {
    return TIBSListI64ServiceMultiPutResult_Success_DEFAULT
  }
return p.Success
}
func (p *TIBSListI64ServiceMultiPutResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TIBSListI64ServiceMultiPutResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TIBSListI64ServiceMultiPutResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TMultiPutItemResult_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TIBSListI64ServiceMultiPutResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("multiPut_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TIBSListI64ServiceMultiPutResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TIBSListI64ServiceMultiPutResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TIBSListI64ServiceMultiPutResult(%+v)", *p)
}

// Attributes:
//  - BigsetID
type TIBSListI64ServiceGetTotalCountArgs struct {
  BigsetID TKey `thrift:"bigsetID,1" db:"bigsetID" json:"bigsetID"`
}

func NewTIBSListI64ServiceGetTotalCountArgs() *TIBSListI64ServiceGetTotalCountArgs {
  return &TIBSListI64ServiceGetTotalCountArgs{}
}


func (p *TIBSListI64ServiceGetTotalCountArgs) GetBigsetID() TKey {
  return p.BigsetID
}
func (p *TIBSListI64ServiceGetTotalCountArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TIBSListI64ServiceGetTotalCountArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TKey(v)
  p.BigsetID = temp
}
  return nil
}

func (p *TIBSListI64ServiceGetTotalCountArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getTotalCount_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TIBSListI64ServiceGetTotalCountArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("bigsetID", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:bigsetID: ", p), err) }
  if err := oprot.WriteI64(int64(p.BigsetID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.bigsetID (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:bigsetID: ", p), err) }
  return err
}

func (p *TIBSListI64ServiceGetTotalCountArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TIBSListI64ServiceGetTotalCountArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TIBSListI64ServiceGetTotalCountResult struct {
  Success *int64 `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTIBSListI64ServiceGetTotalCountResult() *TIBSListI64ServiceGetTotalCountResult {
  return &TIBSListI64ServiceGetTotalCountResult{}
}

var TIBSListI64ServiceGetTotalCountResult_Success_DEFAULT int64
func (p *TIBSListI64ServiceGetTotalCountResult) GetSuccess() int64 {
  if !p.IsSetSuccess() {
    return TIBSListI64ServiceGetTotalCountResult_Success_DEFAULT
  }
return *p.Success
}
func (p *TIBSListI64ServiceGetTotalCountResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TIBSListI64ServiceGetTotalCountResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TIBSListI64ServiceGetTotalCountResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *TIBSListI64ServiceGetTotalCountResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getTotalCount_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TIBSListI64ServiceGetTotalCountResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.I64, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI64(int64(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TIBSListI64ServiceGetTotalCountResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TIBSListI64ServiceGetTotalCountResult(%+v)", *p)
}

// Attributes:
//  - BigsetID
type TIBSListI64ServiceRemoveAllArgs struct {
  BigsetID TKey `thrift:"bigsetID,1" db:"bigsetID" json:"bigsetID"`
}

func NewTIBSListI64ServiceRemoveAllArgs() *TIBSListI64ServiceRemoveAllArgs {
  return &TIBSListI64ServiceRemoveAllArgs{}
}


func (p *TIBSListI64ServiceRemoveAllArgs) GetBigsetID() TKey {
  return p.BigsetID
}
func (p *TIBSListI64ServiceRemoveAllArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TIBSListI64ServiceRemoveAllArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TKey(v)
  p.BigsetID = temp
}
  return nil
}

func (p *TIBSListI64ServiceRemoveAllArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("removeAll_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TIBSListI64ServiceRemoveAllArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("bigsetID", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:bigsetID: ", p), err) }
  if err := oprot.WriteI64(int64(p.BigsetID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.bigsetID (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:bigsetID: ", p), err) }
  return err
}

func (p *TIBSListI64ServiceRemoveAllArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TIBSListI64ServiceRemoveAllArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TIBSListI64ServiceRemoveAllResult struct {
  Success *int64 `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTIBSListI64ServiceRemoveAllResult() *TIBSListI64ServiceRemoveAllResult {
  return &TIBSListI64ServiceRemoveAllResult{}
}

var TIBSListI64ServiceRemoveAllResult_Success_DEFAULT int64
func (p *TIBSListI64ServiceRemoveAllResult) GetSuccess() int64 {
  if !p.IsSetSuccess() {
    return TIBSListI64ServiceRemoveAllResult_Success_DEFAULT
  }
return *p.Success
}
func (p *TIBSListI64ServiceRemoveAllResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TIBSListI64ServiceRemoveAllResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TIBSListI64ServiceRemoveAllResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *TIBSListI64ServiceRemoveAllResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("removeAll_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TIBSListI64ServiceRemoveAllResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.I64, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI64(int64(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TIBSListI64ServiceRemoveAllResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TIBSListI64ServiceRemoveAllResult(%+v)", *p)
}


type BSNotificationPool interface {
  // Parameters:
  //  - RootID
  //  - SplitInfo
  NeedSplit(ctx context.Context, rootID TContainerKey, splitInfo *TNeedSplitInfo) (err error)
  // Parameters:
  //  - RootID
  SplitInfoUpdated(ctx context.Context, rootID TContainerKey) (err error)
  GetJob(ctx context.Context) (r *SplitJob, err error)
}

type BSNotificationPoolClient struct {
  c thrift.TClient
}

func NewBSNotificationPoolClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *BSNotificationPoolClient {
  return &BSNotificationPoolClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewBSNotificationPoolClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *BSNotificationPoolClient {
  return &BSNotificationPoolClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewBSNotificationPoolClient(c thrift.TClient) *BSNotificationPoolClient {
  return &BSNotificationPoolClient{
    c: c,
  }
}

func (p *BSNotificationPoolClient) Client_() thrift.TClient {
  return p.c
}
// Parameters:
//  - RootID
//  - SplitInfo
func (p *BSNotificationPoolClient) NeedSplit(ctx context.Context, rootID TContainerKey, splitInfo *TNeedSplitInfo) (err error) {
  var _args320 BSNotificationPoolNeedSplitArgs
  _args320.RootID = rootID
  _args320.SplitInfo = splitInfo
  var _result321 BSNotificationPoolNeedSplitResult
  if err = p.Client_().Call(ctx, "needSplit", &_args320, &_result321); err != nil {
    return
  }
  return nil
}

// Parameters:
//  - RootID
func (p *BSNotificationPoolClient) SplitInfoUpdated(ctx context.Context, rootID TContainerKey) (err error) {
  var _args322 BSNotificationPoolSplitInfoUpdatedArgs
  _args322.RootID = rootID
  var _result323 BSNotificationPoolSplitInfoUpdatedResult
  if err = p.Client_().Call(ctx, "splitInfoUpdated", &_args322, &_result323); err != nil {
    return
  }
  return nil
}

func (p *BSNotificationPoolClient) GetJob(ctx context.Context) (r *SplitJob, err error) {
  var _args324 BSNotificationPoolGetJobArgs
  var _result325 BSNotificationPoolGetJobResult
  if err = p.Client_().Call(ctx, "getJob", &_args324, &_result325); err != nil {
    return
  }
  return _result325.GetSuccess(), nil
}

type BSNotificationPoolProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler BSNotificationPool
}

func (p *BSNotificationPoolProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *BSNotificationPoolProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *BSNotificationPoolProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewBSNotificationPoolProcessor(handler BSNotificationPool) *BSNotificationPoolProcessor {

  self326 := &BSNotificationPoolProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self326.processorMap["needSplit"] = &bSNotificationPoolProcessorNeedSplit{handler:handler}
  self326.processorMap["splitInfoUpdated"] = &bSNotificationPoolProcessorSplitInfoUpdated{handler:handler}
  self326.processorMap["getJob"] = &bSNotificationPoolProcessorGetJob{handler:handler}
return self326
}

func (p *BSNotificationPoolProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x327 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x327.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush(ctx)
  return false, x327

}

type bSNotificationPoolProcessorNeedSplit struct {
  handler BSNotificationPool
}

func (p *bSNotificationPoolProcessorNeedSplit) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := BSNotificationPoolNeedSplitArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("needSplit", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := BSNotificationPoolNeedSplitResult{}
  var err2 error
  if err2 = p.handler.NeedSplit(ctx, args.RootID, args.SplitInfo); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing needSplit: " + err2.Error())
    oprot.WriteMessageBegin("needSplit", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  if err2 = oprot.WriteMessageBegin("needSplit", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type bSNotificationPoolProcessorSplitInfoUpdated struct {
  handler BSNotificationPool
}

func (p *bSNotificationPoolProcessorSplitInfoUpdated) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := BSNotificationPoolSplitInfoUpdatedArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("splitInfoUpdated", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := BSNotificationPoolSplitInfoUpdatedResult{}
  var err2 error
  if err2 = p.handler.SplitInfoUpdated(ctx, args.RootID); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing splitInfoUpdated: " + err2.Error())
    oprot.WriteMessageBegin("splitInfoUpdated", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  if err2 = oprot.WriteMessageBegin("splitInfoUpdated", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type bSNotificationPoolProcessorGetJob struct {
  handler BSNotificationPool
}

func (p *bSNotificationPoolProcessorGetJob) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := BSNotificationPoolGetJobArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getJob", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := BSNotificationPoolGetJobResult{}
var retval *SplitJob
  var err2 error
  if retval, err2 = p.handler.GetJob(ctx); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getJob: " + err2.Error())
    oprot.WriteMessageBegin("getJob", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getJob", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - RootID
//  - SplitInfo
type BSNotificationPoolNeedSplitArgs struct {
  RootID TContainerKey `thrift:"rootID,1" db:"rootID" json:"rootID"`
  SplitInfo *TNeedSplitInfo `thrift:"splitInfo,2" db:"splitInfo" json:"splitInfo"`
}

func NewBSNotificationPoolNeedSplitArgs() *BSNotificationPoolNeedSplitArgs {
  return &BSNotificationPoolNeedSplitArgs{}
}


func (p *BSNotificationPoolNeedSplitArgs) GetRootID() TContainerKey {
  return p.RootID
}
var BSNotificationPoolNeedSplitArgs_SplitInfo_DEFAULT *TNeedSplitInfo
func (p *BSNotificationPoolNeedSplitArgs) GetSplitInfo() *TNeedSplitInfo {
  if !p.IsSetSplitInfo() {
    return BSNotificationPoolNeedSplitArgs_SplitInfo_DEFAULT
  }
return p.SplitInfo
}
func (p *BSNotificationPoolNeedSplitArgs) IsSetSplitInfo() bool {
  return p.SplitInfo != nil
}

func (p *BSNotificationPoolNeedSplitArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BSNotificationPoolNeedSplitArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TContainerKey(v)
  p.RootID = temp
}
  return nil
}

func (p *BSNotificationPoolNeedSplitArgs)  ReadField2(iprot thrift.TProtocol) error {
  p.SplitInfo = &TNeedSplitInfo{}
  if err := p.SplitInfo.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SplitInfo), err)
  }
  return nil
}

func (p *BSNotificationPoolNeedSplitArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("needSplit_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BSNotificationPoolNeedSplitArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("rootID", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rootID: ", p), err) }
  if err := oprot.WriteI64(int64(p.RootID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.rootID (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rootID: ", p), err) }
  return err
}

func (p *BSNotificationPoolNeedSplitArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("splitInfo", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:splitInfo: ", p), err) }
  if err := p.SplitInfo.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SplitInfo), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:splitInfo: ", p), err) }
  return err
}

func (p *BSNotificationPoolNeedSplitArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BSNotificationPoolNeedSplitArgs(%+v)", *p)
}

type BSNotificationPoolNeedSplitResult struct {
}

func NewBSNotificationPoolNeedSplitResult() *BSNotificationPoolNeedSplitResult {
  return &BSNotificationPoolNeedSplitResult{}
}

func (p *BSNotificationPoolNeedSplitResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BSNotificationPoolNeedSplitResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("needSplit_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BSNotificationPoolNeedSplitResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BSNotificationPoolNeedSplitResult(%+v)", *p)
}

// Attributes:
//  - RootID
type BSNotificationPoolSplitInfoUpdatedArgs struct {
  RootID TContainerKey `thrift:"rootID,1" db:"rootID" json:"rootID"`
}

func NewBSNotificationPoolSplitInfoUpdatedArgs() *BSNotificationPoolSplitInfoUpdatedArgs {
  return &BSNotificationPoolSplitInfoUpdatedArgs{}
}


func (p *BSNotificationPoolSplitInfoUpdatedArgs) GetRootID() TContainerKey {
  return p.RootID
}
func (p *BSNotificationPoolSplitInfoUpdatedArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BSNotificationPoolSplitInfoUpdatedArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TContainerKey(v)
  p.RootID = temp
}
  return nil
}

func (p *BSNotificationPoolSplitInfoUpdatedArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("splitInfoUpdated_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BSNotificationPoolSplitInfoUpdatedArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("rootID", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rootID: ", p), err) }
  if err := oprot.WriteI64(int64(p.RootID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.rootID (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rootID: ", p), err) }
  return err
}

func (p *BSNotificationPoolSplitInfoUpdatedArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BSNotificationPoolSplitInfoUpdatedArgs(%+v)", *p)
}

type BSNotificationPoolSplitInfoUpdatedResult struct {
}

func NewBSNotificationPoolSplitInfoUpdatedResult() *BSNotificationPoolSplitInfoUpdatedResult {
  return &BSNotificationPoolSplitInfoUpdatedResult{}
}

func (p *BSNotificationPoolSplitInfoUpdatedResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BSNotificationPoolSplitInfoUpdatedResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("splitInfoUpdated_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BSNotificationPoolSplitInfoUpdatedResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BSNotificationPoolSplitInfoUpdatedResult(%+v)", *p)
}

type BSNotificationPoolGetJobArgs struct {
}

func NewBSNotificationPoolGetJobArgs() *BSNotificationPoolGetJobArgs {
  return &BSNotificationPoolGetJobArgs{}
}

func (p *BSNotificationPoolGetJobArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BSNotificationPoolGetJobArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getJob_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BSNotificationPoolGetJobArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BSNotificationPoolGetJobArgs(%+v)", *p)
}

// Attributes:
//  - Success
type BSNotificationPoolGetJobResult struct {
  Success *SplitJob `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewBSNotificationPoolGetJobResult() *BSNotificationPoolGetJobResult {
  return &BSNotificationPoolGetJobResult{}
}

var BSNotificationPoolGetJobResult_Success_DEFAULT *SplitJob
func (p *BSNotificationPoolGetJobResult) GetSuccess() *SplitJob {
  if !p.IsSetSuccess() {
    return BSNotificationPoolGetJobResult_Success_DEFAULT
  }
return p.Success
}
func (p *BSNotificationPoolGetJobResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *BSNotificationPoolGetJobResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BSNotificationPoolGetJobResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &SplitJob{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *BSNotificationPoolGetJobResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getJob_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BSNotificationPoolGetJobResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *BSNotificationPoolGetJobResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BSNotificationPoolGetJobResult(%+v)", *p)
}


type TCluserOrdinatorService interface {
  // Parameters:
  //  - Key
  RemoveCache(ctx context.Context, key TContainerKey) (err error)
  // Parameters:
  //  - Key
  //  - Value
  Put(ctx context.Context, key []byte, value []byte) (r int32, err error)
}

type TCluserOrdinatorServiceClient struct {
  c thrift.TClient
}

func NewTCluserOrdinatorServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *TCluserOrdinatorServiceClient {
  return &TCluserOrdinatorServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewTCluserOrdinatorServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *TCluserOrdinatorServiceClient {
  return &TCluserOrdinatorServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewTCluserOrdinatorServiceClient(c thrift.TClient) *TCluserOrdinatorServiceClient {
  return &TCluserOrdinatorServiceClient{
    c: c,
  }
}

func (p *TCluserOrdinatorServiceClient) Client_() thrift.TClient {
  return p.c
}
// Parameters:
//  - Key
func (p *TCluserOrdinatorServiceClient) RemoveCache(ctx context.Context, key TContainerKey) (err error) {
  var _args336 TCluserOrdinatorServiceRemoveCacheArgs
  _args336.Key = key
  if err := p.Client_().Call(ctx, "removeCache", &_args336, nil); err != nil {
    return err
  }
  return nil
}

// Parameters:
//  - Key
//  - Value
func (p *TCluserOrdinatorServiceClient) Put(ctx context.Context, key []byte, value []byte) (r int32, err error) {
  var _args337 TCluserOrdinatorServicePutArgs
  _args337.Key = key
  _args337.Value = value
  var _result338 TCluserOrdinatorServicePutResult
  if err = p.Client_().Call(ctx, "put", &_args337, &_result338); err != nil {
    return
  }
  return _result338.GetSuccess(), nil
}

type TCluserOrdinatorServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler TCluserOrdinatorService
}

func (p *TCluserOrdinatorServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *TCluserOrdinatorServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *TCluserOrdinatorServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewTCluserOrdinatorServiceProcessor(handler TCluserOrdinatorService) *TCluserOrdinatorServiceProcessor {

  self339 := &TCluserOrdinatorServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self339.processorMap["removeCache"] = &tCluserOrdinatorServiceProcessorRemoveCache{handler:handler}
  self339.processorMap["put"] = &tCluserOrdinatorServiceProcessorPut{handler:handler}
return self339
}

func (p *TCluserOrdinatorServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x340 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x340.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush(ctx)
  return false, x340

}

type tCluserOrdinatorServiceProcessorRemoveCache struct {
  handler TCluserOrdinatorService
}

func (p *tCluserOrdinatorServiceProcessorRemoveCache) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TCluserOrdinatorServiceRemoveCacheArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    return false, err
  }

  iprot.ReadMessageEnd()
  var err2 error
  if err2 = p.handler.RemoveCache(ctx, args.Key); err2 != nil {
    return true, err2
  }
  return true, nil
}

type tCluserOrdinatorServiceProcessorPut struct {
  handler TCluserOrdinatorService
}

func (p *tCluserOrdinatorServiceProcessorPut) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TCluserOrdinatorServicePutArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("put", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TCluserOrdinatorServicePutResult{}
var retval int32
  var err2 error
  if retval, err2 = p.handler.Put(ctx, args.Key, args.Value); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing put: " + err2.Error())
    oprot.WriteMessageBegin("put", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("put", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Key
type TCluserOrdinatorServiceRemoveCacheArgs struct {
  Key TContainerKey `thrift:"key,1" db:"key" json:"key"`
}

func NewTCluserOrdinatorServiceRemoveCacheArgs() *TCluserOrdinatorServiceRemoveCacheArgs {
  return &TCluserOrdinatorServiceRemoveCacheArgs{}
}


func (p *TCluserOrdinatorServiceRemoveCacheArgs) GetKey() TContainerKey {
  return p.Key
}
func (p *TCluserOrdinatorServiceRemoveCacheArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TCluserOrdinatorServiceRemoveCacheArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TContainerKey(v)
  p.Key = temp
}
  return nil
}

func (p *TCluserOrdinatorServiceRemoveCacheArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("removeCache_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TCluserOrdinatorServiceRemoveCacheArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("key", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:key: ", p), err) }
  if err := oprot.WriteI64(int64(p.Key)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.key (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:key: ", p), err) }
  return err
}

func (p *TCluserOrdinatorServiceRemoveCacheArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TCluserOrdinatorServiceRemoveCacheArgs(%+v)", *p)
}

// Attributes:
//  - Key
//  - Value
type TCluserOrdinatorServicePutArgs struct {
  Key []byte `thrift:"key,1" db:"key" json:"key"`
  Value []byte `thrift:"value,2" db:"value" json:"value"`
}

func NewTCluserOrdinatorServicePutArgs() *TCluserOrdinatorServicePutArgs {
  return &TCluserOrdinatorServicePutArgs{}
}


func (p *TCluserOrdinatorServicePutArgs) GetKey() []byte {
  return p.Key
}

func (p *TCluserOrdinatorServicePutArgs) GetValue() []byte {
  return p.Value
}
func (p *TCluserOrdinatorServicePutArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TCluserOrdinatorServicePutArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Key = v
}
  return nil
}

func (p *TCluserOrdinatorServicePutArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Value = v
}
  return nil
}

func (p *TCluserOrdinatorServicePutArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("put_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TCluserOrdinatorServicePutArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("key", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:key: ", p), err) }
  if err := oprot.WriteBinary(p.Key); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.key (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:key: ", p), err) }
  return err
}

func (p *TCluserOrdinatorServicePutArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("value", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:value: ", p), err) }
  if err := oprot.WriteBinary(p.Value); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.value (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:value: ", p), err) }
  return err
}

func (p *TCluserOrdinatorServicePutArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TCluserOrdinatorServicePutArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TCluserOrdinatorServicePutResult struct {
  Success *int32 `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTCluserOrdinatorServicePutResult() *TCluserOrdinatorServicePutResult {
  return &TCluserOrdinatorServicePutResult{}
}

var TCluserOrdinatorServicePutResult_Success_DEFAULT int32
func (p *TCluserOrdinatorServicePutResult) GetSuccess() int32 {
  if !p.IsSetSuccess() {
    return TCluserOrdinatorServicePutResult_Success_DEFAULT
  }
return *p.Success
}
func (p *TCluserOrdinatorServicePutResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TCluserOrdinatorServicePutResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TCluserOrdinatorServicePutResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *TCluserOrdinatorServicePutResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("put_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TCluserOrdinatorServicePutResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TCluserOrdinatorServicePutResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TCluserOrdinatorServicePutResult(%+v)", *p)
}


