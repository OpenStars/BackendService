// Autogenerated by Thrift Compiler (0.13.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package simplesession

import(
	"bytes"
	"context"
	"reflect"
	"database/sql/driver"
	"errors"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

type TSessionCode int64
const (
  TSessionCode_ENoSession TSessionCode = 0
  TSessionCode_EFullRight TSessionCode = 1
  TSessionCode_EPartialRight TSessionCode = 2
  TSessionCode_ERightExtend100 TSessionCode = 100
  TSessionCode_ERightExtend101 TSessionCode = 101
  TSessionCode_ERightExtend102 TSessionCode = 102
  TSessionCode_ERightExtend103 TSessionCode = 103
  TSessionCode_ERightExtend104 TSessionCode = 104
  TSessionCode_ERightExtend105 TSessionCode = 105
  TSessionCode_ERightExtend106 TSessionCode = 106
  TSessionCode_ERightExtend107 TSessionCode = 107
  TSessionCode_ERightExtend108 TSessionCode = 108
)

func (p TSessionCode) String() string {
  switch p {
  case TSessionCode_ENoSession: return "ENoSession"
  case TSessionCode_EFullRight: return "EFullRight"
  case TSessionCode_EPartialRight: return "EPartialRight"
  case TSessionCode_ERightExtend100: return "ERightExtend100"
  case TSessionCode_ERightExtend101: return "ERightExtend101"
  case TSessionCode_ERightExtend102: return "ERightExtend102"
  case TSessionCode_ERightExtend103: return "ERightExtend103"
  case TSessionCode_ERightExtend104: return "ERightExtend104"
  case TSessionCode_ERightExtend105: return "ERightExtend105"
  case TSessionCode_ERightExtend106: return "ERightExtend106"
  case TSessionCode_ERightExtend107: return "ERightExtend107"
  case TSessionCode_ERightExtend108: return "ERightExtend108"
  }
  return "<UNSET>"
}

func TSessionCodeFromString(s string) (TSessionCode, error) {
  switch s {
  case "ENoSession": return TSessionCode_ENoSession, nil 
  case "EFullRight": return TSessionCode_EFullRight, nil 
  case "EPartialRight": return TSessionCode_EPartialRight, nil 
  case "ERightExtend100": return TSessionCode_ERightExtend100, nil 
  case "ERightExtend101": return TSessionCode_ERightExtend101, nil 
  case "ERightExtend102": return TSessionCode_ERightExtend102, nil 
  case "ERightExtend103": return TSessionCode_ERightExtend103, nil 
  case "ERightExtend104": return TSessionCode_ERightExtend104, nil 
  case "ERightExtend105": return TSessionCode_ERightExtend105, nil 
  case "ERightExtend106": return TSessionCode_ERightExtend106, nil 
  case "ERightExtend107": return TSessionCode_ERightExtend107, nil 
  case "ERightExtend108": return TSessionCode_ERightExtend108, nil 
  }
  return TSessionCode(0), fmt.Errorf("not a valid TSessionCode string")
}


func TSessionCodePtr(v TSessionCode) *TSessionCode { return &v }

func (p TSessionCode) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *TSessionCode) UnmarshalText(text []byte) error {
q, err := TSessionCodeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *TSessionCode) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = TSessionCode(v)
return nil
}

func (p * TSessionCode) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type TErrorCode int64
const (
  TErrorCode_ESuccess TErrorCode = 0
  TErrorCode_EFailed TErrorCode = 1
)

func (p TErrorCode) String() string {
  switch p {
  case TErrorCode_ESuccess: return "ESuccess"
  case TErrorCode_EFailed: return "EFailed"
  }
  return "<UNSET>"
}

func TErrorCodeFromString(s string) (TErrorCode, error) {
  switch s {
  case "ESuccess": return TErrorCode_ESuccess, nil 
  case "EFailed": return TErrorCode_EFailed, nil 
  }
  return TErrorCode(0), fmt.Errorf("not a valid TErrorCode string")
}


func TErrorCodePtr(v TErrorCode) *TErrorCode { return &v }

func (p TErrorCode) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *TErrorCode) UnmarshalText(text []byte) error {
q, err := TErrorCodeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *TErrorCode) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = TErrorCode(v)
return nil
}

func (p * TErrorCode) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type TUID int64

func TUIDPtr(v TUID) *TUID { return &v }

type TInternalSessionID int64

func TInternalSessionIDPtr(v TInternalSessionID) *TInternalSessionID { return &v }

type TUserRights string

func TUserRightsPtr(v TUserRights) *TUserRights { return &v }

type TSessionKey string

func TSessionKeyPtr(v TSessionKey) *TSessionKey { return &v }

// Attributes:
//  - Code
//  - UID
//  - Permissions
//  - DeviceInfo
//  - Data
//  - ExpiredTime
//  - Version
type TUserSessionInfo struct {
  Code TSessionCode `thrift:"code,1" db:"code" json:"code"`
  UID TUID `thrift:"uid,2" db:"uid" json:"uid"`
  Permissions TUserRights `thrift:"permissions,3" db:"permissions" json:"permissions"`
  DeviceInfo string `thrift:"deviceInfo,4" db:"deviceInfo" json:"deviceInfo"`
  Data string `thrift:"data,5" db:"data" json:"data"`
  ExpiredTime int64 `thrift:"expiredTime,6" db:"expiredTime" json:"expiredTime"`
  Version int32 `thrift:"version,7" db:"version" json:"version"`
}

func NewTUserSessionInfo() *TUserSessionInfo {
  return &TUserSessionInfo{}
}


func (p *TUserSessionInfo) GetCode() TSessionCode {
  return p.Code
}

func (p *TUserSessionInfo) GetUID() TUID {
  return p.UID
}

func (p *TUserSessionInfo) GetPermissions() TUserRights {
  return p.Permissions
}

func (p *TUserSessionInfo) GetDeviceInfo() string {
  return p.DeviceInfo
}

func (p *TUserSessionInfo) GetData() string {
  return p.Data
}

func (p *TUserSessionInfo) GetExpiredTime() int64 {
  return p.ExpiredTime
}

func (p *TUserSessionInfo) GetVersion() int32 {
  return p.Version
}
func (p *TUserSessionInfo) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TUserSessionInfo)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TSessionCode(v)
  p.Code = temp
}
  return nil
}

func (p *TUserSessionInfo)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := TUID(v)
  p.UID = temp
}
  return nil
}

func (p *TUserSessionInfo)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := TUserRights(v)
  p.Permissions = temp
}
  return nil
}

func (p *TUserSessionInfo)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.DeviceInfo = v
}
  return nil
}

func (p *TUserSessionInfo)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Data = v
}
  return nil
}

func (p *TUserSessionInfo)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.ExpiredTime = v
}
  return nil
}

func (p *TUserSessionInfo)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.Version = v
}
  return nil
}

func (p *TUserSessionInfo) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TUserSessionInfo"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TUserSessionInfo) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *TUserSessionInfo) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("uid", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:uid: ", p), err) }
  if err := oprot.WriteI64(int64(p.UID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.uid (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:uid: ", p), err) }
  return err
}

func (p *TUserSessionInfo) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("permissions", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:permissions: ", p), err) }
  if err := oprot.WriteString(string(p.Permissions)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.permissions (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:permissions: ", p), err) }
  return err
}

func (p *TUserSessionInfo) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("deviceInfo", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:deviceInfo: ", p), err) }
  if err := oprot.WriteString(string(p.DeviceInfo)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.deviceInfo (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:deviceInfo: ", p), err) }
  return err
}

func (p *TUserSessionInfo) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("data", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:data: ", p), err) }
  if err := oprot.WriteString(string(p.Data)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.data (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:data: ", p), err) }
  return err
}

func (p *TUserSessionInfo) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("expiredTime", thrift.I64, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:expiredTime: ", p), err) }
  if err := oprot.WriteI64(int64(p.ExpiredTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.expiredTime (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:expiredTime: ", p), err) }
  return err
}

func (p *TUserSessionInfo) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("version", thrift.I32, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:version: ", p), err) }
  if err := oprot.WriteI32(int32(p.Version)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.version (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:version: ", p), err) }
  return err
}

func (p *TUserSessionInfo) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TUserSessionInfo(%+v)", *p)
}

// Attributes:
//  - Error
//  - Session
type TSessionKeyResult_ struct {
  Error TErrorCode `thrift:"error,1" db:"error" json:"error"`
  Session *TSessionKey `thrift:"session,2" db:"session" json:"session,omitempty"`
}

func NewTSessionKeyResult_() *TSessionKeyResult_ {
  return &TSessionKeyResult_{}
}


func (p *TSessionKeyResult_) GetError() TErrorCode {
  return p.Error
}
var TSessionKeyResult__Session_DEFAULT TSessionKey
func (p *TSessionKeyResult_) GetSession() TSessionKey {
  if !p.IsSetSession() {
    return TSessionKeyResult__Session_DEFAULT
  }
return *p.Session
}
func (p *TSessionKeyResult_) IsSetSession() bool {
  return p.Session != nil
}

func (p *TSessionKeyResult_) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TSessionKeyResult_)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TErrorCode(v)
  p.Error = temp
}
  return nil
}

func (p *TSessionKeyResult_)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := TSessionKey(v)
  p.Session = &temp
}
  return nil
}

func (p *TSessionKeyResult_) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TSessionKeyResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TSessionKeyResult_) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("error", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:error: ", p), err) }
  if err := oprot.WriteI32(int32(p.Error)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.error (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:error: ", p), err) }
  return err
}

func (p *TSessionKeyResult_) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetSession() {
    if err := oprot.WriteFieldBegin("session", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:session: ", p), err) }
    if err := oprot.WriteString(string(*p.Session)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.session (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:session: ", p), err) }
  }
  return err
}

func (p *TSessionKeyResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TSessionKeyResult_(%+v)", *p)
}

// Attributes:
//  - Error
//  - UserInfo
type TUserResult_ struct {
  Error TErrorCode `thrift:"error,1,required" db:"error" json:"error"`
  UserInfo *TUserSessionInfo `thrift:"userInfo,2" db:"userInfo" json:"userInfo,omitempty"`
}

func NewTUserResult_() *TUserResult_ {
  return &TUserResult_{}
}


func (p *TUserResult_) GetError() TErrorCode {
  return p.Error
}
var TUserResult__UserInfo_DEFAULT *TUserSessionInfo
func (p *TUserResult_) GetUserInfo() *TUserSessionInfo {
  if !p.IsSetUserInfo() {
    return TUserResult__UserInfo_DEFAULT
  }
return p.UserInfo
}
func (p *TUserResult_) IsSetUserInfo() bool {
  return p.UserInfo != nil
}

func (p *TUserResult_) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetError bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
        issetError = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetError{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Error is not set"));
  }
  return nil
}

func (p *TUserResult_)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TErrorCode(v)
  p.Error = temp
}
  return nil
}

func (p *TUserResult_)  ReadField2(iprot thrift.TProtocol) error {
  p.UserInfo = &TUserSessionInfo{}
  if err := p.UserInfo.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UserInfo), err)
  }
  return nil
}

func (p *TUserResult_) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TUserResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TUserResult_) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("error", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:error: ", p), err) }
  if err := oprot.WriteI32(int32(p.Error)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.error (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:error: ", p), err) }
  return err
}

func (p *TUserResult_) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetUserInfo() {
    if err := oprot.WriteFieldBegin("userInfo", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:userInfo: ", p), err) }
    if err := p.UserInfo.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UserInfo), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:userInfo: ", p), err) }
  }
  return err
}

func (p *TUserResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TUserResult_(%+v)", *p)
}

type TSimpleSessionService interface {
  // Parameters:
  //  - SessionKey
  GetSession(ctx context.Context, sessionKey TSessionKey) (r *TUserResult_, err error)
}

type TSimpleSessionServiceClient struct {
  c thrift.TClient
}

func NewTSimpleSessionServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *TSimpleSessionServiceClient {
  return &TSimpleSessionServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewTSimpleSessionServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *TSimpleSessionServiceClient {
  return &TSimpleSessionServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewTSimpleSessionServiceClient(c thrift.TClient) *TSimpleSessionServiceClient {
  return &TSimpleSessionServiceClient{
    c: c,
  }
}

func (p *TSimpleSessionServiceClient) Client_() thrift.TClient {
  return p.c
}
// Parameters:
//  - SessionKey
func (p *TSimpleSessionServiceClient) GetSession(ctx context.Context, sessionKey TSessionKey) (r *TUserResult_, err error) {
  var _args0 TSimpleSessionServiceGetSessionArgs
  _args0.SessionKey = sessionKey
  var _result1 TSimpleSessionServiceGetSessionResult
  if err = p.Client_().Call(ctx, "getSession", &_args0, &_result1); err != nil {
    return
  }
  return _result1.GetSuccess(), nil
}

type TSimpleSessionServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler TSimpleSessionService
}

func (p *TSimpleSessionServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *TSimpleSessionServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *TSimpleSessionServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewTSimpleSessionServiceProcessor(handler TSimpleSessionService) *TSimpleSessionServiceProcessor {

  self2 := &TSimpleSessionServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self2.processorMap["getSession"] = &tSimpleSessionServiceProcessorGetSession{handler:handler}
return self2
}

func (p *TSimpleSessionServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x3 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x3.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush(ctx)
  return false, x3

}

type tSimpleSessionServiceProcessorGetSession struct {
  handler TSimpleSessionService
}

func (p *tSimpleSessionServiceProcessorGetSession) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TSimpleSessionServiceGetSessionArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getSession", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TSimpleSessionServiceGetSessionResult{}
var retval *TUserResult_
  var err2 error
  if retval, err2 = p.handler.GetSession(ctx, args.SessionKey); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getSession: " + err2.Error())
    oprot.WriteMessageBegin("getSession", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getSession", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - SessionKey
type TSimpleSessionServiceGetSessionArgs struct {
  SessionKey TSessionKey `thrift:"sessionKey,1" db:"sessionKey" json:"sessionKey"`
}

func NewTSimpleSessionServiceGetSessionArgs() *TSimpleSessionServiceGetSessionArgs {
  return &TSimpleSessionServiceGetSessionArgs{}
}


func (p *TSimpleSessionServiceGetSessionArgs) GetSessionKey() TSessionKey {
  return p.SessionKey
}
func (p *TSimpleSessionServiceGetSessionArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TSimpleSessionServiceGetSessionArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TSessionKey(v)
  p.SessionKey = temp
}
  return nil
}

func (p *TSimpleSessionServiceGetSessionArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getSession_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TSimpleSessionServiceGetSessionArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("sessionKey", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:sessionKey: ", p), err) }
  if err := oprot.WriteString(string(p.SessionKey)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sessionKey (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:sessionKey: ", p), err) }
  return err
}

func (p *TSimpleSessionServiceGetSessionArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TSimpleSessionServiceGetSessionArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TSimpleSessionServiceGetSessionResult struct {
  Success *TUserResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTSimpleSessionServiceGetSessionResult() *TSimpleSessionServiceGetSessionResult {
  return &TSimpleSessionServiceGetSessionResult{}
}

var TSimpleSessionServiceGetSessionResult_Success_DEFAULT *TUserResult_
func (p *TSimpleSessionServiceGetSessionResult) GetSuccess() *TUserResult_ {
  if !p.IsSetSuccess() {
    return TSimpleSessionServiceGetSessionResult_Success_DEFAULT
  }
return p.Success
}
func (p *TSimpleSessionServiceGetSessionResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TSimpleSessionServiceGetSessionResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TSimpleSessionServiceGetSessionResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TUserResult_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TSimpleSessionServiceGetSessionResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getSession_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TSimpleSessionServiceGetSessionResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TSimpleSessionServiceGetSessionResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TSimpleSessionServiceGetSessionResult(%+v)", *p)
}


type TSimpleSessionService_W interface {
TSimpleSessionService

  // Parameters:
  //  - UserInfo
  CreateSession(ctx context.Context, userInfo *TUserSessionInfo) (r *TSessionKeyResult_, err error)
  // Parameters:
  //  - SessionKey
  RemoveSession(ctx context.Context, sessionKey TSessionKey) (r bool, err error)
}

type TSimpleSessionService_WClient struct {
  *TSimpleSessionServiceClient
}

func NewTSimpleSessionService_WClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *TSimpleSessionService_WClient {
  return &TSimpleSessionService_WClient{TSimpleSessionServiceClient: NewTSimpleSessionServiceClientFactory(t, f)}}

func NewTSimpleSessionService_WClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *TSimpleSessionService_WClient {
  return &TSimpleSessionService_WClient{TSimpleSessionServiceClient: NewTSimpleSessionServiceClientProtocol(t, iprot, oprot)}
}

func NewTSimpleSessionService_WClient(c thrift.TClient) *TSimpleSessionService_WClient {
  return &TSimpleSessionService_WClient{
    TSimpleSessionServiceClient: NewTSimpleSessionServiceClient(c),
  }
}

// Parameters:
//  - UserInfo
func (p *TSimpleSessionService_WClient) CreateSession(ctx context.Context, userInfo *TUserSessionInfo) (r *TSessionKeyResult_, err error) {
  var _args5 TSimpleSessionService_WCreateSessionArgs
  _args5.UserInfo = userInfo
  var _result6 TSimpleSessionService_WCreateSessionResult
  if err = p.Client_().Call(ctx, "createSession", &_args5, &_result6); err != nil {
    return
  }
  return _result6.GetSuccess(), nil
}

// Parameters:
//  - SessionKey
func (p *TSimpleSessionService_WClient) RemoveSession(ctx context.Context, sessionKey TSessionKey) (r bool, err error) {
  var _args7 TSimpleSessionService_WRemoveSessionArgs
  _args7.SessionKey = sessionKey
  var _result8 TSimpleSessionService_WRemoveSessionResult
  if err = p.Client_().Call(ctx, "removeSession", &_args7, &_result8); err != nil {
    return
  }
  return _result8.GetSuccess(), nil
}

type TSimpleSessionService_WProcessor struct {
  *TSimpleSessionServiceProcessor
}

func NewTSimpleSessionService_WProcessor(handler TSimpleSessionService_W) *TSimpleSessionService_WProcessor {
  self9 := &TSimpleSessionService_WProcessor{NewTSimpleSessionServiceProcessor(handler)}
  self9.AddToProcessorMap("createSession", &tSimpleSessionService_WProcessorCreateSession{handler:handler})
  self9.AddToProcessorMap("removeSession", &tSimpleSessionService_WProcessorRemoveSession{handler:handler})
  return self9
}

type tSimpleSessionService_WProcessorCreateSession struct {
  handler TSimpleSessionService_W
}

func (p *tSimpleSessionService_WProcessorCreateSession) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TSimpleSessionService_WCreateSessionArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("createSession", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TSimpleSessionService_WCreateSessionResult{}
var retval *TSessionKeyResult_
  var err2 error
  if retval, err2 = p.handler.CreateSession(ctx, args.UserInfo); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing createSession: " + err2.Error())
    oprot.WriteMessageBegin("createSession", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("createSession", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tSimpleSessionService_WProcessorRemoveSession struct {
  handler TSimpleSessionService_W
}

func (p *tSimpleSessionService_WProcessorRemoveSession) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TSimpleSessionService_WRemoveSessionArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("removeSession", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TSimpleSessionService_WRemoveSessionResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.RemoveSession(ctx, args.SessionKey); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing removeSession: " + err2.Error())
    oprot.WriteMessageBegin("removeSession", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("removeSession", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - UserInfo
type TSimpleSessionService_WCreateSessionArgs struct {
  UserInfo *TUserSessionInfo `thrift:"userInfo,1" db:"userInfo" json:"userInfo"`
}

func NewTSimpleSessionService_WCreateSessionArgs() *TSimpleSessionService_WCreateSessionArgs {
  return &TSimpleSessionService_WCreateSessionArgs{}
}

var TSimpleSessionService_WCreateSessionArgs_UserInfo_DEFAULT *TUserSessionInfo
func (p *TSimpleSessionService_WCreateSessionArgs) GetUserInfo() *TUserSessionInfo {
  if !p.IsSetUserInfo() {
    return TSimpleSessionService_WCreateSessionArgs_UserInfo_DEFAULT
  }
return p.UserInfo
}
func (p *TSimpleSessionService_WCreateSessionArgs) IsSetUserInfo() bool {
  return p.UserInfo != nil
}

func (p *TSimpleSessionService_WCreateSessionArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TSimpleSessionService_WCreateSessionArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.UserInfo = &TUserSessionInfo{}
  if err := p.UserInfo.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UserInfo), err)
  }
  return nil
}

func (p *TSimpleSessionService_WCreateSessionArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("createSession_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TSimpleSessionService_WCreateSessionArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userInfo", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userInfo: ", p), err) }
  if err := p.UserInfo.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UserInfo), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userInfo: ", p), err) }
  return err
}

func (p *TSimpleSessionService_WCreateSessionArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TSimpleSessionService_WCreateSessionArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TSimpleSessionService_WCreateSessionResult struct {
  Success *TSessionKeyResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTSimpleSessionService_WCreateSessionResult() *TSimpleSessionService_WCreateSessionResult {
  return &TSimpleSessionService_WCreateSessionResult{}
}

var TSimpleSessionService_WCreateSessionResult_Success_DEFAULT *TSessionKeyResult_
func (p *TSimpleSessionService_WCreateSessionResult) GetSuccess() *TSessionKeyResult_ {
  if !p.IsSetSuccess() {
    return TSimpleSessionService_WCreateSessionResult_Success_DEFAULT
  }
return p.Success
}
func (p *TSimpleSessionService_WCreateSessionResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TSimpleSessionService_WCreateSessionResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TSimpleSessionService_WCreateSessionResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TSessionKeyResult_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TSimpleSessionService_WCreateSessionResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("createSession_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TSimpleSessionService_WCreateSessionResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TSimpleSessionService_WCreateSessionResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TSimpleSessionService_WCreateSessionResult(%+v)", *p)
}

// Attributes:
//  - SessionKey
type TSimpleSessionService_WRemoveSessionArgs struct {
  SessionKey TSessionKey `thrift:"sessionKey,1" db:"sessionKey" json:"sessionKey"`
}

func NewTSimpleSessionService_WRemoveSessionArgs() *TSimpleSessionService_WRemoveSessionArgs {
  return &TSimpleSessionService_WRemoveSessionArgs{}
}


func (p *TSimpleSessionService_WRemoveSessionArgs) GetSessionKey() TSessionKey {
  return p.SessionKey
}
func (p *TSimpleSessionService_WRemoveSessionArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TSimpleSessionService_WRemoveSessionArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TSessionKey(v)
  p.SessionKey = temp
}
  return nil
}

func (p *TSimpleSessionService_WRemoveSessionArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("removeSession_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TSimpleSessionService_WRemoveSessionArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("sessionKey", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:sessionKey: ", p), err) }
  if err := oprot.WriteString(string(p.SessionKey)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sessionKey (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:sessionKey: ", p), err) }
  return err
}

func (p *TSimpleSessionService_WRemoveSessionArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TSimpleSessionService_WRemoveSessionArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TSimpleSessionService_WRemoveSessionResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTSimpleSessionService_WRemoveSessionResult() *TSimpleSessionService_WRemoveSessionResult {
  return &TSimpleSessionService_WRemoveSessionResult{}
}

var TSimpleSessionService_WRemoveSessionResult_Success_DEFAULT bool
func (p *TSimpleSessionService_WRemoveSessionResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return TSimpleSessionService_WRemoveSessionResult_Success_DEFAULT
  }
return *p.Success
}
func (p *TSimpleSessionService_WRemoveSessionResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TSimpleSessionService_WRemoveSessionResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TSimpleSessionService_WRemoveSessionResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *TSimpleSessionService_WRemoveSessionResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("removeSession_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TSimpleSessionService_WRemoveSessionResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TSimpleSessionService_WRemoveSessionResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TSimpleSessionService_WRemoveSessionResult(%+v)", *p)
}


